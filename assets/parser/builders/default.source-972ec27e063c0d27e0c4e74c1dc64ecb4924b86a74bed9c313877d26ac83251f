/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $slice = Opal.slice;

  Opal.add_stubs(['$attr_accessor', '$n0', '$token_map', '$numeric', '$n', '$value', '$new', '$loc', '$private', '$===', '$+@', '$-@', '$updated', '$join', '$expression', '$string_value', '$delimited_string_map', '$unquoted_map', '$collapse_string_parts?', '$nil?', '$first', '$children', '$string_map', '$prefix_string_map', '$to_sym', '$collection_map', '$==', '$version', '$empty?', '$diagnostic', '$!', '$type', '$dedent', '$map', '$interrupt', '$compact', '$uniq', '$sort', '$each_char', '$to_proc', '$static_regexp', '$message', '$<<', '$regexp_map', '$unary_op_map', '$binary_op_map', '$!=', '$%', '$size', '$last', '$each_slice', '$pair_keyword_map', '$pair_quoted_map', '$symbol_compose', '$range_map', '$variable_map', '$name', '$source_buffer', '$dup', '$line', '$emit_encoding', '$class', '$declared?', '$static_env', '$to_s', '$top', '$current_arg_stack', '$parser', '$var_send_map', '$constant_map', '$dynamic_const_definition_allowed?', '$context', '$[]', '$check_assignment_to_numparam', '$check_reserved_for_numparam', '$declare', '$with_expression', '$with_operator', '$join_exprs', '$module_definition_map', '$definition_map', '$endless_definition_map', '$validate_definee', '$keyword_map', '$check_duplicate_args', '$emit_forward_arg', '$forward_arg', '$arg_prefix_map', '$kwarg_map', '$emit_procarg0', '$emit_arg_inside_procarg0', '$location', '$resize', '$-', '$end', '$call_type_for_dot', '$emit_kwargs', '$rewrite_hash_args_to_kwargs', '$send_map', '$emit_lambda', '$expr_map', '$keyword', '$include?', '$block_map', '$array', '$+', '$emit_index', '$index_map', '$send_index_map', '$send_binary_op_map', '$static_regexp_node', '$each', '$names', '$send_unary_op_map', '$check_condition', '$condition_map', '$keyword_mod_map', '$ternary_map', '$for_map', '$>', '$count', '$rescue_body_map', '$any?', '$eh_keyword_map', '$push', '$none?', '$one?', '$begin', '$guard_map', '$check_lvar_name', '$check_duplicate_pattern_variable', '$adjust', '$length', '$match_hash_var_from_str', '$match_var', '$check_duplicate_pattern_key', '$pair_keyword', '$static_string', '$pair_quoted', '$match_hash_var', '$<=', '$check_duplicate_arg', '$is_a?', '$[]=', '$arg_name_collides?', '$<', '$in_dynamic_block?', '$=~', '$has_numparams?', '$max_numparam_stack', '$start_with?', '$pattern_variables', '$pattern_hash_keys', '$with', '$begin_pos', '$end_pos', '$encode', '$valid_encoding?', '$process', '$diagnostics', '$send', '$kwargs?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Default');

      var $nesting = [self].concat($parent_nesting), $Default_initialize$2, $Default_nil$3, $Default_true$4, $Default_false$5, $Default_integer$6, $Default_float$7, $Default_rational$8, $Default_complex$9, $Default_numeric$10, $Default_unary_num$11, $Default___LINE__$12, $Default_string$13, $Default_string_internal$14, $Default_string_compose$15, $Default_character$16, $Default___FILE__$17, $Default_symbol$18, $Default_symbol_internal$19, $Default_symbol_compose$20, $Default_xstring_compose$21, $Default_dedent_string$22, $Default_regexp_options$24, $Default_regexp_compose$25, $Default_array$26, $Default_splat$27, $Default_word$28, $Default_words_compose$29, $Default_symbols_compose$30, $Default_pair$32, $Default_pair_list_18$33, $Default_pair_keyword$35, $Default_pair_quoted$36, $Default_kwsplat$37, $Default_associate$38, $Default_range_inclusive$39, $Default_range_exclusive$40, $Default_self$41, $Default_ident$42, $Default_ivar$43, $Default_gvar$44, $Default_cvar$45, $Default_back_ref$46, $Default_nth_ref$47, $Default_accessible$48, $Default_const$49, $Default_const_global$50, $Default_const_fetch$51, $Default___ENCODING__$52, $Default_assignable$53, $Default_const_op_assignable$54, $Default_assign$55, $Default_op_assign$56, $Default_multi_lhs$57, $Default_multi_assign$58, $Default_def_class$59, $Default_def_sclass$60, $Default_def_module$61, $Default_def_method$62, $Default_def_endless_method$63, $Default_def_singleton$64, $Default_def_endless_singleton$65, $Default_undef_method$66, $Default_alias$67, $Default_args$68, $Default_numargs$69, $Default_forward_only_args$70, $Default_forward_arg$71, $Default_arg$72, $Default_optarg$73, $Default_restarg$74, $Default_kwarg$75, $Default_kwoptarg$76, $Default_kwrestarg$77, $Default_kwnilarg$78, $Default_shadowarg$79, $Default_blockarg$80, $Default_procarg0$81, $Default_arg_expr$82, $Default_restarg_expr$83, $Default_blockarg_expr$84, $Default_objc_kwarg$85, $Default_objc_restarg$86, $Default_call_type_for_dot$87, $Default_forwarded_args$88, $Default_call_method$89, $Default_call_lambda$90, $Default_block$91, $Default_block_pass$92, $Default_objc_varargs$93, $Default_attr_asgn$94, $Default_index$95, $Default_index_asgn$96, $Default_binary_op$97, $Default_match_op$98, $Default_unary_op$100, $Default_not_op$101, $Default_logical_op$102, $Default_condition$103, $Default_condition_mod$104, $Default_ternary$105, $Default_when$106, $Default_case$107, $Default_loop$108, $Default_loop_mod$109, $Default_for$110, $Default_keyword_cmd$111, $Default_preexe$112, $Default_postexe$113, $Default_rescue_body$114, $Default_begin_body$115, $Default_compstmt$116, $Default_begin$117, $Default_begin_keyword$118, $Default_case_match$119, $Default_in_match$120, $Default_match_pattern$121, $Default_match_pattern_p$122, $Default_in_pattern$123, $Default_if_guard$124, $Default_unless_guard$125, $Default_match_var$126, $Default_match_hash_var$127, $Default_match_hash_var_from_str$128, $Default_match_rest$129, $Default_hash_pattern$130, $Default_array_pattern$131, $Default_find_pattern$133, $Default_match_with_trailing_comma$134, $Default_const_pattern$135, $Default_pin$136, $Default_match_alt$137, $Default_match_as$138, $Default_match_nil_pattern$139, $Default_match_pair$140, $Default_match_label$141, $Default_check_condition$142, $Default_check_duplicate_args$143, $Default_check_duplicate_arg$145, $Default_check_assignment_to_numparam$146, $Default_check_reserved_for_numparam$147, $Default_arg_name_collides$ques$148, $Default_check_lvar_name$149, $Default_check_duplicate_pattern_variable$150, $Default_check_duplicate_pattern_key$151, $Default_n$152, $Default_n0$153, $Default_join_exprs$154, $Default_token_map$155, $Default_delimited_string_map$156, $Default_prefix_string_map$157, $Default_unquoted_map$158, $Default_pair_keyword_map$159, $Default_pair_quoted_map$160, $Default_expr_map$161, $Default_collection_map$162, $Default_string_map$163, $Default_regexp_map$164, $Default_constant_map$165, $Default_variable_map$166, $Default_binary_op_map$167, $Default_unary_op_map$168, $Default_range_map$169, $Default_arg_prefix_map$170, $Default_kwarg_map$171, $Default_module_definition_map$172, $Default_definition_map$173, $Default_endless_definition_map$174, $Default_send_map$175, $Default_var_send_map$176, $Default_send_binary_op_map$177, $Default_send_unary_op_map$178, $Default_index_map$179, $Default_send_index_map$180, $Default_block_map$181, $Default_keyword_map$182, $Default_keyword_mod_map$183, $Default_condition_map$184, $Default_ternary_map$185, $Default_for_map$186, $Default_rescue_body_map$187, $Default_eh_keyword_map$188, $Default_guard_map$189, $Default_static_string$190, $Default_static_regexp$192, $Default_static_regexp_node$193, $Default_collapse_string_parts$ques$194, $Default_value$195, $Default_string_value$196, $Default_loc$197, $Default_diagnostic$198, $Default_validate_definee$199, $Default_rewrite_hash_args_to_kwargs$200, $Default_kwargs$ques$201;

      self.$$prototype.parser = self.$$prototype.emit_file_line_as_literals = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_lambda")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_lambda = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_procarg0 = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_encoding")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_encoding = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_index")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_index = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_arg_inside_procarg0")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_arg_inside_procarg0 = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_forward_arg")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_forward_arg = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_kwargs")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_kwargs = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting);

        return self.$attr_accessor("emit_match_pattern")
      })(Opal.get_singleton_class(self), $nesting);
      self.emit_match_pattern = false;
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $modernize$1;

        return (Opal.def(self, '$modernize', $modernize$1 = function $$modernize() {
          var self = this;

          
          self.emit_lambda = true;
          self.emit_procarg0 = true;
          self.emit_encoding = true;
          self.emit_index = true;
          self.emit_arg_inside_procarg0 = true;
          self.emit_forward_arg = true;
          self.emit_kwargs = true;
          return (self.emit_match_pattern = true);
        }, $modernize$1.$$arity = 0), nil) && 'modernize'
      })(Opal.get_singleton_class(self), $nesting);
      self.$attr_accessor("parser");
      self.$attr_accessor("emit_file_line_as_literals");
      
      Opal.def(self, '$initialize', $Default_initialize$2 = function $$initialize() {
        var self = this;

        return (self.emit_file_line_as_literals = true)
      }, $Default_initialize$2.$$arity = 0);
      
      Opal.def(self, '$nil', $Default_nil$3 = function $$nil(nil_t) {
        var self = this;

        return self.$n0("nil", self.$token_map(nil_t))
      }, $Default_nil$3.$$arity = 1);
      
      Opal.def(self, '$true', $Default_true$4 = function(true_t) {
        var self = this;

        return self.$n0("true", self.$token_map(true_t))
      }, $Default_true$4.$$arity = 1);
      
      Opal.def(self, '$false', $Default_false$5 = function(false_t) {
        var self = this;

        return self.$n0("false", self.$token_map(false_t))
      }, $Default_false$5.$$arity = 1);
      
      Opal.def(self, '$integer', $Default_integer$6 = function $$integer(integer_t) {
        var self = this;

        return self.$numeric("int", integer_t)
      }, $Default_integer$6.$$arity = 1);
      
      Opal.def(self, '$float', $Default_float$7 = function(float_t) {
        var self = this;

        return self.$numeric("float", float_t)
      }, $Default_float$7.$$arity = 1);
      
      Opal.def(self, '$rational', $Default_rational$8 = function $$rational(rational_t) {
        var self = this;

        return self.$numeric("rational", rational_t)
      }, $Default_rational$8.$$arity = 1);
      
      Opal.def(self, '$complex', $Default_complex$9 = function $$complex(complex_t) {
        var self = this;

        return self.$numeric("complex", complex_t)
      }, $Default_complex$9.$$arity = 1);
      
      Opal.def(self, '$numeric', $Default_numeric$10 = function $$numeric(kind, token) {
        var self = this;

        return self.$n(kind, [self.$value(token)], $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(nil, self.$loc(token)))
      }, $Default_numeric$10.$$arity = 2);
      self.$private("numeric");
      
      Opal.def(self, '$unary_num', $Default_unary_num$11 = function $$unary_num(unary_t, numeric) {
        var $a, self = this, value = nil, operator_loc = nil, $case = nil;

        
        $a = [].concat(Opal.to_a(numeric)), (value = ($a[0] == null ? nil : $a[0])), $a;
        operator_loc = self.$loc(unary_t);
        $case = self.$value(unary_t);
        if ("+"['$===']($case)) {value = value['$+@']()}
        else if ("-"['$===']($case)) {value = value['$-@']()};
        return numeric.$updated(nil, [value], $hash2(["location"], {"location": $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(operator_loc, operator_loc.$join(numeric.$loc().$expression()))}));
      }, $Default_unary_num$11.$$arity = 2);
      
      Opal.def(self, '$__LINE__', $Default___LINE__$12 = function $$__LINE__(__LINE__t) {
        var self = this;

        return self.$n0("__LINE__", self.$token_map(__LINE__t))
      }, $Default___LINE__$12.$$arity = 1);
      
      Opal.def(self, '$string', $Default_string$13 = function $$string(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$delimited_string_map(string_t))
      }, $Default_string$13.$$arity = 1);
      
      Opal.def(self, '$string_internal', $Default_string_internal$14 = function $$string_internal(string_t) {
        var self = this;

        return self.$n("str", [self.$string_value(string_t)], self.$unquoted_map(string_t))
      }, $Default_string_internal$14.$$arity = 1);
      
      Opal.def(self, '$string_compose', $Default_string_compose$15 = function $$string_compose(begin_t, parts, end_t) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          if ($truthy((function() {if ($truthy(($ret_or_1 = begin_t['$nil?']()))) {
            return end_t['$nil?']()
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return parts.$first()
          } else {
            return self.$n("str", parts.$first().$children(), self.$string_map(begin_t, parts, end_t))
          }
        } else {
          return self.$n("dstr", [].concat(Opal.to_a(parts)), self.$string_map(begin_t, parts, end_t))
        }
      }, $Default_string_compose$15.$$arity = 3);
      
      Opal.def(self, '$character', $Default_character$16 = function $$character(char_t) {
        var self = this;

        return self.$n("str", [self.$string_value(char_t)], self.$prefix_string_map(char_t))
      }, $Default_character$16.$$arity = 1);
      
      Opal.def(self, '$__FILE__', $Default___FILE__$17 = function $$__FILE__(__FILE__t) {
        var self = this;

        return self.$n0("__FILE__", self.$token_map(__FILE__t))
      }, $Default___FILE__$17.$$arity = 1);
      
      Opal.def(self, '$symbol', $Default_symbol$18 = function $$symbol(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$prefix_string_map(symbol_t))
      }, $Default_symbol$18.$$arity = 1);
      
      Opal.def(self, '$symbol_internal', $Default_symbol_internal$19 = function $$symbol_internal(symbol_t) {
        var self = this;

        return self.$n("sym", [self.$string_value(symbol_t).$to_sym()], self.$unquoted_map(symbol_t))
      }, $Default_symbol_internal$19.$$arity = 1);
      
      Opal.def(self, '$symbol_compose', $Default_symbol_compose$20 = function $$symbol_compose(begin_t, parts, end_t) {
        var self = this, str = nil, $ret_or_2 = nil;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          
          str = parts.$first();
          return self.$n("sym", [str.$children().$first().$to_sym()], self.$collection_map(begin_t, str.$loc().$expression(), end_t));
        } else if ($truthy((function() {if ($truthy(($ret_or_2 = self.parser.$version()['$=='](18)))) {
          return parts['$empty?']()
        } else {
          return $ret_or_2
        }; return nil; })())) {
          return self.$diagnostic("error", "empty_symbol", nil, self.$loc(begin_t).$join(self.$loc(end_t)))
        } else {
          return self.$n("dsym", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t))
        }
      }, $Default_symbol_compose$20.$$arity = 3);
      
      Opal.def(self, '$xstring_compose', $Default_xstring_compose$21 = function $$xstring_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("xstr", [].concat(Opal.to_a(parts)), self.$string_map(begin_t, parts, end_t))
      }, $Default_xstring_compose$21.$$arity = 3);
      
      Opal.def(self, '$dedent_string', $Default_dedent_string$22 = function $$dedent_string(node, dedent_level) {
        var $$23, self = this, dedenter = nil, $case = nil, str = nil, children = nil;

        
        if ($truthy(dedent_level['$nil?']()['$!']())) {
          
          dedenter = $$$($$($nesting, 'Lexer'), 'Dedenter').$new(dedent_level);
          $case = node.$type();
          if ("str"['$===']($case)) {
          str = node.$children().$first();
          dedenter.$dedent(str);}
          else if ("dstr"['$===']($case) || "xstr"['$===']($case)) {
          children = $send(node.$children(), 'map', [], ($$23 = function(str_node){var self = $$23.$$s == null ? this : $$23.$$s;

          
            
            if (str_node == null) {
              str_node = nil;
            };
            if (str_node.$type()['$==']("str")) {
              
              str = str_node.$children().$first();
              dedenter.$dedent(str);
              if ($truthy(str['$empty?']())) {
                return nil;};
            } else {
              dedenter.$interrupt()
            };
            return str_node;}, $$23.$$s = self, $$23.$$arity = 1, $$23));
          node = node.$updated(nil, children.$compact());};};
        return node;
      }, $Default_dedent_string$22.$$arity = 2);
      
      Opal.def(self, '$regexp_options', $Default_regexp_options$24 = function $$regexp_options(regopt_t) {
        var self = this, options = nil;

        
        options = $send(self.$value(regopt_t).$each_char().$sort().$uniq(), 'map', [], "to_sym".$to_proc());
        return self.$n("regopt", options, self.$token_map(regopt_t));
      }, $Default_regexp_options$24.$$arity = 1);
      
      Opal.def(self, '$regexp_compose', $Default_regexp_compose$25 = function $$regexp_compose(begin_t, parts, end_t, options) {
        var self = this, e = nil;

        
        
        try {
          self.$static_regexp(parts, options)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'RegexpError')])) {(e = $err)
            try {
              self.$diagnostic("error", "invalid_regexp", $hash2(["message"], {"message": e.$message()}), self.$loc(begin_t).$join(self.$loc(end_t)))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
        return self.$n("regexp", parts['$<<'](options), self.$regexp_map(begin_t, end_t, options));
      }, $Default_regexp_compose$25.$$arity = 4);
      
      Opal.def(self, '$array', $Default_array$26 = function $$array(begin_t, elements, end_t) {
        var self = this;

        return self.$n("array", elements, self.$collection_map(begin_t, elements, end_t))
      }, $Default_array$26.$$arity = 3);
      
      Opal.def(self, '$splat', $Default_splat$27 = function $$splat(star_t, arg) {
        var self = this;

        
        
        if (arg == null) {
          arg = nil;
        };
        if ($truthy(arg['$nil?']())) {
          return self.$n0("splat", self.$unary_op_map(star_t))
        } else {
          return self.$n("splat", [arg], self.$unary_op_map(star_t, arg))
        };
      }, $Default_splat$27.$$arity = -2);
      
      Opal.def(self, '$word', $Default_word$28 = function $$word(parts) {
        var self = this;

        if ($truthy(self['$collapse_string_parts?'](parts))) {
          return parts.$first()
        } else {
          return self.$n("dstr", [].concat(Opal.to_a(parts)), self.$collection_map(nil, parts, nil))
        }
      }, $Default_word$28.$$arity = 1);
      
      Opal.def(self, '$words_compose', $Default_words_compose$29 = function $$words_compose(begin_t, parts, end_t) {
        var self = this;

        return self.$n("array", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t))
      }, $Default_words_compose$29.$$arity = 3);
      
      Opal.def(self, '$symbols_compose', $Default_symbols_compose$30 = function $$symbols_compose(begin_t, parts, end_t) {
        var $$31, self = this;

        
        parts = $send(parts, 'map', [], ($$31 = function(part){var self = $$31.$$s == null ? this : $$31.$$s, $a, $case = nil, value = nil;

        
          
          if (part == null) {
            part = nil;
          };
          return (function() {$case = part.$type();
          if ("str"['$===']($case)) {
          $a = [].concat(Opal.to_a(part)), (value = ($a[0] == null ? nil : $a[0])), $a;
          return part.$updated("sym", [value.$to_sym()]);}
          else if ("dstr"['$===']($case)) {return part.$updated("dsym")}
          else {return part}})();}, $$31.$$s = self, $$31.$$arity = 1, $$31));
        return self.$n("array", [].concat(Opal.to_a(parts)), self.$collection_map(begin_t, parts, end_t));
      }, $Default_symbols_compose$30.$$arity = 3);
      
      Opal.def(self, '$pair', $Default_pair$32 = function $$pair(key, assoc_t, value) {
        var self = this;

        return self.$n("pair", [key, value], self.$binary_op_map(key, assoc_t, value))
      }, $Default_pair$32.$$arity = 3);
      
      Opal.def(self, '$pair_list_18', $Default_pair_list_18$33 = function $$pair_list_18(list) {
        var $$34, self = this;

        if ($truthy(list.$size()['$%'](2)['$!='](0))) {
          return self.$diagnostic("error", "odd_hash", nil, list.$last().$loc().$expression())
        } else {
          return $send(list.$each_slice(2), 'map', [], ($$34 = function(key, value){var self = $$34.$$s == null ? this : $$34.$$s;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            return self.$n("pair", [key, value], self.$binary_op_map(key, nil, value));}, $$34.$$s = self, $$34.$$arity = 2, $$34))
        }
      }, $Default_pair_list_18$33.$$arity = 1);
      
      Opal.def(self, '$pair_keyword', $Default_pair_keyword$35 = function $$pair_keyword(key_t, value) {
        var $a, $b, self = this, key_map = nil, pair_map = nil, key = nil;

        
        $b = self.$pair_keyword_map(key_t, value), $a = Opal.to_ary($b), (key_map = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$n("sym", [self.$value(key_t).$to_sym()], key_map);
        return self.$n("pair", [key, value], pair_map);
      }, $Default_pair_keyword$35.$$arity = 2);
      
      Opal.def(self, '$pair_quoted', $Default_pair_quoted$36 = function $$pair_quoted(begin_t, parts, end_t, value) {
        var $a, $b, self = this, pair_map = nil, key = nil;

        
        $b = self.$pair_quoted_map(begin_t, end_t, value), $a = Opal.to_ary($b), (end_t = ($a[0] == null ? nil : $a[0])), (pair_map = ($a[1] == null ? nil : $a[1])), $b;
        key = self.$symbol_compose(begin_t, parts, end_t);
        return self.$n("pair", [key, value], pair_map);
      }, $Default_pair_quoted$36.$$arity = 4);
      
      Opal.def(self, '$kwsplat', $Default_kwsplat$37 = function $$kwsplat(dstar_t, arg) {
        var self = this;

        return self.$n("kwsplat", [arg], self.$unary_op_map(dstar_t, arg))
      }, $Default_kwsplat$37.$$arity = 2);
      
      Opal.def(self, '$associate', $Default_associate$38 = function $$associate(begin_t, pairs, end_t) {
        var self = this;

        return self.$n("hash", [].concat(Opal.to_a(pairs)), self.$collection_map(begin_t, pairs, end_t))
      }, $Default_associate$38.$$arity = 3);
      
      Opal.def(self, '$range_inclusive', $Default_range_inclusive$39 = function $$range_inclusive(lhs, dot2_t, rhs) {
        var self = this;

        return self.$n("irange", [lhs, rhs], self.$range_map(lhs, dot2_t, rhs))
      }, $Default_range_inclusive$39.$$arity = 3);
      
      Opal.def(self, '$range_exclusive', $Default_range_exclusive$40 = function $$range_exclusive(lhs, dot3_t, rhs) {
        var self = this;

        return self.$n("erange", [lhs, rhs], self.$range_map(lhs, dot3_t, rhs))
      }, $Default_range_exclusive$40.$$arity = 3);
      
      Opal.def(self, '$self', $Default_self$41 = function $$self(token) {
        var self = this;

        return self.$n0("self", self.$token_map(token))
      }, $Default_self$41.$$arity = 1);
      
      Opal.def(self, '$ident', $Default_ident$42 = function $$ident(token) {
        var self = this;

        return self.$n("ident", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_ident$42.$$arity = 1);
      
      Opal.def(self, '$ivar', $Default_ivar$43 = function $$ivar(token) {
        var self = this;

        return self.$n("ivar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_ivar$43.$$arity = 1);
      
      Opal.def(self, '$gvar', $Default_gvar$44 = function $$gvar(token) {
        var self = this;

        return self.$n("gvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_gvar$44.$$arity = 1);
      
      Opal.def(self, '$cvar', $Default_cvar$45 = function $$cvar(token) {
        var self = this;

        return self.$n("cvar", [self.$value(token).$to_sym()], self.$variable_map(token))
      }, $Default_cvar$45.$$arity = 1);
      
      Opal.def(self, '$back_ref', $Default_back_ref$46 = function $$back_ref(token) {
        var self = this;

        return self.$n("back_ref", [self.$value(token).$to_sym()], self.$token_map(token))
      }, $Default_back_ref$46.$$arity = 1);
      
      Opal.def(self, '$nth_ref', $Default_nth_ref$47 = function $$nth_ref(token) {
        var self = this;

        return self.$n("nth_ref", [self.$value(token)], self.$token_map(token))
      }, $Default_nth_ref$47.$$arity = 1);
      
      Opal.def(self, '$accessible', $Default_accessible$48 = function $$accessible(node) {
        var $a, self = this, $case = nil, name = nil;

        return (function() {$case = node.$type();
        if ("__FILE__"['$===']($case)) {if ($truthy(self.emit_file_line_as_literals)) {
          return self.$n("str", [node.$loc().$expression().$source_buffer().$name()], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("__LINE__"['$===']($case)) {if ($truthy(self.emit_file_line_as_literals)) {
          return self.$n("int", [node.$loc().$expression().$line()], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("__ENCODING__"['$===']($case)) {if ($truthy(self.$class().$emit_encoding()['$!']())) {
          return self.$n("const", [self.$n("const", [nil, "Encoding"], nil), "UTF_8"], node.$loc().$dup())
        } else {
          return node
        }}
        else if ("ident"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        if ($truthy(self.parser.$static_env()['$declared?'](name))) {
          
          if (name.$to_s()['$=='](self.$parser().$current_arg_stack().$top())) {
            self.$diagnostic("error", "circular_argument_reference", $hash2(["var_name"], {"var_name": name.$to_s()}), node.$loc().$expression())};
          return node.$updated("lvar");
        } else {
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
          return self.$n("send", [nil, name], self.$var_send_map(node));
        };}
        else {return node}})()
      }, $Default_accessible$48.$$arity = 1);
      
      Opal.def(self, '$const', $Default_const$49 = function(name_t) {
        var self = this;

        return self.$n("const", [nil, self.$value(name_t).$to_sym()], self.$constant_map(nil, nil, name_t))
      }, $Default_const$49.$$arity = 1);
      
      Opal.def(self, '$const_global', $Default_const_global$50 = function $$const_global(t_colon3, name_t) {
        var self = this, cbase = nil;

        
        cbase = self.$n0("cbase", self.$token_map(t_colon3));
        return self.$n("const", [cbase, self.$value(name_t).$to_sym()], self.$constant_map(cbase, t_colon3, name_t));
      }, $Default_const_global$50.$$arity = 2);
      
      Opal.def(self, '$const_fetch', $Default_const_fetch$51 = function $$const_fetch(scope, t_colon2, name_t) {
        var self = this;

        return self.$n("const", [scope, self.$value(name_t).$to_sym()], self.$constant_map(scope, t_colon2, name_t))
      }, $Default_const_fetch$51.$$arity = 3);
      
      Opal.def(self, '$__ENCODING__', $Default___ENCODING__$52 = function $$__ENCODING__(__ENCODING__t) {
        var self = this;

        return self.$n0("__ENCODING__", self.$token_map(__ENCODING__t))
      }, $Default___ENCODING__$52.$$arity = 1);
      
      Opal.def(self, '$assignable', $Default_assignable$53 = function $$assignable(node) {
        var $a, self = this, $case = nil, name = nil, var_name = nil, name_loc = nil;

        return (function() {$case = node.$type();
        if ("cvar"['$===']($case)) {return node.$updated("cvasgn")}
        else if ("ivar"['$===']($case)) {return node.$updated("ivasgn")}
        else if ("gvar"['$===']($case)) {return node.$updated("gvasgn")}
        else if ("const"['$===']($case)) {
        if ($truthy(self.parser.$context()['$dynamic_const_definition_allowed?']())) {
        } else {
          self.$diagnostic("error", "dynamic_const", nil, node.$loc().$expression())
        };
        return node.$updated("casgn");}
        else if ("ident"['$===']($case)) {
        $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), $a;
        var_name = node.$children()['$[]'](0).$to_s();
        name_loc = node.$loc().$expression();
        self.$check_assignment_to_numparam(var_name, name_loc);
        self.$check_reserved_for_numparam(var_name, name_loc);
        self.parser.$static_env().$declare(name);
        return node.$updated("lvasgn");}
        else if ("nil"['$===']($case) || "self"['$===']($case) || "true"['$===']($case) || "false"['$===']($case) || "__FILE__"['$===']($case) || "__LINE__"['$===']($case) || "__ENCODING__"['$===']($case)) {return self.$diagnostic("error", "invalid_assignment", nil, node.$loc().$expression())}
        else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, node.$loc().$expression())}
        else { return nil }})()
      }, $Default_assignable$53.$$arity = 1);
      
      Opal.def(self, '$const_op_assignable', $Default_const_op_assignable$54 = function $$const_op_assignable(node) {
        var self = this;

        return node.$updated("casgn")
      }, $Default_const_op_assignable$54.$$arity = 1);
      
      Opal.def(self, '$assign', $Default_assign$55 = function $$assign(lhs, eql_t, rhs) {
        var self = this;

        return lhs['$<<'](rhs).$updated(nil, nil, $hash2(["location"], {"location": lhs.$loc().$with_operator(self.$loc(eql_t)).$with_expression(self.$join_exprs(lhs, rhs))}))
      }, $Default_assign$55.$$arity = 3);
      
      Opal.def(self, '$op_assign', $Default_op_assign$56 = function $$op_assign(lhs, op_t, rhs) {
        var self = this, $case = nil, operator = nil, source_map = nil;

        return (function() {$case = lhs.$type();
        if ("gvasgn"['$===']($case) || "ivasgn"['$===']($case) || "lvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "send"['$===']($case) || "csend"['$===']($case) || "index"['$===']($case)) {
        operator = self.$value(op_t)['$[]']($range(0, -1, false)).$to_sym();
        source_map = lhs.$loc().$with_operator(self.$loc(op_t)).$with_expression(self.$join_exprs(lhs, rhs));
        if (lhs.$type()['$==']("index")) {
          lhs = lhs.$updated("indexasgn")};
        return (function() {$case = operator;
        if ("&&"['$===']($case)) {return self.$n("and_asgn", [lhs, rhs], source_map)}
        else if ("||"['$===']($case)) {return self.$n("or_asgn", [lhs, rhs], source_map)}
        else {return self.$n("op_asgn", [lhs, operator, rhs], source_map)}})();}
        else if ("back_ref"['$===']($case) || "nth_ref"['$===']($case)) {return self.$diagnostic("error", "backref_assignment", nil, lhs.$loc().$expression())}
        else { return nil }})()
      }, $Default_op_assign$56.$$arity = 3);
      
      Opal.def(self, '$multi_lhs', $Default_multi_lhs$57 = function $$multi_lhs(begin_t, items, end_t) {
        var self = this;

        return self.$n("mlhs", [].concat(Opal.to_a(items)), self.$collection_map(begin_t, items, end_t))
      }, $Default_multi_lhs$57.$$arity = 3);
      
      Opal.def(self, '$multi_assign', $Default_multi_assign$58 = function $$multi_assign(lhs, eql_t, rhs) {
        var self = this;

        return self.$n("masgn", [lhs, rhs], self.$binary_op_map(lhs, eql_t, rhs))
      }, $Default_multi_assign$58.$$arity = 3);
      
      Opal.def(self, '$def_class', $Default_def_class$59 = function $$def_class(class_t, name, lt_t, superclass, body, end_t) {
        var self = this;

        return self.$n("class", [name, superclass, body], self.$module_definition_map(class_t, name, lt_t, end_t))
      }, $Default_def_class$59.$$arity = 6);
      
      Opal.def(self, '$def_sclass', $Default_def_sclass$60 = function $$def_sclass(class_t, lshft_t, expr, body, end_t) {
        var self = this;

        return self.$n("sclass", [expr, body], self.$module_definition_map(class_t, nil, lshft_t, end_t))
      }, $Default_def_sclass$60.$$arity = 5);
      
      Opal.def(self, '$def_module', $Default_def_module$61 = function $$def_module(module_t, name, body, end_t) {
        var self = this;

        return self.$n("module", [name, body], self.$module_definition_map(module_t, name, nil, end_t))
      }, $Default_def_module$61.$$arity = 4);
      
      Opal.def(self, '$def_method', $Default_def_method$62 = function $$def_method(def_t, name_t, args, body, end_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, nil, name_t, end_t));
      }, $Default_def_method$62.$$arity = 5);
      
      Opal.def(self, '$def_endless_method', $Default_def_endless_method$63 = function $$def_endless_method(def_t, name_t, args, assignment_t, body) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("def", [self.$value(name_t).$to_sym(), args, body], self.$endless_definition_map(def_t, nil, name_t, assignment_t, body));
      }, $Default_def_endless_method$63.$$arity = 5);
      
      Opal.def(self, '$def_singleton', $Default_def_singleton$64 = function $$def_singleton(def_t, definee, dot_t, name_t, args, body, end_t) {
        var self = this;

        
        self.$validate_definee(definee);
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$definition_map(def_t, dot_t, name_t, end_t));
      }, $Default_def_singleton$64.$$arity = 7);
      
      Opal.def(self, '$def_endless_singleton', $Default_def_endless_singleton$65 = function $$def_endless_singleton(def_t, definee, dot_t, name_t, args, assignment_t, body) {
        var self = this;

        
        self.$validate_definee(definee);
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("defs", [definee, self.$value(name_t).$to_sym(), args, body], self.$endless_definition_map(def_t, dot_t, name_t, assignment_t, body));
      }, $Default_def_endless_singleton$65.$$arity = 7);
      
      Opal.def(self, '$undef_method', $Default_undef_method$66 = function $$undef_method(undef_t, names) {
        var self = this;

        return self.$n("undef", [].concat(Opal.to_a(names)), self.$keyword_map(undef_t, nil, names, nil))
      }, $Default_undef_method$66.$$arity = 2);
      
      Opal.def(self, '$alias', $Default_alias$67 = function $$alias(alias_t, to, from) {
        var self = this;

        return self.$n("alias", [to, from], self.$keyword_map(alias_t, nil, [to, from], nil))
      }, $Default_alias$67.$$arity = 3);
      
      Opal.def(self, '$args', $Default_args$68 = function $$args(begin_t, args, end_t, check_args) {
        var self = this;

        
        
        if (check_args == null) {
          check_args = true;
        };
        if ($truthy(check_args)) {
          args = self.$check_duplicate_args(args)};
        return self.$n("args", args, self.$collection_map(begin_t, args, end_t));
      }, $Default_args$68.$$arity = -4);
      
      Opal.def(self, '$numargs', $Default_numargs$69 = function $$numargs(max_numparam) {
        var self = this;

        return self.$n("numargs", [max_numparam], nil)
      }, $Default_numargs$69.$$arity = 1);
      
      Opal.def(self, '$forward_only_args', $Default_forward_only_args$70 = function $$forward_only_args(begin_t, dots_t, end_t) {
        var self = this, arg = nil;

        if ($truthy(self.$class().$emit_forward_arg())) {
          
          arg = self.$forward_arg(dots_t);
          return self.$n("args", [arg], self.$collection_map(begin_t, [arg], end_t));
        } else {
          return self.$n("forward_args", [], self.$collection_map(begin_t, self.$token_map(dots_t), end_t))
        }
      }, $Default_forward_only_args$70.$$arity = 3);
      
      Opal.def(self, '$forward_arg', $Default_forward_arg$71 = function $$forward_arg(dots_t) {
        var self = this;

        return self.$n("forward_arg", [], self.$token_map(dots_t))
      }, $Default_forward_arg$71.$$arity = 1);
      
      Opal.def(self, '$arg', $Default_arg$72 = function $$arg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("arg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t));
      }, $Default_arg$72.$$arity = 1);
      
      Opal.def(self, '$optarg', $Default_optarg$73 = function $$optarg(name_t, eql_t, value) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("optarg", [self.$value(name_t).$to_sym(), value], self.$variable_map(name_t).$with_operator(self.$loc(eql_t)).$with_expression(self.$loc(name_t).$join(value.$loc().$expression())));
      }, $Default_optarg$73.$$arity = 3);
      
      Opal.def(self, '$restarg', $Default_restarg$74 = function $$restarg(star_t, name_t) {
        var self = this;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t)) {
          
          self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
          return self.$n("restarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(star_t, name_t));
        } else {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        };
      }, $Default_restarg$74.$$arity = -2);
      
      Opal.def(self, '$kwarg', $Default_kwarg$75 = function $$kwarg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("kwarg", [self.$value(name_t).$to_sym()], self.$kwarg_map(name_t));
      }, $Default_kwarg$75.$$arity = 1);
      
      Opal.def(self, '$kwoptarg', $Default_kwoptarg$76 = function $$kwoptarg(name_t, value) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("kwoptarg", [self.$value(name_t).$to_sym(), value], self.$kwarg_map(name_t, value));
      }, $Default_kwoptarg$76.$$arity = 2);
      
      Opal.def(self, '$kwrestarg', $Default_kwrestarg$77 = function $$kwrestarg(dstar_t, name_t) {
        var self = this;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t)) {
          
          self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
          return self.$n("kwrestarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(dstar_t, name_t));
        } else {
          return self.$n0("kwrestarg", self.$arg_prefix_map(dstar_t))
        };
      }, $Default_kwrestarg$77.$$arity = -2);
      
      Opal.def(self, '$kwnilarg', $Default_kwnilarg$78 = function $$kwnilarg(dstar_t, nil_t) {
        var self = this;

        return self.$n0("kwnilarg", self.$arg_prefix_map(dstar_t, nil_t))
      }, $Default_kwnilarg$78.$$arity = 2);
      
      Opal.def(self, '$shadowarg', $Default_shadowarg$79 = function $$shadowarg(name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("shadowarg", [self.$value(name_t).$to_sym()], self.$variable_map(name_t));
      }, $Default_shadowarg$79.$$arity = 1);
      
      Opal.def(self, '$blockarg', $Default_blockarg$80 = function $$blockarg(amper_t, name_t) {
        var self = this;

        
        self.$check_reserved_for_numparam(self.$value(name_t), self.$loc(name_t));
        return self.$n("blockarg", [self.$value(name_t).$to_sym()], self.$arg_prefix_map(amper_t, name_t));
      }, $Default_blockarg$80.$$arity = 2);
      
      Opal.def(self, '$procarg0', $Default_procarg0$81 = function $$procarg0(arg) {
        var self = this, $ret_or_3 = nil;

        if ($truthy(self.$class().$emit_procarg0())) {
          if ($truthy((function() {if ($truthy(($ret_or_3 = arg.$type()['$==']("arg")))) {
            return self.$class().$emit_arg_inside_procarg0()
          } else {
            return $ret_or_3
          }; return nil; })())) {
            return self.$n("procarg0", [arg], $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, arg.$location().$expression()))
          } else {
            return arg.$updated("procarg0")
          }
        } else {
          return arg
        }
      }, $Default_procarg0$81.$$arity = 1);
      
      Opal.def(self, '$arg_expr', $Default_arg_expr$82 = function $$arg_expr(expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("arg")
        } else {
          return self.$n("arg_expr", [expr], expr.$loc().$dup())
        }
      }, $Default_arg_expr$82.$$arity = 1);
      
      Opal.def(self, '$restarg_expr', $Default_restarg_expr$83 = function $$restarg_expr(star_t, expr) {
        var self = this;

        
        
        if (expr == null) {
          expr = nil;
        };
        if ($truthy(expr['$nil?']())) {
          return self.$n0("restarg", self.$token_map(star_t))
        } else if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("restarg")
        } else {
          return self.$n("restarg_expr", [expr], expr.$loc().$dup())
        };
      }, $Default_restarg_expr$83.$$arity = -2);
      
      Opal.def(self, '$blockarg_expr', $Default_blockarg_expr$84 = function $$blockarg_expr(amper_t, expr) {
        var self = this;

        if (expr.$type()['$==']("lvasgn")) {
          return expr.$updated("blockarg")
        } else {
          return self.$n("blockarg_expr", [expr], expr.$loc().$dup())
        }
      }, $Default_blockarg_expr$84.$$arity = 2);
      
      Opal.def(self, '$objc_kwarg', $Default_objc_kwarg$85 = function $$objc_kwarg(kwname_t, assoc_t, name_t) {
        var self = this, kwname_l = nil, operator_l = nil;

        
        kwname_l = self.$loc(kwname_t);
        if ($truthy(assoc_t['$nil?']())) {
          
          kwname_l = kwname_l.$resize($rb_minus(kwname_l.$size(), 1));
          operator_l = kwname_l.$end().$resize(1);
        } else {
          operator_l = self.$loc(assoc_t)
        };
        return self.$n("objc_kwarg", [self.$value(kwname_t).$to_sym(), self.$value(name_t).$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'ObjcKwarg').$new(kwname_l, operator_l, self.$loc(name_t), kwname_l.$join(self.$loc(name_t))));
      }, $Default_objc_kwarg$85.$$arity = 3);
      
      Opal.def(self, '$objc_restarg', $Default_objc_restarg$86 = function $$objc_restarg(star_t, name) {
        var self = this;

        
        
        if (name == null) {
          name = nil;
        };
        if ($truthy(name['$nil?']())) {
          return self.$n0("restarg", self.$arg_prefix_map(star_t))
        } else if (name.$type()['$==']("arg")) {
          return name.$updated("restarg", nil, $hash2(["location"], {"location": name.$loc().$with_operator(self.$loc(star_t))}))
        } else {
          return self.$n("objc_restarg", [name], self.$unary_op_map(star_t, name))
        };
      }, $Default_objc_restarg$86.$$arity = -2);
      
      Opal.def(self, '$call_type_for_dot', $Default_call_type_for_dot$87 = function $$call_type_for_dot(dot_t) {
        var self = this, $ret_or_4 = nil;

        if ($truthy((function() {if ($truthy(($ret_or_4 = dot_t['$nil?']()['$!']()))) {
          return self.$value(dot_t)['$==']("anddot")
        } else {
          return $ret_or_4
        }; return nil; })())) {
          return "csend"
        } else {
          return "send"
        }
      }, $Default_call_type_for_dot$87.$$arity = 1);
      
      Opal.def(self, '$forwarded_args', $Default_forwarded_args$88 = function $$forwarded_args(dots_t) {
        var self = this;

        return self.$n("forwarded_args", [], self.$token_map(dots_t))
      }, $Default_forwarded_args$88.$$arity = 1);
      
      Opal.def(self, '$call_method', $Default_call_method$89 = function $$call_method(receiver, dot_t, selector_t, lparen_t, args, rparen_t) {
        var self = this, type = nil;

        
        
        if (lparen_t == null) {
          lparen_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (rparen_t == null) {
          rparen_t = nil;
        };
        type = self.$call_type_for_dot(dot_t);
        if ($truthy(self.$class().$emit_kwargs())) {
          self.$rewrite_hash_args_to_kwargs(args)};
        if ($truthy(selector_t['$nil?']())) {
          return self.$n(type, [receiver, "call"].concat(Opal.to_a(args)), self.$send_map(receiver, dot_t, nil, lparen_t, args, rparen_t))
        } else {
          return self.$n(type, [receiver, self.$value(selector_t).$to_sym()].concat(Opal.to_a(args)), self.$send_map(receiver, dot_t, selector_t, lparen_t, args, rparen_t))
        };
      }, $Default_call_method$89.$$arity = -4);
      
      Opal.def(self, '$call_lambda', $Default_call_lambda$90 = function $$call_lambda(lambda_t) {
        var self = this;

        if ($truthy(self.$class().$emit_lambda())) {
          return self.$n0("lambda", self.$expr_map(self.$loc(lambda_t)))
        } else {
          return self.$n("send", [nil, "lambda"], self.$send_map(nil, nil, lambda_t))
        }
      }, $Default_call_lambda$90.$$arity = 1);
      
      Opal.def(self, '$block', $Default_block$91 = function $$block(method_call, begin_t, args, body, end_t) {
        var $a, self = this, _receiver = nil, _selector = nil, call_args = nil, last_arg = nil, $ret_or_5 = nil, $ret_or_6 = nil, block_type = nil, actual_send = nil, block = nil;

        
        $a = [].concat(Opal.to_a(method_call)), (_receiver = ($a[0] == null ? nil : $a[0])), (_selector = ($a[1] == null ? nil : $a[1])), (call_args = $slice.call($a, 2)), $a;
        if (method_call.$type()['$==']("yield")) {
          self.$diagnostic("error", "block_given_to_yield", nil, method_call.$loc().$keyword(), [self.$loc(begin_t)])};
        last_arg = call_args.$last();
        if ($truthy((function() {if ($truthy(($ret_or_5 = last_arg))) {
          
          if ($truthy(($ret_or_6 = last_arg.$type()['$==']("block_pass")))) {
            return $ret_or_6
          } else {
            return last_arg.$type()['$==']("forwarded_args")
          };
        } else {
          return $ret_or_5
        }; return nil; })())) {
          self.$diagnostic("error", "block_and_blockarg", nil, last_arg.$loc().$expression(), [self.$loc(begin_t)])};
        if (args.$type()['$==']("numargs")) {
          
          block_type = "numblock";
          args = args.$children()['$[]'](0);
        } else {
          block_type = "block"
        };
        if ($truthy(["send", "csend", "index", "super", "zsuper", "lambda"]['$include?'](method_call.$type()))) {
          return self.$n(block_type, [method_call, args, body], self.$block_map(method_call.$loc().$expression(), begin_t, end_t))
        } else {
          
          $a = [].concat(Opal.to_a(method_call)), (actual_send = ($a[0] == null ? nil : $a[0])), $a;
          block = self.$n(block_type, [actual_send, args, body], self.$block_map(actual_send.$loc().$expression(), begin_t, end_t));
          return self.$n(method_call.$type(), [block], method_call.$loc().$with_expression(self.$join_exprs(method_call, block)));
        };
      }, $Default_block$91.$$arity = 5);
      
      Opal.def(self, '$block_pass', $Default_block_pass$92 = function $$block_pass(amper_t, arg) {
        var self = this;

        return self.$n("block_pass", [arg], self.$unary_op_map(amper_t, arg))
      }, $Default_block_pass$92.$$arity = 2);
      
      Opal.def(self, '$objc_varargs', $Default_objc_varargs$93 = function $$objc_varargs(pair, rest_of_varargs) {
        var $a, self = this, value = nil, first_vararg = nil, vararg_array = nil;

        
        $a = [].concat(Opal.to_a(pair)), (value = ($a[0] == null ? nil : $a[0])), (first_vararg = ($a[1] == null ? nil : $a[1])), $a;
        vararg_array = self.$array(nil, [first_vararg].concat(Opal.to_a(rest_of_varargs)), nil).$updated("objc_varargs");
        return pair.$updated(nil, [value, vararg_array], $hash2(["location"], {"location": pair.$loc().$with_expression(pair.$loc().$expression().$join(vararg_array.$loc().$expression()))}));
      }, $Default_objc_varargs$93.$$arity = 2);
      
      Opal.def(self, '$attr_asgn', $Default_attr_asgn$94 = function $$attr_asgn(receiver, dot_t, selector_t) {
        var self = this, method_name = nil, type = nil;

        
        method_name = $rb_plus(self.$value(selector_t), "=").$to_sym();
        type = self.$call_type_for_dot(dot_t);
        return self.$n(type, [receiver, method_name], self.$send_map(receiver, dot_t, selector_t));
      }, $Default_attr_asgn$94.$$arity = 3);
      
      Opal.def(self, '$index', $Default_index$95 = function $$index(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        
        if ($truthy(self.$class().$emit_kwargs())) {
          self.$rewrite_hash_args_to_kwargs(indexes)};
        if ($truthy(self.$class().$emit_index())) {
          return self.$n("index", [receiver].concat(Opal.to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]"].concat(Opal.to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        };
      }, $Default_index$95.$$arity = 4);
      
      Opal.def(self, '$index_asgn', $Default_index_asgn$96 = function $$index_asgn(receiver, lbrack_t, indexes, rbrack_t) {
        var self = this;

        if ($truthy(self.$class().$emit_index())) {
          return self.$n("indexasgn", [receiver].concat(Opal.to_a(indexes)), self.$index_map(receiver, lbrack_t, rbrack_t))
        } else {
          return self.$n("send", [receiver, "[]="].concat(Opal.to_a(indexes)), self.$send_index_map(receiver, lbrack_t, rbrack_t))
        }
      }, $Default_index_asgn$96.$$arity = 4);
      
      Opal.def(self, '$binary_op', $Default_binary_op$97 = function $$binary_op(receiver, operator_t, arg) {
        var self = this, source_map = nil, operator = nil, method_call = nil;

        
        source_map = self.$send_binary_op_map(receiver, operator_t, arg);
        if (self.parser.$version()['$=='](18)) {
          
          operator = self.$value(operator_t);
          if (operator['$==']("!=")) {
            method_call = self.$n("send", [receiver, "==", arg], source_map)
          } else if (operator['$==']("!~")) {
            method_call = self.$n("send", [receiver, "=~", arg], source_map)};
          if ($truthy(["!=", "!~"]['$include?'](operator))) {
            return self.$n("not", [method_call], self.$expr_map(source_map.$expression()))};};
        return self.$n("send", [receiver, self.$value(operator_t).$to_sym(), arg], source_map);
      }, $Default_binary_op$97.$$arity = 3);
      
      Opal.def(self, '$match_op', $Default_match_op$98 = function $$match_op(receiver, match_t, arg) {
        var $$99, self = this, source_map = nil, regexp = nil;

        
        source_map = self.$send_binary_op_map(receiver, match_t, arg);
        if ($truthy((regexp = self.$static_regexp_node(receiver)))) {
          
          $send(regexp.$names(), 'each', [], ($$99 = function(name){var self = $$99.$$s == null ? this : $$99.$$s;
            if (self.parser == null) self.parser = nil;

          
            
            if (name == null) {
              name = nil;
            };
            return self.parser.$static_env().$declare(name);}, $$99.$$s = self, $$99.$$arity = 1, $$99));
          return self.$n("match_with_lvasgn", [receiver, arg], source_map);
        } else {
          return self.$n("send", [receiver, "=~", arg], source_map)
        };
      }, $Default_match_op$98.$$arity = 3);
      
      Opal.def(self, '$unary_op', $Default_unary_op$100 = function $$unary_op(op_t, receiver) {
        var self = this, $case = nil, method = nil;

        
        $case = self.$value(op_t);
        if ("+"['$===']($case) || "-"['$===']($case)) {method = $rb_plus(self.$value(op_t), "@")}
        else {method = self.$value(op_t)};
        return self.$n("send", [receiver, method.$to_sym()], self.$send_unary_op_map(op_t, receiver));
      }, $Default_unary_op$100.$$arity = 2);
      
      Opal.def(self, '$not_op', $Default_not_op$101 = function $$not_op(not_t, begin_t, receiver, end_t) {
        var self = this, nil_node = nil;

        
        
        if (begin_t == null) {
          begin_t = nil;
        };
        
        if (receiver == null) {
          receiver = nil;
        };
        
        if (end_t == null) {
          end_t = nil;
        };
        if (self.parser.$version()['$=='](18)) {
          return self.$n("not", [self.$check_condition(receiver)], self.$unary_op_map(not_t, receiver))
        } else if ($truthy(receiver['$nil?']())) {
          
          nil_node = self.$n0("begin", self.$collection_map(begin_t, nil, end_t));
          return self.$n("send", [nil_node, "!"], self.$send_unary_op_map(not_t, nil_node));
        } else {
          return self.$n("send", [self.$check_condition(receiver), "!"], self.$send_map(nil, nil, not_t, begin_t, [receiver], end_t))
        };
      }, $Default_not_op$101.$$arity = -2);
      
      Opal.def(self, '$logical_op', $Default_logical_op$102 = function $$logical_op(type, lhs, op_t, rhs) {
        var self = this;

        return self.$n(type, [lhs, rhs], self.$binary_op_map(lhs, op_t, rhs))
      }, $Default_logical_op$102.$$arity = 4);
      
      Opal.def(self, '$condition', $Default_condition$103 = function $$condition(cond_t, cond, then_t, if_true, else_t, if_false, end_t) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$condition_map(cond_t, cond, then_t, if_true, else_t, if_false, end_t))
      }, $Default_condition$103.$$arity = 7);
      
      Opal.def(self, '$condition_mod', $Default_condition_mod$104 = function $$condition_mod(if_true, if_false, cond_t, cond) {
        var self = this, $ret_or_7 = nil;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$keyword_mod_map((function() {if ($truthy(($ret_or_7 = if_true))) {
          return $ret_or_7
        } else {
          return if_false
        }; return nil; })(), cond_t, cond))
      }, $Default_condition_mod$104.$$arity = 4);
      
      Opal.def(self, '$ternary', $Default_ternary$105 = function $$ternary(cond, question_t, if_true, colon_t, if_false) {
        var self = this;

        return self.$n("if", [self.$check_condition(cond), if_true, if_false], self.$ternary_map(cond, question_t, if_true, colon_t, if_false))
      }, $Default_ternary$105.$$arity = 5);
      
      Opal.def(self, '$when', $Default_when$106 = function $$when(when_t, patterns, then_t, body) {
        var self = this, children = nil;

        
        children = patterns['$<<'](body);
        return self.$n("when", children, self.$keyword_map(when_t, then_t, children, nil));
      }, $Default_when$106.$$arity = 4);
      
      Opal.def(self, '$case', $Default_case$107 = function(case_t, expr, when_bodies, else_t, else_body, end_t) {
        var self = this;

        return self.$n("case", [expr].concat(Opal.to_a(when_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t))
      }, $Default_case$107.$$arity = 6);
      
      Opal.def(self, '$loop', $Default_loop$108 = function $$loop(type, keyword_t, cond, do_t, body, end_t) {
        var self = this;

        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_map(keyword_t, do_t, nil, end_t))
      }, $Default_loop$108.$$arity = 6);
      
      Opal.def(self, '$loop_mod', $Default_loop_mod$109 = function $$loop_mod(type, body, keyword_t, cond) {
        var self = this;

        
        if (body.$type()['$==']("kwbegin")) {
          type = "" + (type) + "_post"};
        return self.$n(type, [self.$check_condition(cond), body], self.$keyword_mod_map(body, keyword_t, cond));
      }, $Default_loop_mod$109.$$arity = 4);
      
      Opal.def(self, '$for', $Default_for$110 = function(for_t, iterator, in_t, iteratee, do_t, body, end_t) {
        var self = this;

        return self.$n("for", [iterator, iteratee, body], self.$for_map(for_t, in_t, do_t, end_t))
      }, $Default_for$110.$$arity = 7);
      
      Opal.def(self, '$keyword_cmd', $Default_keyword_cmd$111 = function $$keyword_cmd(type, keyword_t, lparen_t, args, rparen_t) {
        var self = this, $ret_or_8 = nil, last_arg = nil, $ret_or_9 = nil;

        
        
        if (lparen_t == null) {
          lparen_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (rparen_t == null) {
          rparen_t = nil;
        };
        if ($truthy((function() {if ($truthy(($ret_or_8 = type['$==']("yield")))) {
          return $rb_gt(args.$count(), 0)
        } else {
          return $ret_or_8
        }; return nil; })())) {
          
          last_arg = args.$last();
          if (last_arg.$type()['$==']("block_pass")) {
            self.$diagnostic("error", "block_given_to_yield", nil, self.$loc(keyword_t), [last_arg.$loc().$expression()])};};
        if ($truthy((function() {if ($truthy(($ret_or_9 = ["yield", "super"]['$include?'](type)))) {
          return self.$class().$emit_kwargs()
        } else {
          return $ret_or_9
        }; return nil; })())) {
          self.$rewrite_hash_args_to_kwargs(args)};
        return self.$n(type, args, self.$keyword_map(keyword_t, lparen_t, args, rparen_t));
      }, $Default_keyword_cmd$111.$$arity = -3);
      
      Opal.def(self, '$preexe', $Default_preexe$112 = function $$preexe(preexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("preexe", [compstmt], self.$keyword_map(preexe_t, lbrace_t, [], rbrace_t))
      }, $Default_preexe$112.$$arity = 4);
      
      Opal.def(self, '$postexe', $Default_postexe$113 = function $$postexe(postexe_t, lbrace_t, compstmt, rbrace_t) {
        var self = this;

        return self.$n("postexe", [compstmt], self.$keyword_map(postexe_t, lbrace_t, [], rbrace_t))
      }, $Default_postexe$113.$$arity = 4);
      
      Opal.def(self, '$rescue_body', $Default_rescue_body$114 = function $$rescue_body(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt) {
        var self = this;

        return self.$n("resbody", [exc_list, exc_var, compound_stmt], self.$rescue_body_map(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt))
      }, $Default_rescue_body$114.$$arity = 6);
      
      Opal.def(self, '$begin_body', $Default_begin_body$115 = function $$begin_body(compound_stmt, rescue_bodies, else_t, else_, ensure_t, ensure_) {
        var self = this, statements = nil;

        
        
        if (rescue_bodies == null) {
          rescue_bodies = [];
        };
        
        if (else_t == null) {
          else_t = nil;
        };
        
        if (else_ == null) {
          else_ = nil;
        };
        
        if (ensure_t == null) {
          ensure_t = nil;
        };
        
        if (ensure_ == null) {
          ensure_ = nil;
        };
        if ($truthy(rescue_bodies['$any?']())) {
          if ($truthy(else_t)) {
            compound_stmt = self.$n("rescue", [compound_stmt].concat(Opal.to_a($rb_plus(rescue_bodies, [else_]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, else_t, else_))
          } else {
            compound_stmt = self.$n("rescue", [compound_stmt].concat(Opal.to_a($rb_plus(rescue_bodies, [nil]))), self.$eh_keyword_map(compound_stmt, nil, rescue_bodies, nil, nil))
          }
        } else if ($truthy(else_t)) {
          
          statements = [];
          if ($truthy(compound_stmt['$nil?']()['$!']())) {
            if (compound_stmt.$type()['$==']("begin")) {
              statements = $rb_plus(statements, compound_stmt.$children())
            } else {
              statements.$push(compound_stmt)
            }};
          statements.$push(self.$n("begin", [else_], self.$collection_map(else_t, [else_], nil)));
          compound_stmt = self.$n("begin", statements, self.$collection_map(nil, statements, nil));};
        if ($truthy(ensure_t)) {
          compound_stmt = self.$n("ensure", [compound_stmt, ensure_], self.$eh_keyword_map(compound_stmt, ensure_t, [ensure_], nil, nil))};
        return compound_stmt;
      }, $Default_begin_body$115.$$arity = -2);
      
      Opal.def(self, '$compstmt', $Default_compstmt$116 = function $$compstmt(statements) {
        var self = this;

        return (function() {
        if ($truthy(statements['$none?']())) {return nil}
        else if ($truthy(statements['$one?']())) {return statements.$first()}
        else {return self.$n("begin", statements, self.$collection_map(nil, statements, nil))}})()
      }, $Default_compstmt$116.$$arity = 1);
      
      Opal.def(self, '$begin', $Default_begin$117 = function $$begin(begin_t, body, end_t) {
        var self = this, $ret_or_10 = nil, $ret_or_11 = nil, $ret_or_12 = nil;

        if ($truthy(body['$nil?']())) {
          return self.$n0("begin", self.$collection_map(begin_t, nil, end_t))
        } else if ($truthy((function() {if ($truthy(($ret_or_10 = body.$type()['$==']("mlhs")))) {
          return $ret_or_10
        } else {
          
          if ($truthy(($ret_or_11 = (function() {if ($truthy(($ret_or_12 = body.$type()['$==']("begin")))) {
            return body.$loc().$begin()['$nil?']()
          } else {
            return $ret_or_12
          }; return nil; })()))) {
            return body.$loc().$end()['$nil?']()
          } else {
            return $ret_or_11
          };
        }; return nil; })())) {
          return self.$n(body.$type(), body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("begin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, $Default_begin$117.$$arity = 3);
      
      Opal.def(self, '$begin_keyword', $Default_begin_keyword$118 = function $$begin_keyword(begin_t, body, end_t) {
        var self = this, $ret_or_13 = nil, $ret_or_14 = nil;

        if ($truthy(body['$nil?']())) {
          return self.$n0("kwbegin", self.$collection_map(begin_t, nil, end_t))
        } else if ($truthy((function() {if ($truthy(($ret_or_13 = (function() {if ($truthy(($ret_or_14 = body.$type()['$==']("begin")))) {
          return body.$loc().$begin()['$nil?']()
        } else {
          return $ret_or_14
        }; return nil; })()))) {
          return body.$loc().$end()['$nil?']()
        } else {
          return $ret_or_13
        }; return nil; })())) {
          return self.$n("kwbegin", body.$children(), self.$collection_map(begin_t, body.$children(), end_t))
        } else {
          return self.$n("kwbegin", [body], self.$collection_map(begin_t, [body], end_t))
        }
      }, $Default_begin_keyword$118.$$arity = 3);
      
      Opal.def(self, '$case_match', $Default_case_match$119 = function $$case_match(case_t, expr, in_bodies, else_t, else_body, end_t) {
        var self = this, $ret_or_15 = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_15 = else_t))) {
          return else_body['$!']()
        } else {
          return $ret_or_15
        }; return nil; })())) {
          else_body = self.$n("empty_else", nil, self.$token_map(else_t))};
        return self.$n("case_match", [expr].concat(Opal.to_a(in_bodies['$<<'](else_body))), self.$condition_map(case_t, expr, nil, nil, else_t, else_body, end_t));
      }, $Default_case_match$119.$$arity = 6);
      
      Opal.def(self, '$in_match', $Default_in_match$120 = function $$in_match(lhs, in_t, rhs) {
        var self = this;

        return self.$n("in_match", [lhs, rhs], self.$binary_op_map(lhs, in_t, rhs))
      }, $Default_in_match$120.$$arity = 3);
      
      Opal.def(self, '$match_pattern', $Default_match_pattern$121 = function $$match_pattern(lhs, match_t, rhs) {
        var self = this;

        return self.$n("match_pattern", [lhs, rhs], self.$binary_op_map(lhs, match_t, rhs))
      }, $Default_match_pattern$121.$$arity = 3);
      
      Opal.def(self, '$match_pattern_p', $Default_match_pattern_p$122 = function $$match_pattern_p(lhs, match_t, rhs) {
        var self = this;

        return self.$n("match_pattern_p", [lhs, rhs], self.$binary_op_map(lhs, match_t, rhs))
      }, $Default_match_pattern_p$122.$$arity = 3);
      
      Opal.def(self, '$in_pattern', $Default_in_pattern$123 = function $$in_pattern(in_t, pattern, guard, then_t, body) {
        var self = this, children = nil;

        
        children = [pattern, guard, body];
        return self.$n("in_pattern", children, self.$keyword_map(in_t, then_t, children.$compact(), nil));
      }, $Default_in_pattern$123.$$arity = 5);
      
      Opal.def(self, '$if_guard', $Default_if_guard$124 = function $$if_guard(if_t, if_body) {
        var self = this;

        return self.$n("if_guard", [if_body], self.$guard_map(if_t, if_body))
      }, $Default_if_guard$124.$$arity = 2);
      
      Opal.def(self, '$unless_guard', $Default_unless_guard$125 = function $$unless_guard(unless_t, unless_body) {
        var self = this;

        return self.$n("unless_guard", [unless_body], self.$guard_map(unless_t, unless_body))
      }, $Default_unless_guard$125.$$arity = 2);
      
      Opal.def(self, '$match_var', $Default_match_var$126 = function $$match_var(name_t) {
        var self = this, name = nil, name_l = nil;

        
        name = self.$value(name_t).$to_sym();
        name_l = self.$loc(name_t);
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        return self.$n("match_var", [name], self.$variable_map(name_t));
      }, $Default_match_var$126.$$arity = 1);
      
      Opal.def(self, '$match_hash_var', $Default_match_hash_var$127 = function $$match_hash_var(name_t) {
        var self = this, name = nil, expr_l = nil, name_l = nil;

        
        name = self.$value(name_t).$to_sym();
        expr_l = self.$loc(name_t);
        name_l = expr_l.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        return self.$n("match_var", [name], $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_l, expr_l));
      }, $Default_match_hash_var$127.$$arity = 1);
      
      Opal.def(self, '$match_hash_var_from_str', $Default_match_hash_var_from_str$128 = function $$match_hash_var_from_str(begin_t, strings, end_t) {
        var $a, self = this, string = nil, $case = nil, name = nil, name_l = nil, begin_l = nil, end_l = nil, expr_l = nil;

        
        if ($truthy($rb_gt(strings.$length(), 1))) {
          self.$diagnostic("error", "pm_interp_in_var_name", nil, self.$loc(begin_t).$join(self.$loc(end_t)))};
        string = strings['$[]'](0);
        return (function() {$case = string.$type();
        if ("str"['$===']($case)) {
        $a = [].concat(Opal.to_a(string)), (name = ($a[0] == null ? nil : $a[0])), $a;
        name_l = string.$loc().$expression();
        self.$check_lvar_name(name, name_l);
        self.$check_duplicate_pattern_variable(name, name_l);
        self.parser.$static_env().$declare(name);
        if ($truthy((begin_l = string.$loc().$begin()))) {
          name_l = name_l.$adjust($hash2(["begin_pos"], {"begin_pos": begin_l.$length()}))};
        if ($truthy((end_l = string.$loc().$end()))) {
          name_l = name_l.$adjust($hash2(["end_pos"], {"end_pos": end_l.$length()['$-@']()}))};
        expr_l = self.$loc(begin_t).$join(string.$loc().$expression()).$join(self.$loc(end_t));
        return self.$n("match_var", [name.$to_sym()], $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_l, expr_l));}
        else if ("begin"['$===']($case)) {return self.$match_hash_var_from_str(begin_t, string.$children(), end_t)}
        else {return self.$diagnostic("error", "pm_interp_in_var_name", nil, self.$loc(begin_t).$join(self.$loc(end_t)))}})();
      }, $Default_match_hash_var_from_str$128.$$arity = 3);
      
      Opal.def(self, '$match_rest', $Default_match_rest$129 = function $$match_rest(star_t, name_t) {
        var self = this, name = nil;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t['$nil?']())) {
          return self.$n0("match_rest", self.$unary_op_map(star_t))
        } else {
          
          name = self.$match_var(name_t);
          return self.$n("match_rest", [name], self.$unary_op_map(star_t, name));
        };
      }, $Default_match_rest$129.$$arity = -2);
      
      Opal.def(self, '$hash_pattern', $Default_hash_pattern$130 = function $$hash_pattern(lbrace_t, kwargs, rbrace_t) {
        var self = this, args = nil;

        
        args = self.$check_duplicate_args(kwargs);
        return self.$n("hash_pattern", args, self.$collection_map(lbrace_t, args, rbrace_t));
      }, $Default_hash_pattern$130.$$arity = 3);
      
      Opal.def(self, '$array_pattern', $Default_array_pattern$131 = function $$array_pattern(lbrack_t, elements, rbrack_t) {
        var $$132, self = this, trailing_comma = nil, node_elements = nil, node_type = nil;

        
        if ($truthy(elements['$nil?']())) {
          return self.$n("array_pattern", nil, self.$collection_map(lbrack_t, [], rbrack_t))};
        trailing_comma = false;
        node_elements = $send(elements, 'map', [], ($$132 = function(element){var self = $$132.$$s == null ? this : $$132.$$s;

        
          
          if (element == null) {
            element = nil;
          };
          if (element.$type()['$==']("match_with_trailing_comma")) {
            
            trailing_comma = true;
            return element.$children().$first();
          } else {
            
            trailing_comma = false;
            return element;
          };}, $$132.$$s = self, $$132.$$arity = 1, $$132));
        node_type = (function() {if ($truthy(trailing_comma)) {
          return "array_pattern_with_tail"
        } else {
          return "array_pattern"
        }; return nil; })();
        return self.$n(node_type, node_elements, self.$collection_map(lbrack_t, elements, rbrack_t));
      }, $Default_array_pattern$131.$$arity = 3);
      
      Opal.def(self, '$find_pattern', $Default_find_pattern$133 = function $$find_pattern(lbrack_t, elements, rbrack_t) {
        var self = this;

        return self.$n("find_pattern", elements, self.$collection_map(lbrack_t, elements, rbrack_t))
      }, $Default_find_pattern$133.$$arity = 3);
      
      Opal.def(self, '$match_with_trailing_comma', $Default_match_with_trailing_comma$134 = function $$match_with_trailing_comma(match, comma_t) {
        var self = this;

        return self.$n("match_with_trailing_comma", [match], self.$expr_map(match.$loc().$expression().$join(self.$loc(comma_t))))
      }, $Default_match_with_trailing_comma$134.$$arity = 2);
      
      Opal.def(self, '$const_pattern', $Default_const_pattern$135 = function $$const_pattern(const$, ldelim_t, pattern, rdelim_t) {
        var self = this;

        return self.$n("const_pattern", [const$, pattern], $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(ldelim_t), self.$loc(rdelim_t), const$.$loc().$expression().$join(self.$loc(rdelim_t))))
      }, $Default_const_pattern$135.$$arity = 4);
      
      Opal.def(self, '$pin', $Default_pin$136 = function $$pin(pin_t, var$) {
        var self = this;

        return self.$n("pin", [var$], self.$send_unary_op_map(pin_t, var$))
      }, $Default_pin$136.$$arity = 2);
      
      Opal.def(self, '$match_alt', $Default_match_alt$137 = function $$match_alt(left, pipe_t, right) {
        var self = this, source_map = nil;

        
        source_map = self.$binary_op_map(left, pipe_t, right);
        return self.$n("match_alt", [left, right], source_map);
      }, $Default_match_alt$137.$$arity = 3);
      
      Opal.def(self, '$match_as', $Default_match_as$138 = function $$match_as(value, assoc_t, as) {
        var self = this, source_map = nil;

        
        source_map = self.$binary_op_map(value, assoc_t, as);
        return self.$n("match_as", [value, as], source_map);
      }, $Default_match_as$138.$$arity = 3);
      
      Opal.def(self, '$match_nil_pattern', $Default_match_nil_pattern$139 = function $$match_nil_pattern(dstar_t, nil_t) {
        var self = this;

        return self.$n0("match_nil_pattern", self.$arg_prefix_map(dstar_t, nil_t))
      }, $Default_match_nil_pattern$139.$$arity = 2);
      
      Opal.def(self, '$match_pair', $Default_match_pair$140 = function $$match_pair(label_type, label, value) {
        var $a, $b, self = this, begin_t = nil, parts = nil, end_t = nil, label_loc = nil, var_name = nil;

        if (label_type['$==']("label")) {
          
          self.$check_duplicate_pattern_key(label['$[]'](0), label['$[]'](1));
          return self.$pair_keyword(label, value);
        } else {
          
          $b = label, $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (parts = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
          label_loc = self.$loc(begin_t).$join(self.$loc(end_t));
          if ($truthy((var_name = self.$static_string(parts)))) {
            self.$check_duplicate_pattern_key(var_name, label_loc)
          } else {
            self.$diagnostic("error", "pm_interp_in_var_name", nil, label_loc)
          };
          return self.$pair_quoted(begin_t, parts, end_t, value);
        }
      }, $Default_match_pair$140.$$arity = 3);
      
      Opal.def(self, '$match_label', $Default_match_label$141 = function $$match_label(label_type, label) {
        var $a, $b, self = this, begin_t = nil, strings = nil, end_t = nil;

        if (label_type['$==']("label")) {
          return self.$match_hash_var(label)
        } else {
          
          $b = label, $a = Opal.to_ary($b), (begin_t = ($a[0] == null ? nil : $a[0])), (strings = ($a[1] == null ? nil : $a[1])), (end_t = ($a[2] == null ? nil : $a[2])), $b;
          return self.$match_hash_var_from_str(begin_t, strings, end_t);
        }
      }, $Default_match_label$141.$$arity = 2);
      self.$private();
      
      Opal.def(self, '$check_condition', $Default_check_condition$142 = function $$check_condition(cond) {
        var $a, self = this, $case = nil, lhs = nil, rhs = nil, type = nil, $ret_or_16 = nil;

        return (function() {$case = cond.$type();
        if ("masgn"['$===']($case)) {if ($truthy($rb_le(self.parser.$version(), 23))) {
          return self.$diagnostic("error", "masgn_as_condition", nil, cond.$loc().$expression())
        } else {
          return cond
        }}
        else if ("begin"['$===']($case)) {if (cond.$children().$count()['$=='](1)) {
          return cond.$updated(nil, [self.$check_condition(cond.$children().$last())])
        } else {
          return cond
        }}
        else if ("and"['$===']($case) || "or"['$===']($case) || "irange"['$===']($case) || "erange"['$===']($case)) {
        $a = [].concat(Opal.to_a(cond)), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
        type = (function() {$case = cond.$type();
        if ("irange"['$===']($case)) {return "iflipflop"}
        else if ("erange"['$===']($case)) {return "eflipflop"}
        else { return nil }})();
        if ($truthy((function() {if ($truthy(($ret_or_16 = ["and", "or"]['$include?'](cond.$type())))) {
          return self.parser.$version()['$=='](18)
        } else {
          return $ret_or_16
        }; return nil; })())) {
          return cond
        } else {
          return cond.$updated(type, [self.$check_condition(lhs), self.$check_condition(rhs)])
        };}
        else if ("regexp"['$===']($case)) {return self.$n("match_current_line", [cond], self.$expr_map(cond.$loc().$expression()))}
        else {return cond}})()
      }, $Default_check_condition$142.$$arity = 1);
      
      Opal.def(self, '$check_duplicate_args', $Default_check_duplicate_args$143 = function $$check_duplicate_args(args, map) {
        var $$144, self = this;

        
        
        if (map == null) {
          map = $hash2([], {});
        };
        return $send(args, 'each', [], ($$144 = function(this_arg){var self = $$144.$$s == null ? this : $$144.$$s, $case = nil;

        
          
          if (this_arg == null) {
            this_arg = nil;
          };
          return (function() {$case = this_arg.$type();
          if ("arg"['$===']($case) || "optarg"['$===']($case) || "restarg"['$===']($case) || "blockarg"['$===']($case) || "kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case) || "shadowarg"['$===']($case)) {return self.$check_duplicate_arg(this_arg, map)}
          else if ("procarg0"['$===']($case)) {if ($truthy(this_arg.$children()['$[]'](0)['$is_a?']($$($nesting, 'Symbol')))) {
            return self.$check_duplicate_arg(this_arg, map)
          } else {
            return self.$check_duplicate_args(this_arg.$children(), map)
          }}
          else if ("mlhs"['$===']($case)) {return self.$check_duplicate_args(this_arg.$children(), map)}
          else { return nil }})();}, $$144.$$s = self, $$144.$$arity = 1, $$144));
      }, $Default_check_duplicate_args$143.$$arity = -2);
      
      Opal.def(self, '$check_duplicate_arg', $Default_check_duplicate_arg$145 = function $$check_duplicate_arg(this_arg, map) {
        var $a, self = this, this_name = nil, that_arg = nil, that_name = nil, $writer = nil;

        
        
        if (map == null) {
          map = $hash2([], {});
        };
        $a = [].concat(Opal.to_a(this_arg)), (this_name = ($a[0] == null ? nil : $a[0])), $a;
        that_arg = map['$[]'](this_name);
        $a = [].concat(Opal.to_a(that_arg)), (that_name = ($a[0] == null ? nil : $a[0])), $a;
        if ($truthy(that_arg['$nil?']())) {
          
          $writer = [this_name, this_arg];
          $send(map, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(self['$arg_name_collides?'](this_name, that_name))) {
          return self.$diagnostic("error", "duplicate_argument", nil, this_arg.$loc().$name(), [that_arg.$loc().$name()])
        } else {
          return nil
        };
      }, $Default_check_duplicate_arg$145.$$arity = -2);
      
      Opal.def(self, '$check_assignment_to_numparam', $Default_check_assignment_to_numparam$146 = function $$check_assignment_to_numparam(name, loc) {
        var self = this, assigning_to_numparam = nil, $ret_or_17 = nil, $ret_or_18 = nil;

        
        if ($truthy($rb_lt(self.parser.$version(), 27))) {
          return nil};
        assigning_to_numparam = (function() {if ($truthy(($ret_or_17 = (function() {if ($truthy(($ret_or_18 = self.parser.$context()['$in_dynamic_block?']()))) {
          return name['$=~'](/^_([1-9])$/)
        } else {
          return $ret_or_18
        }; return nil; })()))) {
          return self.parser.$max_numparam_stack()['$has_numparams?']()
        } else {
          return $ret_or_17
        }; return nil; })();
        if ($truthy(assigning_to_numparam)) {
          return self.$diagnostic("error", "cant_assign_to_numparam", $hash2(["name"], {"name": name}), loc)
        } else {
          return nil
        };
      }, $Default_check_assignment_to_numparam$146.$$arity = 2);
      
      Opal.def(self, '$check_reserved_for_numparam', $Default_check_reserved_for_numparam$147 = function $$check_reserved_for_numparam(name, loc) {
        var self = this;

        
        if ($truthy($rb_lt(self.parser.$version(), 30))) {
          return nil};
        if ($truthy(name['$=~'](/^_([1-9])$/))) {
          return self.$diagnostic("error", "reserved_for_numparam", $hash2(["name"], {"name": name}), loc)
        } else {
          return nil
        };
      }, $Default_check_reserved_for_numparam$147.$$arity = 2);
      
      Opal.def(self, '$arg_name_collides?', $Default_arg_name_collides$ques$148 = function(this_name, that_name) {
        var self = this, $case = nil, $ret_or_19 = nil, $ret_or_20 = nil, $ret_or_21 = nil;

        return (function() {$case = self.parser.$version();
        if ((18)['$===']($case)) {return this_name['$=='](that_name)}
        else if ((19)['$===']($case)) {if ($truthy(($ret_or_19 = this_name['$!=']("_")))) {
          return this_name['$=='](that_name)
        } else {
          return $ret_or_19
        }}
        else {if ($truthy(($ret_or_20 = (function() {if ($truthy(($ret_or_21 = this_name))) {
          return this_name['$[]'](0)['$!=']("_")
        } else {
          return $ret_or_21
        }; return nil; })()))) {
          return this_name['$=='](that_name)
        } else {
          return $ret_or_20
        }}})()
      }, $Default_arg_name_collides$ques$148.$$arity = 2);
      
      Opal.def(self, '$check_lvar_name', $Default_check_lvar_name$149 = function $$check_lvar_name(name, loc) {
        var self = this;

        if ($truthy(name['$=~'](/^[[[:lower:]]|_][[[:alnum:]]_]*$/))) {
          return nil
        } else {
          return self.$diagnostic("error", "lvar_name", $hash2(["name"], {"name": name}), loc)
        }
      }, $Default_check_lvar_name$149.$$arity = 2);
      
      Opal.def(self, '$check_duplicate_pattern_variable', $Default_check_duplicate_pattern_variable$150 = function $$check_duplicate_pattern_variable(name, loc) {
        var self = this;

        
        if ($truthy(name.$to_s()['$start_with?']("_"))) {
          return nil};
        if ($truthy(self.parser.$pattern_variables()['$declared?'](name))) {
          self.$diagnostic("error", "duplicate_variable_name", $hash2(["name"], {"name": name.$to_s()}), loc)};
        return self.parser.$pattern_variables().$declare(name);
      }, $Default_check_duplicate_pattern_variable$150.$$arity = 2);
      
      Opal.def(self, '$check_duplicate_pattern_key', $Default_check_duplicate_pattern_key$151 = function $$check_duplicate_pattern_key(name, loc) {
        var self = this;

        
        if ($truthy(self.parser.$pattern_hash_keys()['$declared?'](name))) {
          self.$diagnostic("error", "duplicate_pattern_key", $hash2(["name"], {"name": name.$to_s()}), loc)};
        return self.parser.$pattern_hash_keys().$declare(name);
      }, $Default_check_duplicate_pattern_key$151.$$arity = 2);
      
      Opal.def(self, '$n', $Default_n$152 = function $$n(type, children, source_map) {
        var self = this;

        return $$$($$($nesting, 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": source_map}))
      }, $Default_n$152.$$arity = 3);
      
      Opal.def(self, '$n0', $Default_n0$153 = function $$n0(type, source_map) {
        var self = this;

        return self.$n(type, [], source_map)
      }, $Default_n0$153.$$arity = 2);
      
      Opal.def(self, '$join_exprs', $Default_join_exprs$154 = function $$join_exprs(left_expr, right_expr) {
        var self = this;

        return left_expr.$loc().$expression().$join(right_expr.$loc().$expression())
      }, $Default_join_exprs$154.$$arity = 2);
      
      Opal.def(self, '$token_map', $Default_token_map$155 = function $$token_map(token) {
        var self = this;

        return $$$($$($nesting, 'Source'), 'Map').$new(self.$loc(token))
      }, $Default_token_map$155.$$arity = 1);
      
      Opal.def(self, '$delimited_string_map', $Default_delimited_string_map$156 = function $$delimited_string_map(string_t) {
        var self = this, str_range = nil, begin_l = nil, end_l = nil;

        
        str_range = self.$loc(string_t);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        end_l = str_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(str_range.$end_pos(), 1)}));
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(begin_l, end_l, self.$loc(string_t));
      }, $Default_delimited_string_map$156.$$arity = 1);
      
      Opal.def(self, '$prefix_string_map', $Default_prefix_string_map$157 = function $$prefix_string_map(symbol) {
        var self = this, str_range = nil, begin_l = nil;

        
        str_range = self.$loc(symbol);
        begin_l = str_range.$with($hash2(["end_pos"], {"end_pos": $rb_plus(str_range.$begin_pos(), 1)}));
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(begin_l, nil, self.$loc(symbol));
      }, $Default_prefix_string_map$157.$$arity = 1);
      
      Opal.def(self, '$unquoted_map', $Default_unquoted_map$158 = function $$unquoted_map(token) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, self.$loc(token))
      }, $Default_unquoted_map$158.$$arity = 1);
      
      Opal.def(self, '$pair_keyword_map', $Default_pair_keyword_map$159 = function $$pair_keyword_map(key_t, value_e) {
        var self = this, key_range = nil, key_l = nil, colon_l = nil;

        
        key_range = self.$loc(key_t);
        key_l = key_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        colon_l = key_range.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(key_range.$end_pos(), 1)}));
        return [$$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(nil, nil, key_l), $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(colon_l, key_range.$join(value_e.$loc().$expression()))];
      }, $Default_pair_keyword_map$159.$$arity = 2);
      
      Opal.def(self, '$pair_quoted_map', $Default_pair_quoted_map$160 = function $$pair_quoted_map(begin_t, end_t, value_e) {
        var self = this, end_l = nil, quote_l = nil, colon_l = nil;

        
        end_l = self.$loc(end_t);
        quote_l = end_l.$with($hash2(["begin_pos", "end_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 2), "end_pos": $rb_minus(end_l.$end_pos(), 1)}));
        colon_l = end_l.$with($hash2(["begin_pos"], {"begin_pos": $rb_minus(end_l.$end_pos(), 1)}));
        return [[self.$value(end_t), quote_l], $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(colon_l, self.$loc(begin_t).$join(value_e.$loc().$expression()))];
      }, $Default_pair_quoted_map$160.$$arity = 3);
      
      Opal.def(self, '$expr_map', $Default_expr_map$161 = function $$expr_map(loc) {
        var self = this;

        return $$$($$($nesting, 'Source'), 'Map').$new(loc)
      }, $Default_expr_map$161.$$arity = 1);
      
      Opal.def(self, '$collection_map', $Default_collection_map$162 = function $$collection_map(begin_t, parts, end_t) {
        var self = this, $ret_or_22 = nil, expr_l = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_22 = begin_t['$nil?']()))) {
          return $ret_or_22
        } else {
          return end_t['$nil?']()
        }; return nil; })())) {
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else if ($truthy(begin_t['$nil?']()['$!']())) {
            expr_l = self.$loc(begin_t)
          } else if ($truthy(end_t['$nil?']()['$!']())) {
            expr_l = self.$loc(end_t)}
        } else {
          expr_l = self.$loc(begin_t).$join(self.$loc(end_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), expr_l);
      }, $Default_collection_map$162.$$arity = 3);
      
      Opal.def(self, '$string_map', $Default_string_map$163 = function $$string_map(begin_t, parts, end_t) {
        var self = this, $ret_or_23 = nil, expr_l = nil;

        if ($truthy((function() {if ($truthy(($ret_or_23 = begin_t))) {
          return self.$value(begin_t)['$start_with?']("<<")
        } else {
          return $ret_or_23
        }; return nil; })())) {
          
          if ($truthy(parts['$any?']())) {
            expr_l = self.$join_exprs(parts.$first(), parts.$last())
          } else {
            expr_l = self.$loc(end_t).$begin()
          };
          return $$$($$$($$($nesting, 'Source'), 'Map'), 'Heredoc').$new(self.$loc(begin_t), expr_l, self.$loc(end_t));
        } else {
          return self.$collection_map(begin_t, parts, end_t)
        }
      }, $Default_string_map$163.$$arity = 3);
      
      Opal.def(self, '$regexp_map', $Default_regexp_map$164 = function $$regexp_map(begin_t, end_t, options_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), self.$loc(begin_t).$join(options_e.$loc().$expression()))
      }, $Default_regexp_map$164.$$arity = 3);
      
      Opal.def(self, '$constant_map', $Default_constant_map$165 = function $$constant_map(scope, colon2_t, name_t) {
        var self = this, expr_l = nil;

        
        if ($truthy(scope['$nil?']())) {
          expr_l = self.$loc(name_t)
        } else {
          expr_l = scope.$loc().$expression().$join(self.$loc(name_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Constant').$new(self.$loc(colon2_t), self.$loc(name_t), expr_l);
      }, $Default_constant_map$165.$$arity = 3);
      
      Opal.def(self, '$variable_map', $Default_variable_map$166 = function $$variable_map(name_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(self.$loc(name_t))
      }, $Default_variable_map$166.$$arity = 1);
      
      Opal.def(self, '$binary_op_map', $Default_binary_op_map$167 = function $$binary_op_map(left_e, op_t, right_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), self.$join_exprs(left_e, right_e))
      }, $Default_binary_op_map$167.$$arity = 3);
      
      Opal.def(self, '$unary_op_map', $Default_unary_op_map$168 = function $$unary_op_map(op_t, arg_e) {
        var self = this, expr_l = nil;

        
        
        if (arg_e == null) {
          arg_e = nil;
        };
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, $Default_unary_op_map$168.$$arity = -2);
      
      Opal.def(self, '$range_map', $Default_range_map$169 = function $$range_map(start_e, op_t, end_e) {
        var self = this, $ret_or_24 = nil, expr_l = nil;

        
        if ($truthy((function() {if ($truthy(($ret_or_24 = start_e))) {
          return end_e
        } else {
          return $ret_or_24
        }; return nil; })())) {
          expr_l = self.$join_exprs(start_e, end_e)
        } else if ($truthy(start_e)) {
          expr_l = start_e.$loc().$expression().$join(self.$loc(op_t))
        } else if ($truthy(end_e)) {
          expr_l = self.$loc(op_t).$join(end_e.$loc().$expression())};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Operator').$new(self.$loc(op_t), expr_l);
      }, $Default_range_map$169.$$arity = 3);
      
      Opal.def(self, '$arg_prefix_map', $Default_arg_prefix_map$170 = function $$arg_prefix_map(op_t, name_t) {
        var self = this, expr_l = nil;

        
        
        if (name_t == null) {
          name_t = nil;
        };
        if ($truthy(name_t['$nil?']())) {
          expr_l = self.$loc(op_t)
        } else {
          expr_l = self.$loc(op_t).$join(self.$loc(name_t))
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(self.$loc(name_t), expr_l);
      }, $Default_arg_prefix_map$170.$$arity = -2);
      
      Opal.def(self, '$kwarg_map', $Default_kwarg_map$171 = function $$kwarg_map(name_t, value_e) {
        var self = this, label_range = nil, name_range = nil, expr_l = nil;

        
        
        if (value_e == null) {
          value_e = nil;
        };
        label_range = self.$loc(name_t);
        name_range = label_range.$adjust($hash2(["end_pos"], {"end_pos": -1}));
        if ($truthy(value_e)) {
          expr_l = self.$loc(name_t).$join(value_e.$loc().$expression())
        } else {
          expr_l = self.$loc(name_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Variable').$new(name_range, expr_l);
      }, $Default_kwarg_map$171.$$arity = -2);
      
      Opal.def(self, '$module_definition_map', $Default_module_definition_map$172 = function $$module_definition_map(keyword_t, name_e, operator_t, end_t) {
        var self = this, name_l = nil;

        
        if ($truthy(name_e)) {
          name_l = name_e.$loc().$expression()};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Definition').$new(self.$loc(keyword_t), self.$loc(operator_t), name_l, self.$loc(end_t));
      }, $Default_module_definition_map$172.$$arity = 4);
      
      Opal.def(self, '$definition_map', $Default_definition_map$173 = function $$definition_map(keyword_t, operator_t, name_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'MethodDefinition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), self.$loc(end_t), nil, nil)
      }, $Default_definition_map$173.$$arity = 4);
      
      Opal.def(self, '$endless_definition_map', $Default_endless_definition_map$174 = function $$endless_definition_map(keyword_t, operator_t, name_t, assignment_t, body_e) {
        var self = this, body_l = nil;

        
        body_l = body_e.$loc().$expression();
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'MethodDefinition').$new(self.$loc(keyword_t), self.$loc(operator_t), self.$loc(name_t), nil, self.$loc(assignment_t), body_l);
      }, $Default_endless_definition_map$174.$$arity = 5);
      
      Opal.def(self, '$send_map', $Default_send_map$175 = function $$send_map(receiver_e, dot_t, selector_t, begin_t, args, end_t) {
        var self = this, begin_l = nil, end_l = nil;

        
        
        if (begin_t == null) {
          begin_t = nil;
        };
        
        if (args == null) {
          args = [];
        };
        
        if (end_t == null) {
          end_t = nil;
        };
        if ($truthy(receiver_e)) {
          begin_l = receiver_e.$loc().$expression()
        } else if ($truthy(selector_t)) {
          begin_l = self.$loc(selector_t)};
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy(args['$any?']())) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy(selector_t)) {
          end_l = self.$loc(selector_t)};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(self.$loc(dot_t), self.$loc(selector_t), self.$loc(begin_t), self.$loc(end_t), begin_l.$join(end_l));
      }, $Default_send_map$175.$$arity = -4);
      
      Opal.def(self, '$var_send_map', $Default_var_send_map$176 = function $$var_send_map(variable_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, variable_e.$loc().$expression(), nil, nil, variable_e.$loc().$expression())
      }, $Default_var_send_map$176.$$arity = 1);
      
      Opal.def(self, '$send_binary_op_map', $Default_send_binary_op_map$177 = function $$send_binary_op_map(lhs_e, selector_t, rhs_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, self.$join_exprs(lhs_e, rhs_e))
      }, $Default_send_binary_op_map$177.$$arity = 3);
      
      Opal.def(self, '$send_unary_op_map', $Default_send_unary_op_map$178 = function $$send_unary_op_map(selector_t, arg_e) {
        var self = this, expr_l = nil;

        
        if ($truthy(arg_e['$nil?']())) {
          expr_l = self.$loc(selector_t)
        } else {
          expr_l = self.$loc(selector_t).$join(arg_e.$loc().$expression())
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(selector_t), nil, nil, expr_l);
      }, $Default_send_unary_op_map$178.$$arity = 2);
      
      Opal.def(self, '$index_map', $Default_index_map$179 = function $$index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Index').$new(self.$loc(lbrack_t), self.$loc(rbrack_t), receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, $Default_index_map$179.$$arity = 3);
      
      Opal.def(self, '$send_index_map', $Default_send_index_map$180 = function $$send_index_map(receiver_e, lbrack_t, rbrack_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Send').$new(nil, self.$loc(lbrack_t).$join(self.$loc(rbrack_t)), nil, nil, receiver_e.$loc().$expression().$join(self.$loc(rbrack_t)))
      }, $Default_send_index_map$180.$$arity = 3);
      
      Opal.def(self, '$block_map', $Default_block_map$181 = function $$block_map(receiver_l, begin_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Collection').$new(self.$loc(begin_t), self.$loc(end_t), receiver_l.$join(self.$loc(end_t)))
      }, $Default_block_map$181.$$arity = 3);
      
      Opal.def(self, '$keyword_map', $Default_keyword_map$182 = function $$keyword_map(keyword_t, begin_t, args, end_t) {
        var self = this, $ret_or_25 = nil, end_l = nil, $ret_or_26 = nil, $ret_or_27 = nil;

        
        args = (function() {if ($truthy(($ret_or_25 = args))) {
          return $ret_or_25
        } else {
          return []
        }; return nil; })();
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy((function() {if ($truthy(($ret_or_26 = args['$any?']()))) {
          return args.$last()['$nil?']()['$!']()
        } else {
          return $ret_or_26
        }; return nil; })())) {
          end_l = args.$last().$loc().$expression()
        } else if ($truthy((function() {if ($truthy(($ret_or_27 = args['$any?']()))) {
          return $rb_gt(args.$count(), 1)
        } else {
          return $ret_or_27
        }; return nil; })())) {
          end_l = args['$[]'](-2).$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_keyword_map$182.$$arity = 4);
      
      Opal.def(self, '$keyword_mod_map', $Default_keyword_mod_map$183 = function $$keyword_mod_map(pre_e, keyword_t, post_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(self.$loc(keyword_t), nil, nil, self.$join_exprs(pre_e, post_e))
      }, $Default_keyword_mod_map$183.$$arity = 3);
      
      Opal.def(self, '$condition_map', $Default_condition_map$184 = function $$condition_map(keyword_t, cond_e, begin_t, body_e, else_t, else_e, end_t) {
        var self = this, end_l = nil, $ret_or_28 = nil, $ret_or_29 = nil;

        
        if ($truthy(end_t)) {
          end_l = self.$loc(end_t)
        } else if ($truthy((function() {if ($truthy(($ret_or_28 = else_e))) {
          return else_e.$loc().$expression()
        } else {
          return $ret_or_28
        }; return nil; })())) {
          end_l = else_e.$loc().$expression()
        } else if ($truthy(self.$loc(else_t))) {
          end_l = self.$loc(else_t)
        } else if ($truthy((function() {if ($truthy(($ret_or_29 = body_e))) {
          return body_e.$loc().$expression()
        } else {
          return $ret_or_29
        }; return nil; })())) {
          end_l = body_e.$loc().$expression()
        } else if ($truthy(self.$loc(begin_t))) {
          end_l = self.$loc(begin_t)
        } else {
          end_l = cond_e.$loc().$expression()
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), self.$loc(begin_t), self.$loc(else_t), self.$loc(end_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_condition_map$184.$$arity = 7);
      
      Opal.def(self, '$ternary_map', $Default_ternary_map$185 = function $$ternary_map(begin_e, question_t, mid_e, colon_t, end_e) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Ternary').$new(self.$loc(question_t), self.$loc(colon_t), self.$join_exprs(begin_e, end_e))
      }, $Default_ternary_map$185.$$arity = 5);
      
      Opal.def(self, '$for_map', $Default_for_map$186 = function $$for_map(keyword_t, in_t, begin_t, end_t) {
        var self = this;

        return $$$($$$($$($nesting, 'Source'), 'Map'), 'For').$new(self.$loc(keyword_t), self.$loc(in_t), self.$loc(begin_t), self.$loc(end_t), self.$loc(keyword_t).$join(self.$loc(end_t)))
      }, $Default_for_map$186.$$arity = 4);
      
      Opal.def(self, '$rescue_body_map', $Default_rescue_body_map$187 = function $$rescue_body_map(keyword_t, exc_list_e, assoc_t, exc_var_e, then_t, compstmt_e) {
        var self = this, end_l = nil, $ret_or_30 = nil, $ret_or_31 = nil, $ret_or_32 = nil;

        
        if ($truthy(compstmt_e)) {
          end_l = compstmt_e.$loc().$expression()};
        if ($truthy((function() {if ($truthy(($ret_or_30 = end_l['$nil?']()))) {
          return then_t
        } else {
          return $ret_or_30
        }; return nil; })())) {
          end_l = self.$loc(then_t)};
        if ($truthy((function() {if ($truthy(($ret_or_31 = end_l['$nil?']()))) {
          return exc_var_e
        } else {
          return $ret_or_31
        }; return nil; })())) {
          end_l = exc_var_e.$loc().$expression()};
        if ($truthy((function() {if ($truthy(($ret_or_32 = end_l['$nil?']()))) {
          return exc_list_e
        } else {
          return $ret_or_32
        }; return nil; })())) {
          end_l = exc_list_e.$loc().$expression()};
        if ($truthy(end_l['$nil?']())) {
          end_l = self.$loc(keyword_t)};
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'RescueBody').$new(self.$loc(keyword_t), self.$loc(assoc_t), self.$loc(then_t), self.$loc(keyword_t).$join(end_l));
      }, $Default_rescue_body_map$187.$$arity = 6);
      
      Opal.def(self, '$eh_keyword_map', $Default_eh_keyword_map$188 = function $$eh_keyword_map(compstmt_e, keyword_t, body_es, else_t, else_e) {
        var self = this, begin_l = nil, end_l = nil;

        
        if ($truthy(compstmt_e['$nil?']())) {
          if ($truthy(keyword_t['$nil?']())) {
            begin_l = body_es.$first().$loc().$expression()
          } else {
            begin_l = self.$loc(keyword_t)
          }
        } else {
          begin_l = compstmt_e.$loc().$expression()
        };
        if ($truthy(else_t)) {
          if ($truthy(else_e['$nil?']())) {
            end_l = self.$loc(else_t)
          } else {
            end_l = else_e.$loc().$expression()
          }
        } else if ($truthy(body_es.$last()['$nil?']()['$!']())) {
          end_l = body_es.$last().$loc().$expression()
        } else {
          end_l = self.$loc(keyword_t)
        };
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Condition').$new(self.$loc(keyword_t), nil, self.$loc(else_t), nil, begin_l.$join(end_l));
      }, $Default_eh_keyword_map$188.$$arity = 5);
      
      Opal.def(self, '$guard_map', $Default_guard_map$189 = function $$guard_map(keyword_t, guard_body_e) {
        var self = this, keyword_l = nil, guard_body_l = nil;

        
        keyword_l = self.$loc(keyword_t);
        guard_body_l = guard_body_e.$loc().$expression();
        return $$$($$$($$($nesting, 'Source'), 'Map'), 'Keyword').$new(keyword_l, nil, nil, keyword_l.$join(guard_body_l));
      }, $Default_guard_map$189.$$arity = 2);
      
      Opal.def(self, '$static_string', $Default_static_string$190 = function $$static_string(nodes) {try {

        var $$191, self = this;

        return $send(nodes, 'map', [], ($$191 = function(node){var self = $$191.$$s == null ? this : $$191.$$s, $case = nil, string = nil;

        
          
          if (node == null) {
            node = nil;
          };
          return (function() {$case = node.$type();
          if ("str"['$===']($case)) {return node.$children()['$[]'](0)}
          else if ("begin"['$===']($case)) {if ($truthy((string = self.$static_string(node.$children())))) {
            return string
          } else {
            Opal.ret(nil)
          }}
          else {Opal.ret(nil)}})();}, $$191.$$s = self, $$191.$$arity = 1, $$191)).$join()
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $Default_static_string$190.$$arity = 1);
      
      Opal.def(self, '$static_regexp', $Default_static_regexp$192 = function $$static_regexp(parts, options) {
        var self = this, source = nil;

        
        source = self.$static_string(parts);
        if ($truthy(source['$nil?']())) {
          return nil};
        source = (function() {
        if ($truthy(options.$children()['$include?']("u"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'UTF_8'))}
        else if ($truthy(options.$children()['$include?']("e"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'EUC_JP'))}
        else if ($truthy(options.$children()['$include?']("s"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'WINDOWS_31J'))}
        else if ($truthy(options.$children()['$include?']("n"))) {return source.$encode($$$($$($nesting, 'Encoding'), 'BINARY'))}
        else {return source}})();
        return $$($nesting, 'Regexp').$new(source, (function() {if ($truthy(options.$children()['$include?']("x"))) {
          return $$$($$($nesting, 'Regexp'), 'EXTENDED')
        } else {
          return nil
        }; return nil; })());
      }, $Default_static_regexp$192.$$arity = 2);
      
      Opal.def(self, '$static_regexp_node', $Default_static_regexp_node$193 = function $$static_regexp_node(node) {
        var $a, self = this, parts = nil, options = nil;

        if (node.$type()['$==']("regexp")) {
          
          $a = [node.$children()['$[]']($range(0, -2, false)), node.$children()['$[]'](-1)], (parts = $a[0]), (options = $a[1]), $a;
          return self.$static_regexp(parts, options);
        } else {
          return nil
        }
      }, $Default_static_regexp_node$193.$$arity = 1);
      
      Opal.def(self, '$collapse_string_parts?', $Default_collapse_string_parts$ques$194 = function(parts) {
        var self = this, $ret_or_33 = nil;

        if ($truthy(($ret_or_33 = parts['$one?']()))) {
          return ["str", "dstr"]['$include?'](parts.$first().$type())
        } else {
          return $ret_or_33
        }
      }, $Default_collapse_string_parts$ques$194.$$arity = 1);
      
      Opal.def(self, '$value', $Default_value$195 = function $$value(token) {
        var self = this;

        return token['$[]'](0)
      }, $Default_value$195.$$arity = 1);
      
      Opal.def(self, '$string_value', $Default_string_value$196 = function $$string_value(token) {
        var self = this;

        
        if ($truthy(token['$[]'](0)['$valid_encoding?']())) {
        } else {
          self.$diagnostic("error", "invalid_encoding", nil, token['$[]'](1))
        };
        return token['$[]'](0);
      }, $Default_string_value$196.$$arity = 1);
      
      Opal.def(self, '$loc', $Default_loc$197 = function $$loc(token) {
        var self = this, $ret_or_34 = nil;

        if ($truthy((function() {if ($truthy(($ret_or_34 = token))) {
          return token['$[]'](0)
        } else {
          return $ret_or_34
        }; return nil; })())) {
          return token['$[]'](1)
        } else {
          return nil
        }
      }, $Default_loc$197.$$arity = 1);
      
      Opal.def(self, '$diagnostic', $Default_diagnostic$198 = function $$diagnostic(type, reason, arguments$, location, highlights) {
        var self = this;

        
        
        if (highlights == null) {
          highlights = [];
        };
        self.parser.$diagnostics().$process($$($nesting, 'Diagnostic').$new(type, reason, arguments$, location, highlights));
        if (type['$==']("error")) {
          return self.parser.$send("yyerror")
        } else {
          return nil
        };
      }, $Default_diagnostic$198.$$arity = -5);
      
      Opal.def(self, '$validate_definee', $Default_validate_definee$199 = function $$validate_definee(definee) {
        var self = this, $case = nil;

        return (function() {$case = definee.$type();
        if ("int"['$===']($case) || "str"['$===']($case) || "dstr"['$===']($case) || "sym"['$===']($case) || "dsym"['$===']($case) || "regexp"['$===']($case) || "array"['$===']($case) || "hash"['$===']($case)) {
        self.$diagnostic("error", "singleton_literal", nil, definee.$loc().$expression());
        return false;}
        else {return true}})()
      }, $Default_validate_definee$199.$$arity = 1);
      
      Opal.def(self, '$rewrite_hash_args_to_kwargs', $Default_rewrite_hash_args_to_kwargs$200 = function $$rewrite_hash_args_to_kwargs(args) {
        var self = this, $ret_or_35 = nil, $writer = nil, $ret_or_36 = nil, $ret_or_37 = nil;

        if ($truthy((function() {if ($truthy(($ret_or_35 = args['$any?']()))) {
          return self['$kwargs?'](args.$last())
        } else {
          return $ret_or_35
        }; return nil; })())) {
          
          $writer = [$rb_minus(args.$length(), 1), args['$[]']($rb_minus(args.$length(), 1)).$updated("kwargs")];
          $send(args, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy((function() {if ($truthy(($ret_or_36 = (function() {if ($truthy(($ret_or_37 = $rb_gt(args.$length(), 1)))) {
          return args.$last().$type()['$==']("block_pass")
        } else {
          return $ret_or_37
        }; return nil; })()))) {
          return self['$kwargs?'](args['$[]']($rb_minus(args.$length(), 2)))
        } else {
          return $ret_or_36
        }; return nil; })())) {
          
          $writer = [$rb_minus(args.$length(), 2), args['$[]']($rb_minus(args.$length(), 2)).$updated("kwargs")];
          $send(args, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        }
      }, $Default_rewrite_hash_args_to_kwargs$200.$$arity = 1);
      return (Opal.def(self, '$kwargs?', $Default_kwargs$ques$201 = function(node) {
        var self = this, $ret_or_38 = nil, $ret_or_39 = nil;

        if ($truthy(($ret_or_38 = (function() {if ($truthy(($ret_or_39 = node.$type()['$==']("hash")))) {
          return node.$loc().$begin()['$nil?']()
        } else {
          return $ret_or_39
        }; return nil; })()))) {
          return node.$loc().$end()['$nil?']()
        } else {
          return $ret_or_38
        }
      }, $Default_kwargs$ques$201.$$arity = 1), nil) && 'kwargs?';
    })($$($nesting, 'Builders'), null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
