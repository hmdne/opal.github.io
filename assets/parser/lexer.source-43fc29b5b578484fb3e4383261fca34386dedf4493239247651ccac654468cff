/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $send = Opal.send, $hash = Opal.hash, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$private', '$_lex_trans_keys=', '$-', '$_lex_key_spans=', '$_lex_index_offsets=', '$_lex_indicies=', '$_lex_trans_targs=', '$_lex_trans_actions=', '$_lex_to_state_actions=', '$_lex_from_state_actions=', '$_lex_eof_trans=', '$lex_start=', '$lex_error=', '$lex_en_interp_words=', '$lex_en_interp_string=', '$lex_en_plain_words=', '$lex_en_plain_string=', '$lex_en_interp_backslash_delimited=', '$lex_en_plain_backslash_delimited=', '$lex_en_interp_backslash_delimited_words=', '$lex_en_plain_backslash_delimited_words=', '$lex_en_regexp_modifiers=', '$lex_en_expr_variable=', '$lex_en_expr_fname=', '$lex_en_expr_endfn=', '$lex_en_expr_dot=', '$lex_en_expr_arg=', '$lex_en_expr_cmdarg=', '$lex_en_expr_endarg=', '$lex_en_expr_mid=', '$lex_en_expr_beg=', '$lex_en_expr_labelarg=', '$lex_en_expr_value=', '$lex_en_expr_end=', '$lex_en_leading_dot=', '$lex_en_line_comment=', '$lex_en_line_begin=', '$freeze', '$ord', '$union', '$chars', '$attr_reader', '$reset', '$lex_en_line_begin', '$class', '$new', '$source', '$==', '$encoding', '$unpack', '$[]', '$lex_en_expr_dot', '$lex_en_expr_fname', '$lex_en_expr_value', '$lex_en_expr_beg', '$lex_en_expr_mid', '$lex_en_expr_arg', '$lex_en_expr_cmdarg', '$lex_en_expr_end', '$lex_en_expr_endarg', '$lex_en_expr_endfn', '$lex_en_expr_labelarg', '$lex_en_interp_string', '$lex_en_interp_words', '$lex_en_plain_string', '$fetch', '$invert', '$push', '$count', '$pop', '$any?', '$shift', '$send', '$+', '$size', '$<=', '$===', '$<<', '$>', '$!=', '$emit_comment', '$tok', '$literal', '$flush_string', '$extend_content', '$emit', '$heredoc?', '$saved_herebody_s=', '$start_interp_brace', '$[]=', '$diagnostic', '$range', '$str_s', '$gsub', '$version?', '$nest_and_try_closing', '$heredoc_e', '$pop_literal', '$infer_indent_level', '$words?', '$!', '$eof_codepoint?', '$extend_space', '$extend_string', '$>=', '$active?', '$slice', '$start_with?', '$chr', '$munge_escape?', '$regexp?', '$match', '$squiggly_heredoc?', '$supports_line_continuation_via_slash?', '$scan', '$join', '$=~', '$to_i', '$stack_pop', '$emit_table', '$push_literal', '$arg_or_cmdarg', '$<', '$emit_do', '$nil?', '$declared?', '$last', '$getbyte', '$inspect', '$end_with?', '$empty?', '$index', '$call', '$Float', '$to_f', '$length', '$lambda', '$Rational', '$Complex', '$each', '$encode_escape', '$%', '$end_interp_brace_and_try_closing', '$lexpop', '$saved_herebody_s', '$next_state_for_literal', '$rstrip', '$&', '$|', '$include?', '$lex_error', '$protected', '$force_encoding', '$process', '$backslash_delimited?', '$interpolate?', '$lex_en_interp_backslash_delimited_words', '$lex_en_plain_backslash_delimited_words', '$lex_en_plain_words', '$lex_en_interp_backslash_delimited', '$lex_en_plain_backslash_delimited', '$dedent_level', '$type', '$lex_en_regexp_modifiers', '$upcase']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Lexer');

    var $nesting = [self].concat($parent_nesting), $Lexer_initialize$1, $Lexer_reset$2, $Lexer_source_buffer$eq$3, $Lexer_encoding$4, $Lexer_state$5, $Lexer_state$eq$6, $Lexer_push_cmdarg$7, $Lexer_pop_cmdarg$8, $Lexer_push_cond$9, $Lexer_pop_cond$10, $Lexer_dedent_level$11, $Lexer_advance$12, $Lexer_eof_codepoint$ques$42, $Lexer_version$ques$43, $Lexer_stack_pop$44, $Lexer_encode_escape$45, $Lexer_tok$46, $Lexer_range$47, $Lexer_emit$48, $Lexer_emit_table$49, $Lexer_emit_do$50, $Lexer_arg_or_cmdarg$51, $Lexer_emit_comment$52, $Lexer_diagnostic$53, $Lexer_push_literal$54, $Lexer_next_state_for_literal$55, $Lexer_literal$56, $Lexer_pop_literal$57, $Lexer$58, $writer = nil;

    self.$$prototype.source_buffer = self.$$prototype.source_pts = self.$$prototype.cs = self.$$prototype.cmdarg_stack = self.$$prototype.cmdarg = self.$$prototype.cond_stack = self.$$prototype.cond = self.$$prototype.dedent_level = self.$$prototype.token_queue = self.$$prototype.p = self.$$prototype.command_start = self.$$prototype.herebody_s = self.$$prototype.sharp_s = self.$$prototype.ts = self.$$prototype.te = self.$$prototype.top = self.$$prototype.stack = self.$$prototype.version = self.$$prototype.escape_s = self.$$prototype.escape = self.$$prototype.act = self.$$prototype.static_env = self.$$prototype.lambda_stack = self.$$prototype.paren_nest = self.$$prototype.num_digits_s = self.$$prototype.num_suffix_s = self.$$prototype.num_base = self.$$prototype.num_xfrm = self.$$prototype.newline_s = self.$$prototype.eq_begin_s = self.$$prototype.cs_before_block_comment = self.$$prototype.in_kwarg = self.$$prototype.tokens = self.$$prototype.comments = self.$$prototype.diagnostics = self.$$prototype.literal_stack = nil;
    
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_keys");
      return self.$private("_lex_trans_keys", "_lex_trans_keys=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 101, 101, 103, 103, 105, 105, 110, 110, 69, 69, 78, 78, 68, 68, 95, 95, 95, 95, 0, 26, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 26, 0, 127, 58, 58, 58, 58, 0, 127, 58, 58, 60, 60, 62, 62, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 115, 115, 99, 99, 117, 117, 101, 101, 108, 116, 101, 101, 115, 115, 115, 115, 105, 105, 108, 108, 105, 105, 108, 108, 58, 58, 0, 127, 10, 10, 0, 127, 9, 92, 10, 10, 9, 92, 58, 58, 98, 98, 101, 101, 103, 103, 105, 105, 110, 110, 0, 122, 61, 61, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 10, 10, 0, 127, 0, 127, 61, 126, 93, 93, 0, 127, 0, 127, 10, 10, 34, 34, 10, 10, 39, 39, 0, 127, 10, 96, 96, 96, 0, 45, 0, 77, 0, 77, 0, 92, 0, 26, 0, 26, 0, 45, 0, 99, 0, 26, 67, 99, 45, 45, 0, 92, 0, 77, 0, 102, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 58, 58, 58, 0, 127, 43, 57, 48, 57, 48, 57, 48, 57, 48, 57, 115, 115, 99, 99, 117, 117, 101, 101, 99, 99, 117, 117, 101, 101, 0, 127, 58, 58, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 9, 92, 60, 60, 10, 10, 9, 92, 9, 92, 10, 10, 10, 10, 10, 10, 10, 10, 46, 46, 0, 95, 9, 32, 0, 0, 10, 10, 10, 10, 98, 98, 9, 32, 10, 10, 95, 95, 0, 92, 9, 32, 36, 123, 0, 127, 48, 57, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 36, 123, 0, 127, 48, 57, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 92, 9, 32, 0, 26, 0, 92, 0, 26, 0, 35, 36, 123, 0, 127, 48, 57, 0, 127, 0, 26, 0, 35, 9, 32, 36, 123, 0, 127, 48, 57, 0, 127, 0, 32, 9, 32, 65, 122, 65, 122, 36, 64, 0, 127, 48, 57, 0, 127, 0, 127, 0, 127, 0, 127, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 115, 115, 38, 38, 42, 42, 64, 64, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 93, 93, 10, 10, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 124, 124, 0, 127, 0, 127, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 93, 93, 10, 10, 124, 124, 0, 126, 0, 127, 0, 61, 9, 61, 9, 61, 0, 0, 9, 61, 9, 62, 46, 46, 46, 46, 58, 58, 9, 32, 0, 0, 0, 127, 0, 0, 9, 124, 0, 0, 10, 10, 10, 10, 0, 0, 9, 61, 58, 58, 60, 60, 62, 62, 9, 32, 10, 10, 0, 127, 102, 102, 101, 101, 110, 110, 104, 104, 0, 127, 0, 127, 0, 127, 0, 0, 0, 127, 10, 10, 0, 123, 9, 32, 10, 10, 10, 10, 10, 10, 0, 0, 111, 111, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 58, 61, 0, 0, 61, 126, 61, 61, 0, 0, 0, 0, 0, 0, 9, 32, 61, 61, 9, 32, 61, 126, 10, 10, 10, 10, 65, 122, 0, 122, 38, 61, 0, 0, 42, 61, 61, 61, 9, 92, 9, 92, 9, 92, 46, 46, 46, 46, 0, 26, 0, 127, 0, 127, 61, 61, 0, 0, 61, 126, 61, 62, 0, 0, 0, 0, 0, 0, 0, 0, 61, 126, 0, 127, 48, 57, 38, 38, 42, 42, 64, 64, 60, 61, 62, 62, 61, 61, 61, 62, 0, 127, 48, 57, 0, 127, 124, 124, 64, 64, 60, 61, 0, 0, 10, 34, 10, 39, 96, 96, 62, 62, 61, 126, 61, 62, 0, 122, 0, 0, 0, 127, 0, 127, 0, 120, 0, 0, 0, 0, 48, 55, 48, 55, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 92, 45, 45, 0, 0, 0, 0, 0, 0, 0, 92, 0, 45, 0, 92, 0, 92, 0, 0, 0, 0, 0, 92, 0, 45, 10, 10, 0, 92, 48, 123, 48, 102, 48, 102, 48, 102, 0, 0, 0, 125, 0, 125, 0, 0, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 125, 0, 0, 0, 0, 48, 102, 0, 0, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 61, 126, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 92, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 9, 32, 0, 0, 10, 10, 10, 10, 10, 10, 0, 0, 0, 127, 0, 127, 61, 61, 0, 0, 9, 32, 0, 0, 61, 126, 10, 10, 10, 10, 0, 127, 0, 127, 48, 57, 61, 61, 38, 61, 0, 0, 0, 0, 42, 61, 61, 62, 46, 57, 46, 46, 10, 10, 48, 101, 48, 95, 46, 120, 48, 114, 43, 57, 48, 105, 102, 102, 0, 0, 101, 105, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 105, 114, 102, 102, 0, 0, 101, 105, 115, 115, 0, 0, 0, 0, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 48, 114, 46, 114, 48, 114, 46, 114, 48, 114, 58, 58, 60, 61, 62, 62, 61, 126, 61, 61, 61, 62, 0, 127, 0, 127, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 10, 10, 0, 0, 0, 0, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 9, 92, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 127, 0, 0, 61, 124, 0, 0, 9, 92, 9, 92, 9, 92, 10, 10, 46, 46, 10, 10, 10, 61, 10, 10, 10, 101, 10, 110, 10, 100, 10, 10, 0]];
    $send(self, '_lex_trans_keys=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_key_spans");
      return self.$private("_lex_key_spans", "_lex_key_spans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27, 128, 128, 128, 128, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 27, 128, 1, 1, 128, 1, 1, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 128, 1, 128, 84, 1, 84, 1, 1, 1, 1, 1, 1, 123, 1, 84, 84, 84, 84, 84, 1, 128, 128, 66, 1, 128, 128, 1, 1, 1, 1, 128, 87, 1, 46, 78, 78, 93, 27, 27, 46, 100, 27, 33, 1, 93, 78, 103, 128, 128, 128, 128, 128, 128, 1, 1, 128, 15, 10, 10, 10, 10, 1, 1, 1, 1, 1, 1, 1, 128, 1, 84, 84, 84, 84, 84, 84, 1, 1, 84, 84, 1, 1, 1, 1, 1, 96, 24, 0, 1, 1, 1, 24, 1, 1, 93, 24, 88, 128, 10, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 88, 128, 10, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 93, 24, 27, 93, 27, 36, 88, 128, 10, 128, 27, 36, 24, 88, 128, 10, 128, 33, 24, 58, 58, 29, 128, 10, 128, 128, 128, 128, 24, 0, 66, 1, 1, 128, 128, 10, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 128, 128, 128, 128, 128, 128, 1, 1, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 1, 128, 128, 24, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 1, 1, 1, 2, 1, 66, 1, 2, 128, 1, 1, 1, 127, 128, 62, 53, 53, 0, 53, 54, 1, 1, 1, 24, 0, 128, 0, 116, 0, 1, 1, 0, 53, 1, 1, 1, 24, 1, 128, 1, 1, 1, 1, 128, 128, 128, 0, 128, 1, 124, 24, 1, 1, 1, 0, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 4, 0, 66, 1, 0, 0, 0, 24, 1, 24, 66, 1, 1, 58, 123, 24, 0, 20, 1, 84, 84, 84, 1, 1, 27, 128, 128, 1, 0, 66, 2, 0, 0, 0, 0, 66, 128, 10, 1, 1, 1, 2, 1, 1, 2, 128, 10, 128, 1, 1, 2, 0, 25, 30, 1, 1, 66, 2, 123, 0, 128, 128, 121, 0, 0, 8, 8, 0, 0, 93, 0, 0, 0, 93, 1, 0, 0, 0, 93, 46, 93, 93, 0, 0, 93, 46, 1, 93, 76, 55, 55, 55, 0, 126, 126, 0, 126, 0, 126, 126, 126, 126, 0, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 0, 0, 55, 0, 128, 128, 128, 0, 1, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 66, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 93, 24, 0, 1, 1, 1, 0, 128, 128, 24, 0, 1, 1, 1, 0, 128, 128, 1, 0, 24, 0, 66, 1, 1, 128, 128, 10, 1, 24, 0, 0, 20, 2, 12, 1, 1, 54, 48, 75, 67, 15, 58, 1, 0, 5, 0, 0, 67, 67, 67, 67, 10, 1, 0, 5, 1, 0, 0, 67, 67, 67, 67, 67, 67, 67, 67, 69, 67, 69, 67, 1, 2, 1, 66, 1, 2, 128, 128, 0, 128, 128, 128, 128, 128, 128, 0, 1, 0, 0, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 84, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 0, 64, 0, 84, 84, 84, 1, 1, 1, 52, 1, 92, 101, 91, 1]];
    $send(self, '_lex_key_spans=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_index_offsets");
      return self.$private("_lex_index_offsets", "_lex_index_offsets=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 46, 175, 304, 433, 562, 609, 688, 767, 861, 889, 917, 964, 1065, 1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 3927, 4056, 4185, 4314, 4443, 4471, 4600, 4602, 4604, 4733, 4735, 4737, 4739, 4741, 4870, 4999, 5128, 5257, 5386, 5515, 5644, 5773, 5902, 6031, 6160, 6289, 6418, 6547, 6676, 6805, 6934, 7063, 7065, 7067, 7069, 7071, 7081, 7083, 7085, 7087, 7089, 7091, 7093, 7095, 7097, 7226, 7228, 7357, 7442, 7444, 7529, 7531, 7533, 7535, 7537, 7539, 7541, 7665, 7667, 7752, 7837, 7922, 8007, 8092, 8094, 8223, 8352, 8419, 8421, 8550, 8679, 8681, 8683, 8685, 8687, 8816, 8904, 8906, 8953, 9032, 9111, 9205, 9233, 9261, 9308, 9409, 9437, 9471, 9473, 9567, 9646, 9750, 9879, 10008, 10137, 10266, 10395, 10524, 10526, 10528, 10657, 10673, 10684, 10695, 10706, 10717, 10719, 10721, 10723, 10725, 10727, 10729, 10731, 10860, 10862, 10947, 11032, 11117, 11202, 11287, 11372, 11374, 11376, 11461, 11546, 11548, 11550, 11552, 11554, 11556, 11653, 11678, 11679, 11681, 11683, 11685, 11710, 11712, 11714, 11808, 11833, 11922, 12051, 12062, 12191, 12313, 12314, 12315, 12324, 12333, 12334, 12335, 12429, 12430, 12431, 12432, 12526, 12528, 12529, 12530, 12531, 12625, 12672, 12766, 12860, 12861, 12862, 12956, 13003, 13005, 13099, 13176, 13232, 13288, 13344, 13345, 13472, 13599, 13600, 13727, 13728, 13855, 13982, 14109, 14236, 14237, 14364, 14491, 14618, 14745, 14872, 14999, 15000, 15001, 15057, 15058, 15152, 15241, 15370, 15381, 15510, 15632, 15633, 15634, 15643, 15652, 15653, 15654, 15748, 15749, 15750, 15751, 15845, 15847, 15848, 15849, 15850, 15944, 15991, 16085, 16179, 16180, 16181, 16275, 16322, 16324, 16418, 16495, 16551, 16607, 16663, 16664, 16791, 16918, 16919, 17046, 17047, 17174, 17301, 17428, 17555, 17556, 17683, 17810, 17937, 18064, 18191, 18318, 18319, 18320, 18376, 18377, 18471, 18496, 18524, 18618, 18646, 18683, 18772, 18901, 18912, 19041, 19069, 19106, 19131, 19220, 19349, 19360, 19489, 19523, 19548, 19607, 19666, 19696, 19825, 19836, 19965, 20094, 20223, 20352, 20377, 20378, 20445, 20447, 20449, 20578, 20707, 20718, 20720, 20722, 20724, 20726, 20728, 20731, 20733, 20800, 20802, 20805, 20934, 21063, 21192, 21321, 21450, 21579, 21708, 21710, 21712, 21841, 21970, 22099, 22228, 22357, 22486, 22615, 22744, 22873, 23002, 23131, 23260, 23389, 23518, 23647, 23776, 23905, 24034, 24163, 24292, 24421, 24550, 24679, 24808, 24937, 25066, 25195, 25324, 25453, 25582, 25711, 25840, 25969, 26098, 26227, 26356, 26485, 26614, 26743, 26872, 27001, 27130, 27259, 27388, 27517, 27646, 27775, 27904, 28033, 28162, 28291, 28420, 28549, 28678, 28807, 28936, 29065, 29194, 29323, 29452, 29581, 29710, 29839, 29968, 30097, 30226, 30355, 30484, 30613, 30742, 30871, 31000, 31129, 31258, 31387, 31516, 31645, 31774, 31903, 32032, 32161, 32290, 32419, 32421, 32550, 32679, 32704, 32706, 32708, 32710, 32711, 32840, 32969, 32971, 32972, 32997, 32998, 33065, 33067, 33069, 33071, 33073, 33075, 33078, 33080, 33147, 33149, 33152, 33281, 33283, 33285, 33287, 33415, 33544, 33607, 33661, 33715, 33716, 33770, 33825, 33827, 33829, 33831, 33856, 33857, 33986, 33987, 34104, 34105, 34107, 34109, 34110, 34164, 34166, 34168, 34170, 34195, 34197, 34326, 34328, 34330, 34332, 34334, 34463, 34592, 34721, 34722, 34851, 34853, 34978, 35003, 35005, 35007, 35009, 35010, 35012, 35013, 35142, 35271, 35296, 35297, 35299, 35301, 35303, 35304, 35433, 35562, 35691, 35820, 35949, 36078, 36207, 36336, 36465, 36594, 36723, 36852, 36981, 37110, 37239, 37368, 37497, 37626, 37631, 37632, 37699, 37701, 37702, 37703, 37704, 37729, 37731, 37756, 37823, 37825, 37827, 37886, 38010, 38035, 38036, 38057, 38059, 38144, 38229, 38314, 38316, 38318, 38346, 38475, 38604, 38606, 38607, 38674, 38677, 38678, 38679, 38680, 38681, 38748, 38877, 38888, 38890, 38892, 38894, 38897, 38899, 38901, 38904, 39033, 39044, 39173, 39175, 39177, 39180, 39181, 39207, 39238, 39240, 39242, 39309, 39312, 39436, 39437, 39566, 39695, 39817, 39818, 39819, 39828, 39837, 39838, 39839, 39933, 39934, 39935, 39936, 40030, 40032, 40033, 40034, 40035, 40129, 40176, 40270, 40364, 40365, 40366, 40460, 40507, 40509, 40603, 40680, 40736, 40792, 40848, 40849, 40976, 41103, 41104, 41231, 41232, 41359, 41486, 41613, 41740, 41741, 41868, 41995, 42122, 42249, 42376, 42503, 42630, 42757, 42884, 43011, 43138, 43265, 43392, 43519, 43646, 43773, 43900, 44027, 44154, 44155, 44156, 44212, 44213, 44342, 44471, 44600, 44601, 44603, 44604, 44733, 44862, 44991, 45120, 45249, 45378, 45507, 45636, 45765, 45894, 46023, 46152, 46281, 46410, 46539, 46668, 46797, 46926, 47055, 47184, 47313, 47442, 47571, 47700, 47829, 47958, 48087, 48216, 48345, 48474, 48603, 48732, 48861, 48990, 49119, 49248, 49377, 49506, 49635, 49764, 49893, 50022, 50151, 50280, 50409, 50538, 50667, 50796, 50925, 51054, 51183, 51312, 51441, 51570, 51699, 51828, 51957, 52086, 52215, 52344, 52473, 52540, 52669, 52798, 52927, 53056, 53185, 53314, 53443, 53572, 53701, 53830, 53959, 54088, 54217, 54346, 54475, 54604, 54733, 54862, 54991, 55120, 55249, 55378, 55507, 55636, 55765, 55766, 55831, 55925, 55950, 55951, 55953, 55955, 55957, 55958, 56087, 56216, 56241, 56242, 56244, 56246, 56248, 56249, 56378, 56507, 56509, 56510, 56535, 56536, 56603, 56605, 56607, 56736, 56865, 56876, 56878, 56903, 56904, 56905, 56926, 56929, 56942, 56944, 56946, 57001, 57050, 57126, 57194, 57210, 57269, 57271, 57272, 57278, 57279, 57280, 57348, 57416, 57484, 57552, 57563, 57565, 57566, 57572, 57574, 57575, 57576, 57644, 57712, 57780, 57848, 57916, 57984, 58052, 58120, 58190, 58258, 58328, 58396, 58398, 58401, 58403, 58470, 58472, 58475, 58604, 58733, 58734, 58863, 58992, 59121, 59250, 59379, 59508, 59509, 59511, 59512, 59513, 59642, 59771, 59900, 60029, 60158, 60287, 60416, 60545, 60674, 60803, 60932, 61061, 61190, 61319, 61448, 61577, 61706, 61835, 61964, 62093, 62222, 62351, 62480, 62609, 62738, 62867, 62996, 63125, 63254, 63383, 63512, 63641, 63770, 63899, 64028, 64157, 64286, 64371, 64500, 64629, 64758, 64887, 65016, 65145, 65274, 65403, 65532, 65661, 65790, 65919, 66048, 66177, 66306, 66435, 66564, 66693, 66822, 66951, 67080, 67209, 67338, 67467, 67596, 67725, 67854, 67983, 68112, 68241, 68370, 68499, 68628, 68757, 68886, 69015, 69144, 69273, 69402, 69531, 69660, 69789, 69918, 70047, 70176, 70305, 70434, 70563, 70692, 70821, 70950, 71079, 71208, 71337, 71466, 71595, 71724, 71853, 71982, 72111, 72240, 72369, 72498, 72627, 72756, 72757, 72822, 72823, 72908, 72993, 73078, 73080, 73082, 73084, 73137, 73139, 73232, 73334, 73426]];
    $send(self, '_lex_index_offsets=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_indicies");
      return self.$private("_lex_indicies", "_lex_indicies=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 12, 14, 12, 14, 14, 12, 12, 14, 14, 14, 15, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 14, 12, 12, 13, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 14, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 14, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 18, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 13, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 20, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24, 22, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 26, 26, 26, 19, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 19, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28, 26, 19, 29, 29, 29, 19, 29, 29, 29, 29, 29, 30, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 19, 29, 19, 29, 29, 29, 19, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 19, 29, 19, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 31, 20, 19, 32, 32, 32, 19, 32, 32, 32, 32, 32, 33, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 19, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 32, 32, 32, 32, 32, 32, 36, 32, 19, 32, 32, 32, 19, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 19, 32, 37, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 38, 19, 38, 19, 19, 39, 39, 39, 19, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 19, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 41, 39, 19, 22, 22, 22, 19, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 25, 22, 19, 42, 42, 42, 19, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 19, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 42, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, 46, 44, 46, 44, 46, 46, 44, 44, 46, 46, 46, 47, 46, 46, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 46, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 46, 44, 44, 45, 46, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 46, 44, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 44, 44, 44, 44, 44, 44, 44, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 44, 44, 44, 44, 46, 44, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 44, 44, 44, 44, 44, 46, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 44, 44, 44, 44, 44, 44, 50, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 45, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 44, 45, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 45, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 44, 44, 44, 44, 44, 45, 51, 52, 52, 52, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 52, 51, 54, 54, 54, 51, 54, 54, 54, 54, 54, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 51, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 56, 54, 51, 54, 54, 54, 51, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 51, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 57, 54, 51, 58, 58, 58, 51, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 51, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 60, 58, 51, 61, 61, 61, 51, 61, 61, 61, 61, 61, 62, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 51, 61, 51, 61, 61, 61, 51, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 51, 61, 51, 52, 52, 52, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 63, 52, 51, 64, 64, 64, 51, 64, 64, 64, 64, 64, 65, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 66, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 67, 64, 64, 64, 64, 64, 64, 68, 64, 51, 64, 64, 64, 51, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 51, 64, 69, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 70, 51, 70, 51, 51, 71, 71, 71, 51, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 51, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 73, 71, 51, 54, 54, 54, 51, 54, 54, 54, 54, 54, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 51, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 57, 54, 51, 74, 74, 74, 51, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 51, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 74, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 78, 78, 76, 78, 76, 78, 78, 76, 76, 78, 78, 78, 79, 78, 78, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 78, 78, 78, 78, 78, 78, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 78, 76, 76, 77, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 78, 76, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 76, 76, 76, 76, 76, 76, 76, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 76, 76, 76, 76, 78, 76, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 76, 76, 76, 76, 76, 78, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 76, 76, 76, 76, 76, 76, 82, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 77, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 77, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 77, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 85, 85, 83, 85, 83, 85, 85, 83, 83, 85, 85, 85, 86, 85, 85, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 85, 85, 85, 85, 85, 85, 85, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 85, 83, 83, 84, 85, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 85, 83, 84, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 83, 83, 83, 83, 83, 83, 83, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 83, 83, 83, 83, 85, 83, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 83, 83, 83, 83, 83, 85, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 83, 83, 83, 83, 83, 83, 89, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 84, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 83, 84, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 84, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 83, 83, 83, 83, 83, 84, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 91, 91, 92, 91, 92, 91, 91, 92, 92, 91, 91, 91, 93, 91, 91, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 91, 91, 91, 91, 91, 91, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 92, 91, 92, 92, 90, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 92, 92, 92, 91, 92, 90, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 91, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 92, 92, 92, 92, 92, 92, 96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 92, 92, 92, 92, 95, 92, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 92, 92, 92, 92, 92, 95, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 92, 92, 92, 92, 92, 92, 92, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 92, 92, 92, 92, 97, 92, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 92, 92, 92, 92, 92, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 99, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98, 98, 99, 100, 101, 101, 101, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 100, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 104, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 105, 102, 102, 102, 102, 104, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 102, 102, 102, 102, 103, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 102, 102, 102, 102, 102, 103, 105, 102, 102, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 109, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 107, 107, 107, 107, 109, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 107, 107, 107, 107, 108, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 107, 107, 107, 107, 107, 108, 110, 107, 112, 111, 113, 111, 114, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 116, 111, 116, 116, 116, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 116, 111, 111, 111, 111, 117, 118, 111, 119, 111, 120, 121, 122, 123, 124, 117, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 125, 111, 126, 122, 127, 128, 111, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 129, 130, 122, 131, 115, 111, 115, 115, 115, 115, 115, 115, 115, 115, 132, 115, 115, 115, 115, 115, 115, 115, 115, 133, 115, 115, 134, 115, 135, 115, 115, 115, 136, 137, 111, 131, 111, 115, 111, 111, 111, 111, 111, 111, 111, 111, 111, 138, 111, 138, 138, 138, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 138, 111, 111, 111, 111, 139, 140, 111, 141, 111, 142, 143, 144, 145, 146, 139, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 147, 111, 148, 144, 149, 150, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 151, 152, 144, 113, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 153, 108, 108, 108, 108, 108, 108, 108, 108, 154, 108, 108, 155, 108, 156, 108, 108, 108, 157, 158, 111, 113, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 159, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 160, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 161, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 162, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 163, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 159, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 164, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 165, 108, 108, 108, 108, 108, 108, 108, 166, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 167, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 168, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 159, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 169, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 159, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 170, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 171, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 109, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 111, 111, 111, 111, 109, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 108, 111, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 163, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 111, 111, 111, 111, 111, 108, 173, 172, 174, 172, 175, 172, 144, 172, 176, 172, 172, 172, 172, 172, 172, 172, 177, 172, 178, 172, 179, 172, 144, 172, 180, 172, 144, 172, 181, 172, 175, 172, 183, 182, 184, 184, 184, 184, 184, 184, 184, 184, 184, 186, 184, 186, 186, 186, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 186, 184, 184, 184, 184, 184, 184, 184, 187, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 184, 188, 184, 184, 185, 184, 185, 185, 185, 189, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 184, 184, 184, 184, 184, 185, 190, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 192, 184, 192, 192, 192, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 192, 184, 184, 184, 184, 184, 184, 184, 193, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 184, 194, 184, 184, 191, 184, 191, 191, 191, 195, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 184, 184, 184, 184, 184, 191, 197, 196, 197, 197, 197, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 197, 196, 196, 196, 196, 196, 196, 196, 198, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 199, 196, 200, 196, 201, 196, 201, 201, 201, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 201, 196, 196, 196, 196, 196, 196, 196, 202, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 203, 196, 204, 205, 207, 206, 208, 206, 209, 206, 210, 206, 211, 206, 212, 213, 213, 213, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 212, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 215, 204, 216, 217, 216, 216, 216, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 216, 204, 204, 218, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 220, 204, 221, 222, 221, 221, 221, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 221, 204, 204, 223, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 225, 204, 227, 228, 227, 227, 227, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 227, 226, 226, 229, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 231, 226, 233, 234, 233, 233, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 232, 232, 235, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 237, 232, 233, 238, 233, 233, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 232, 232, 235, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 237, 232, 217, 204, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 241, 241, 239, 241, 239, 241, 241, 239, 239, 241, 241, 241, 242, 241, 241, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 241, 241, 241, 241, 241, 241, 241, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 239, 241, 239, 239, 240, 241, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 239, 239, 239, 241, 239, 240, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 239, 239, 239, 239, 239, 239, 239, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 239, 239, 239, 239, 241, 239, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 239, 239, 239, 239, 239, 241, 244, 241, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 241, 239, 244, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 246, 239, 239, 239, 239, 247, 239, 239, 239, 239, 239, 248, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 215, 239, 239, 239, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 239, 239, 239, 239, 245, 249, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 239, 239, 239, 248, 239, 245, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 252, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 251, 251, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 250, 251, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 250, 254, 253, 257, 256, 252, 251, 257, 258, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 246, 239, 239, 239, 239, 247, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 239, 239, 239, 239, 245, 249, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 239, 239, 239, 239, 239, 245, 260, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 257, 259, 257, 260, 261, 262, 262, 262, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 263, 262, 261, 264, 264, 264, 261, 264, 264, 264, 264, 264, 265, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 261, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 266, 264, 261, 264, 264, 264, 261, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 261, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 267, 264, 261, 268, 268, 268, 261, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 261, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 270, 268, 261, 271, 271, 271, 261, 271, 271, 271, 271, 271, 272, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 261, 271, 261, 271, 271, 271, 261, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 261, 271, 261, 262, 262, 262, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 261, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 273, 262, 261, 274, 274, 274, 261, 274, 274, 274, 274, 274, 275, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 261, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 276, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 277, 274, 274, 274, 274, 274, 274, 278, 274, 261, 274, 274, 274, 261, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 261, 274, 279, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 280, 261, 280, 261, 261, 281, 281, 281, 261, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 261, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 283, 281, 261, 264, 264, 264, 261, 264, 264, 264, 264, 264, 265, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 261, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 267, 264, 261, 284, 284, 284, 261, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 261, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 284, 284, 284, 284, 284, 284, 284, 285, 285, 285, 285, 285, 285, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 285, 285, 285, 285, 285, 285, 284, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 287, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 204, 204, 289, 204, 287, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 204, 204, 204, 204, 286, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 204, 204, 204, 204, 204, 286, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 287, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 239, 239, 289, 239, 287, 239, 286, 286, 286, 286, 286, 286, 290, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 286, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 239, 286, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 287, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 239, 239, 289, 239, 287, 239, 286, 286, 286, 286, 286, 286, 286, 286, 291, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 286, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 239, 286, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 287, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 239, 239, 289, 239, 287, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 292, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 286, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 239, 286, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 287, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 239, 239, 289, 239, 287, 239, 286, 286, 286, 292, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 286, 239, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 239, 239, 239, 239, 239, 286, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 295, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 296, 293, 293, 293, 293, 295, 293, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 293, 293, 293, 293, 294, 293, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 293, 293, 293, 293, 293, 294, 296, 293, 293, 297, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 298, 298, 298, 298, 298, 298, 298, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 298, 298, 298, 298, 299, 298, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 298, 298, 298, 298, 298, 299, 301, 300, 301, 300, 300, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 300, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 300, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 300, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 304, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 304, 308, 307, 309, 307, 310, 307, 311, 307, 313, 312, 314, 312, 315, 312, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 298, 298, 298, 298, 298, 298, 298, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 298, 298, 298, 298, 316, 298, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 298, 298, 298, 298, 298, 316, 317, 304, 318, 319, 318, 318, 318, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 318, 304, 304, 320, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 321, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 322, 304, 323, 324, 323, 323, 323, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 323, 304, 304, 325, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 326, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 327, 304, 329, 330, 329, 329, 329, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 329, 328, 328, 331, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 332, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 328, 333, 328, 335, 336, 335, 335, 335, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 335, 334, 334, 337, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 338, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 339, 334, 335, 336, 335, 335, 335, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 335, 334, 334, 337, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 340, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 339, 334, 335, 341, 335, 335, 335, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 335, 334, 334, 337, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 338, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 339, 334, 342, 304, 319, 304, 344, 345, 344, 344, 344, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 344, 343, 343, 346, 343, 343, 347, 343, 343, 343, 343, 343, 343, 343, 348, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 343, 349, 343, 351, 345, 351, 351, 351, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 351, 350, 350, 346, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 349, 350, 354, 353, 356, 355, 357, 352, 358, 352, 359, 343, 361, 360, 360, 360, 361, 360, 360, 360, 360, 362, 363, 362, 362, 362, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 361, 360, 360, 360, 360, 360, 362, 360, 360, 364, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 365, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 366, 360, 360, 367, 360, 362, 368, 362, 362, 362, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 368, 362, 368, 369, 370, 371, 372, 373, 375, 374, 377, 378, 377, 377, 377, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 376, 377, 376, 363, 374, 379, 374, 381, 380, 380, 380, 381, 380, 380, 380, 380, 382, 383, 382, 382, 382, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 381, 380, 380, 380, 380, 380, 382, 380, 380, 384, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 380, 385, 380, 382, 386, 382, 382, 382, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 386, 382, 386, 388, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 389, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 387, 390, 387, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 391, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 391, 391, 391, 391, 391, 391, 391, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 391, 391, 391, 391, 13, 391, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 391, 391, 391, 391, 391, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 391, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 392, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 392, 392, 392, 392, 392, 392, 392, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 392, 392, 392, 392, 17, 392, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 392, 392, 392, 392, 392, 17, 395, 394, 394, 394, 395, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 395, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 396, 396, 396, 396, 396, 396, 396, 396, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 397, 394, 394, 394, 394, 394, 394, 394, 394, 394, 398, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 399, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 400, 394, 394, 401, 394, 402, 403, 405, 405, 405, 405, 405, 405, 405, 405, 404, 406, 406, 406, 406, 406, 406, 406, 406, 404, 404, 407, 407, 39, 39, 39, 407, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 407, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 408, 39, 409, 410, 411, 411, 39, 39, 39, 411, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 411, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 412, 39, 38, 411, 413, 414, 415, 415, 26, 26, 26, 415, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 415, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 416, 26, 411, 20, 20, 20, 411, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 411, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 417, 20, 407, 26, 26, 26, 407, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 407, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28, 26, 407, 418, 418, 418, 407, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 407, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 419, 418, 420, 421, 421, 418, 418, 418, 421, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 421, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 418, 422, 418, 421, 20, 20, 20, 421, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 421, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 417, 20, 423, 421, 421, 26, 26, 26, 421, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 421, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28, 26, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 424, 424, 424, 424, 424, 424, 424, 425, 425, 425, 425, 425, 425, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 425, 425, 425, 425, 425, 425, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 426, 424, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 424, 424, 424, 424, 424, 424, 424, 427, 427, 427, 427, 427, 427, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 427, 427, 427, 427, 427, 427, 424, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 424, 424, 424, 424, 424, 424, 424, 428, 428, 428, 428, 428, 428, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 428, 428, 428, 428, 428, 428, 424, 429, 429, 429, 429, 429, 429, 429, 429, 429, 429, 424, 424, 424, 424, 424, 424, 424, 429, 429, 429, 429, 429, 429, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 429, 429, 429, 429, 429, 429, 424, 430, 433, 432, 432, 432, 433, 432, 432, 432, 432, 434, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 433, 432, 432, 432, 432, 432, 434, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 435, 435, 435, 435, 435, 435, 435, 435, 435, 435, 432, 432, 432, 432, 432, 432, 432, 435, 435, 435, 435, 435, 435, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 435, 435, 435, 435, 435, 435, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 436, 432, 433, 432, 432, 432, 433, 432, 432, 432, 432, 431, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 433, 432, 432, 432, 432, 432, 431, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 432, 432, 432, 432, 432, 432, 432, 437, 437, 437, 437, 437, 437, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 437, 437, 437, 437, 437, 437, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 432, 438, 432, 431, 433, 437, 437, 437, 433, 437, 437, 437, 437, 431, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 433, 437, 437, 437, 437, 437, 431, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 431, 437, 439, 433, 440, 440, 440, 433, 440, 440, 440, 440, 434, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 434, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 431, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 431, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 431, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 437, 437, 437, 437, 437, 437, 437, 437, 437, 437, 440, 440, 440, 440, 440, 440, 440, 437, 437, 437, 437, 437, 437, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 437, 437, 437, 437, 437, 437, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 440, 440, 440, 440, 440, 440, 440, 442, 442, 442, 442, 442, 442, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 442, 442, 442, 442, 442, 442, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 435, 435, 435, 435, 435, 435, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 444, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 445, 445, 445, 445, 445, 445, 445, 445, 445, 445, 440, 440, 440, 440, 440, 440, 440, 445, 445, 445, 445, 445, 445, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 445, 445, 445, 445, 445, 445, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 440, 440, 440, 440, 440, 440, 440, 446, 446, 446, 446, 446, 446, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 446, 446, 446, 446, 446, 446, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 447, 447, 447, 447, 447, 447, 447, 447, 447, 447, 440, 440, 440, 440, 440, 440, 440, 447, 447, 447, 447, 447, 447, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 447, 447, 447, 447, 447, 447, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 448, 448, 448, 448, 448, 448, 448, 448, 448, 448, 440, 440, 440, 440, 440, 440, 440, 448, 448, 448, 448, 448, 448, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 448, 448, 448, 448, 448, 448, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 441, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 443, 440, 433, 440, 440, 440, 433, 440, 440, 440, 440, 431, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 433, 440, 440, 440, 440, 440, 431, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 449, 449, 449, 449, 449, 449, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 431, 440, 450, 451, 453, 453, 453, 453, 453, 453, 453, 453, 453, 453, 452, 452, 452, 452, 452, 452, 452, 453, 453, 453, 453, 453, 453, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 452, 453, 453, 453, 453, 453, 453, 452, 452, 455, 454, 454, 454, 455, 454, 454, 454, 454, 454, 456, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 455, 454, 454, 454, 454, 454, 454, 454, 454, 457, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 458, 454, 460, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 461, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 462, 459, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 463, 463, 463, 463, 463, 463, 463, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 463, 463, 463, 463, 45, 463, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 463, 463, 463, 463, 463, 45, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 463, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 464, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 464, 464, 464, 464, 464, 464, 464, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 464, 464, 464, 464, 49, 464, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 464, 464, 464, 464, 464, 49, 467, 466, 466, 466, 467, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 467, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 468, 468, 468, 468, 468, 468, 468, 468, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 469, 466, 466, 466, 466, 466, 466, 466, 466, 466, 470, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 471, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 466, 472, 466, 466, 473, 466, 474, 475, 477, 477, 477, 477, 477, 477, 477, 477, 476, 478, 478, 478, 478, 478, 478, 478, 478, 476, 476, 479, 479, 71, 71, 71, 479, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 479, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 480, 71, 481, 482, 483, 483, 71, 71, 71, 483, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 483, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 484, 71, 70, 483, 485, 486, 487, 487, 58, 58, 58, 487, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 487, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 488, 58, 483, 52, 52, 52, 483, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 483, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 489, 52, 479, 58, 58, 58, 479, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 479, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 60, 58, 479, 490, 490, 490, 479, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 479, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 491, 490, 492, 493, 493, 490, 490, 490, 493, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 493, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 494, 490, 493, 52, 52, 52, 493, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 493, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 489, 52, 495, 493, 493, 58, 58, 58, 493, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 493, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 60, 58, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 496, 496, 496, 496, 496, 496, 496, 497, 497, 497, 497, 497, 497, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 497, 497, 497, 497, 497, 497, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 498, 496, 499, 499, 499, 499, 499, 499, 499, 499, 499, 499, 496, 496, 496, 496, 496, 496, 496, 499, 499, 499, 499, 499, 499, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 499, 499, 499, 499, 499, 499, 496, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 496, 496, 496, 496, 496, 496, 496, 500, 500, 500, 500, 500, 500, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 500, 500, 500, 500, 500, 500, 496, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 496, 496, 496, 496, 496, 496, 496, 501, 501, 501, 501, 501, 501, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 496, 501, 501, 501, 501, 501, 501, 496, 502, 505, 504, 504, 504, 505, 504, 504, 504, 504, 506, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 505, 504, 504, 504, 504, 504, 506, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 504, 504, 504, 504, 504, 504, 504, 507, 507, 507, 507, 507, 507, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 507, 507, 507, 507, 507, 507, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 508, 504, 505, 504, 504, 504, 505, 504, 504, 504, 504, 503, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 505, 504, 504, 504, 504, 504, 503, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 504, 504, 504, 504, 504, 504, 504, 509, 509, 509, 509, 509, 509, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 509, 509, 509, 509, 509, 509, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 510, 504, 503, 505, 509, 509, 509, 505, 509, 509, 509, 509, 503, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 505, 509, 509, 509, 509, 509, 503, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 503, 509, 511, 505, 512, 512, 512, 505, 512, 512, 512, 512, 506, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 506, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 503, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 503, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 503, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 512, 512, 512, 512, 512, 512, 512, 509, 509, 509, 509, 509, 509, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 509, 509, 509, 509, 509, 509, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 512, 512, 512, 512, 512, 512, 512, 514, 514, 514, 514, 514, 514, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 514, 514, 514, 514, 514, 514, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 507, 507, 507, 507, 507, 507, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 516, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 512, 512, 512, 512, 512, 512, 512, 517, 517, 517, 517, 517, 517, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 517, 517, 517, 517, 517, 517, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 512, 512, 512, 512, 512, 512, 512, 518, 518, 518, 518, 518, 518, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 518, 518, 518, 518, 518, 518, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 512, 512, 512, 512, 512, 512, 512, 519, 519, 519, 519, 519, 519, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 519, 519, 519, 519, 519, 519, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 512, 512, 512, 512, 512, 512, 512, 520, 520, 520, 520, 520, 520, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 520, 520, 520, 520, 520, 520, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 513, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 515, 512, 505, 512, 512, 512, 505, 512, 512, 512, 512, 503, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 505, 512, 512, 512, 512, 512, 503, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 521, 521, 521, 521, 521, 521, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 503, 512, 522, 523, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 524, 524, 524, 524, 524, 524, 524, 525, 525, 525, 525, 525, 525, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 525, 525, 525, 525, 525, 525, 524, 524, 527, 526, 526, 526, 527, 526, 526, 526, 526, 528, 529, 528, 528, 528, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 527, 526, 526, 526, 526, 526, 528, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 530, 526, 528, 531, 528, 528, 528, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 528, 531, 532, 533, 533, 533, 532, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 532, 533, 535, 534, 534, 534, 535, 534, 534, 534, 534, 534, 536, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 535, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 537, 534, 538, 539, 539, 539, 538, 539, 539, 539, 539, 539, 540, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 538, 539, 542, 541, 541, 541, 542, 541, 541, 541, 541, 541, 543, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 542, 541, 541, 541, 541, 541, 541, 541, 541, 544, 541, 546, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 547, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 548, 545, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 549, 549, 549, 549, 549, 549, 549, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 549, 549, 549, 549, 77, 549, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 549, 549, 549, 549, 549, 77, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 549, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 550, 550, 550, 550, 550, 550, 550, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 550, 550, 550, 550, 81, 550, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 550, 550, 550, 550, 550, 81, 552, 551, 551, 551, 552, 551, 551, 551, 551, 551, 553, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 552, 551, 555, 554, 554, 554, 555, 554, 554, 554, 554, 556, 557, 556, 556, 556, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 555, 554, 554, 554, 554, 554, 556, 554, 554, 558, 554, 556, 559, 556, 556, 556, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 556, 559, 561, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 562, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 563, 560, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 564, 564, 564, 564, 564, 564, 564, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 564, 564, 564, 564, 84, 564, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 564, 564, 564, 564, 564, 84, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 564, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 565, 565, 565, 565, 565, 565, 565, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 565, 565, 565, 565, 88, 565, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 565, 565, 565, 565, 565, 88, 567, 566, 566, 566, 567, 566, 566, 566, 566, 568, 569, 568, 568, 568, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 567, 566, 566, 566, 566, 566, 568, 566, 568, 570, 568, 568, 568, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 568, 570, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 571, 571, 571, 571, 571, 571, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 571, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 573, 573, 573, 573, 573, 573, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 573, 574, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 575, 92, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 576, 576, 576, 576, 576, 576, 576, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 576, 576, 576, 576, 90, 576, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 576, 576, 576, 576, 576, 90, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 576, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 577, 577, 577, 577, 577, 577, 577, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 577, 577, 577, 577, 95, 577, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 577, 577, 577, 577, 577, 95, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 578, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 578, 578, 578, 578, 578, 578, 578, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 578, 578, 578, 578, 97, 578, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 578, 578, 578, 578, 578, 97, 580, 581, 581, 581, 580, 581, 581, 581, 581, 582, 583, 582, 582, 582, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 580, 581, 581, 581, 581, 581, 582, 584, 581, 585, 586, 587, 588, 581, 581, 581, 589, 590, 581, 590, 581, 591, 581, 581, 581, 581, 581, 581, 581, 581, 581, 581, 592, 581, 593, 594, 595, 581, 581, 596, 597, 596, 596, 598, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 599, 600, 581, 591, 601, 591, 602, 603, 604, 605, 606, 607, 579, 579, 608, 579, 579, 579, 609, 610, 611, 579, 579, 612, 613, 614, 615, 579, 616, 579, 617, 579, 581, 618, 581, 590, 581, 579, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 620, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 619, 619, 619, 620, 619, 620, 619, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 619, 619, 619, 619, 579, 619, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 619, 619, 619, 619, 619, 579, 582, 621, 582, 582, 582, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 582, 621, 622, 591, 623, 623, 591, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 623, 591, 623, 624, 625, 626, 627, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 99, 99, 628, 99, 628, 99, 99, 628, 628, 99, 99, 99, 630, 99, 99, 631, 631, 631, 631, 631, 631, 631, 631, 631, 631, 99, 99, 99, 99, 99, 99, 99, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 628, 99, 628, 628, 629, 99, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 628, 628, 628, 99, 628, 629, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 632, 632, 632, 632, 632, 632, 632, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 632, 632, 632, 632, 629, 632, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 629, 632, 632, 632, 632, 632, 629, 631, 631, 631, 631, 631, 631, 631, 631, 631, 631, 632, 633, 623, 591, 623, 591, 623, 591, 623, 635, 634, 591, 636, 623, 591, 623, 637, 591, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 628, 591, 628, 591, 623, 591, 591, 623, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 620, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 619, 619, 619, 620, 619, 620, 619, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 619, 619, 619, 619, 596, 619, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 619, 619, 619, 619, 619, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 639, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 596, 596, 640, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 596, 596, 596, 596, 641, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 642, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 643, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 620, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 620, 638, 620, 638, 596, 596, 596, 642, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 596, 638, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 638, 638, 638, 638, 638, 596, 637, 628, 583, 628, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 645, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 646, 647, 579, 579, 579, 579, 579, 648, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 649, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 650, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 651, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 652, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 653, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 654, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 655, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 656, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 657, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 658, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 659, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 655, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 660, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 659, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 661, 579, 662, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 663, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 664, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 665, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 666, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 667, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 668, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 669, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 670, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 671, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 672, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 673, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 674, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 664, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 675, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 676, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 620, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 677, 677, 677, 620, 677, 620, 677, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 677, 677, 677, 677, 579, 677, 579, 579, 579, 579, 579, 579, 579, 579, 678, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 677, 677, 677, 677, 677, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 679, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 680, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 681, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 682, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 683, 579, 684, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 685, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 657, 579, 579, 579, 686, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 687, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 688, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 673, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 689, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 611, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 671, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 690, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 691, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 692, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 673, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 693, 579, 579, 579, 694, 579, 579, 579, 579, 579, 695, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 695, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 696, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 697, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 698, 699, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 700, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 673, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 701, 579, 579, 702, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 657, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 668, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 703, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 704, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 686, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 705, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 611, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 706, 579, 579, 579, 579, 579, 579, 579, 579, 579, 700, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 668, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 707, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 708, 579, 579, 579, 579, 579, 579, 579, 709, 579, 579, 579, 579, 579, 579, 579, 710, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 686, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 674, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 694, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 711, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 668, 579, 579, 579, 692, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 712, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 713, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 620, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 620, 644, 620, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 579, 644, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 662, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 579, 644, 644, 644, 644, 644, 579, 591, 623, 715, 716, 716, 716, 715, 716, 716, 716, 716, 717, 716, 717, 717, 717, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 715, 716, 716, 716, 716, 716, 717, 716, 716, 718, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 716, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 716, 719, 716, 716, 714, 716, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 714, 716, 716, 716, 716, 716, 714, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 104, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 720, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 105, 720, 720, 720, 720, 104, 720, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 720, 720, 720, 720, 103, 720, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 720, 720, 720, 720, 720, 103, 717, 721, 717, 717, 717, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 721, 717, 721, 722, 723, 724, 725, 726, 720, 727, 729, 730, 730, 730, 729, 730, 730, 730, 730, 731, 732, 731, 731, 731, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 729, 730, 730, 730, 730, 730, 731, 733, 730, 734, 730, 735, 736, 730, 730, 730, 737, 738, 730, 738, 730, 735, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 739, 740, 741, 730, 730, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 743, 744, 730, 735, 728, 735, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 730, 745, 730, 738, 730, 728, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 747, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 746, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 746, 746, 746, 746, 746, 747, 746, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 746, 746, 746, 746, 728, 746, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 728, 746, 746, 746, 746, 746, 728, 749, 748, 750, 731, 751, 731, 731, 731, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 751, 731, 751, 752, 735, 753, 753, 735, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 753, 735, 753, 754, 755, 756, 757, 735, 753, 735, 753, 735, 753, 735, 758, 753, 735, 753, 760, 735, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 735, 759, 735, 753, 735, 735, 753, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 747, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 761, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 761, 761, 761, 761, 761, 747, 761, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 761, 761, 761, 761, 742, 761, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 742, 761, 761, 761, 761, 761, 742, 760, 759, 732, 759, 735, 753, 763, 762, 762, 762, 763, 762, 762, 762, 762, 764, 765, 764, 764, 764, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 763, 762, 762, 762, 762, 762, 764, 762, 762, 766, 762, 113, 767, 762, 768, 762, 769, 113, 144, 770, 146, 113, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 771, 762, 772, 144, 773, 774, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 144, 775, 144, 113, 762, 762, 762, 762, 762, 762, 762, 762, 762, 762, 776, 762, 762, 762, 762, 762, 762, 762, 762, 777, 762, 762, 778, 762, 779, 762, 762, 762, 157, 158, 762, 113, 762, 780, 780, 780, 780, 780, 780, 780, 780, 780, 764, 780, 764, 764, 764, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 764, 780, 780, 780, 780, 139, 140, 780, 141, 780, 142, 143, 144, 145, 146, 139, 780, 780, 780, 780, 780, 780, 780, 780, 780, 780, 147, 780, 148, 144, 149, 150, 780, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 151, 152, 144, 113, 108, 780, 108, 108, 108, 108, 108, 108, 108, 108, 153, 108, 108, 108, 108, 108, 108, 108, 108, 154, 108, 108, 155, 108, 156, 108, 108, 108, 157, 158, 780, 113, 780, 108, 781, 782, 782, 782, 781, 782, 782, 782, 782, 144, 783, 144, 144, 144, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 781, 782, 782, 782, 782, 782, 144, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 782, 144, 782, 144, 783, 144, 144, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 107, 107, 107, 107, 113, 107, 107, 107, 107, 107, 107, 107, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 144, 783, 144, 144, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 784, 144, 783, 144, 144, 144, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 144, 785, 785, 785, 785, 785, 785, 785, 785, 785, 786, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 785, 144, 785, 144, 783, 144, 144, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 144, 144, 107, 787, 781, 144, 781, 789, 788, 791, 792, 791, 791, 791, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 791, 790, 793, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 109, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 781, 781, 781, 781, 109, 781, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 781, 781, 781, 781, 108, 781, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 781, 781, 781, 781, 781, 108, 794, 144, 783, 144, 144, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 113, 781, 795, 796, 797, 798, 799, 800, 144, 783, 144, 144, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 144, 781, 781, 781, 781, 781, 781, 781, 781, 781, 113, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 781, 144, 781, 144, 788, 113, 801, 113, 801, 802, 803, 802, 802, 802, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 790, 802, 790, 804, 801, 805, 805, 805, 805, 805, 805, 805, 805, 805, 116, 805, 116, 116, 116, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 116, 805, 805, 805, 805, 117, 118, 805, 119, 805, 120, 121, 122, 123, 124, 117, 805, 805, 805, 805, 805, 805, 805, 805, 805, 805, 125, 805, 126, 122, 127, 128, 805, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 129, 130, 122, 131, 115, 805, 115, 115, 115, 115, 115, 115, 115, 115, 132, 115, 115, 115, 115, 115, 115, 115, 115, 133, 115, 115, 134, 115, 135, 115, 115, 115, 136, 137, 805, 131, 805, 115, 144, 801, 806, 801, 807, 801, 808, 801, 809, 183, 183, 183, 809, 183, 183, 183, 183, 810, 183, 810, 810, 810, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 809, 183, 183, 183, 183, 183, 810, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 183, 811, 183, 183, 185, 183, 185, 185, 185, 189, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 183, 183, 183, 183, 183, 185, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 812, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 183, 182, 182, 182, 182, 812, 182, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 182, 182, 182, 182, 185, 182, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 182, 182, 182, 182, 182, 185, 813, 813, 813, 813, 813, 813, 813, 813, 813, 186, 813, 186, 186, 186, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 186, 813, 813, 813, 813, 813, 813, 813, 187, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 813, 188, 813, 813, 185, 813, 185, 185, 185, 189, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 813, 813, 813, 813, 813, 185, 814, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 812, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 813, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 183, 813, 813, 813, 813, 812, 813, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 813, 813, 813, 813, 185, 813, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 815, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 813, 813, 813, 813, 813, 185, 190, 813, 817, 816, 816, 816, 817, 816, 816, 816, 816, 818, 816, 818, 818, 818, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 817, 816, 816, 816, 816, 816, 818, 816, 816, 819, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 820, 816, 816, 816, 816, 816, 816, 816, 821, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 816, 822, 816, 818, 823, 818, 818, 818, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 823, 818, 823, 824, 825, 826, 827, 829, 828, 830, 831, 828, 832, 834, 835, 835, 835, 834, 835, 835, 835, 835, 836, 837, 836, 836, 836, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 834, 835, 835, 835, 835, 835, 836, 835, 835, 838, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 835, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 835, 839, 835, 835, 833, 835, 833, 833, 833, 833, 833, 833, 833, 833, 840, 833, 833, 833, 833, 833, 833, 833, 833, 841, 833, 833, 842, 833, 843, 833, 833, 833, 835, 835, 835, 835, 835, 833, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 844, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 844, 844, 844, 844, 844, 844, 844, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 844, 844, 844, 844, 833, 844, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 844, 844, 844, 844, 844, 833, 836, 845, 836, 836, 836, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 845, 836, 845, 846, 847, 848, 849, 850, 852, 851, 853, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 855, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 856, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 857, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 858, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 859, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 855, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 860, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 861, 833, 833, 833, 833, 833, 833, 833, 862, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 863, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 864, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 855, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 865, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 855, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 866, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 867, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 854, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 833, 854, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 859, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 833, 854, 854, 854, 854, 854, 833, 869, 215, 215, 215, 869, 215, 215, 215, 215, 870, 871, 870, 870, 870, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 869, 215, 215, 215, 215, 215, 870, 872, 215, 873, 215, 874, 875, 215, 876, 215, 877, 878, 215, 879, 880, 881, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 882, 215, 883, 884, 885, 886, 215, 887, 888, 887, 887, 889, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 887, 890, 891, 215, 892, 893, 215, 894, 895, 896, 897, 898, 899, 868, 868, 900, 868, 868, 868, 901, 902, 903, 868, 868, 904, 905, 906, 907, 868, 908, 868, 909, 868, 910, 911, 215, 892, 215, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 916, 915, 915, 917, 915, 918, 920, 921, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 922, 919, 924, 923, 925, 926, 927, 870, 928, 870, 870, 870, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 928, 870, 928, 930, 929, 932, 933, 932, 932, 932, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 931, 932, 931, 215, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 215, 934, 935, 936, 937, 938, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 940, 940, 940, 940, 940, 940, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 941, 940, 942, 213, 213, 213, 942, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 942, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 213, 944, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 215, 943, 945, 947, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 946, 215, 946, 215, 204, 216, 217, 216, 216, 216, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 216, 943, 943, 218, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 943, 943, 943, 215, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 220, 943, 233, 234, 233, 233, 233, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 232, 232, 235, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 237, 232, 216, 217, 216, 216, 216, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 216, 943, 943, 218, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 943, 943, 943, 215, 215, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 943, 220, 943, 949, 934, 951, 950, 934, 952, 952, 952, 934, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 952, 934, 952, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 954, 955, 934, 956, 241, 957, 955, 934, 934, 958, 959, 934, 959, 934, 241, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 960, 934, 961, 962, 963, 934, 964, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 965, 934, 934, 241, 953, 241, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 934, 966, 934, 967, 934, 953, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 969, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 968, 968, 968, 970, 968, 969, 968, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 968, 968, 968, 968, 953, 968, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 953, 968, 968, 968, 968, 968, 953, 972, 971, 973, 975, 976, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 974, 977, 974, 979, 980, 978, 981, 982, 983, 984, 241, 968, 968, 985, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 241, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 968, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 968, 968, 968, 968, 968, 968, 968, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 968, 968, 968, 968, 240, 968, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 968, 968, 968, 968, 968, 240, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 968, 986, 968, 241, 968, 241, 968, 241, 987, 968, 241, 968, 241, 968, 241, 241, 968, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 990, 990, 990, 990, 990, 990, 990, 990, 990, 990, 988, 988, 988, 988, 988, 988, 991, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 988, 988, 988, 988, 989, 988, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 989, 988, 988, 988, 988, 988, 989, 993, 993, 993, 993, 993, 993, 993, 993, 993, 993, 992, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 994, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 994, 994, 994, 994, 994, 994, 994, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 994, 994, 994, 994, 995, 994, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 995, 994, 994, 994, 994, 994, 995, 986, 968, 985, 968, 997, 998, 934, 999, 256, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 257, 246, 258, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 257, 247, 257, 260, 215, 934, 892, 215, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 215, 934, 215, 944, 934, 1003, 1002, 1002, 1002, 1003, 1002, 1002, 1002, 1002, 1004, 1005, 1004, 1004, 1004, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1003, 1002, 1002, 1002, 1002, 1002, 1004, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1002, 1007, 1002, 1002, 1006, 1002, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1002, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1008, 1008, 1008, 1008, 1009, 1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1008, 1008, 1008, 1008, 1008, 1009, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1010, 1010, 1010, 1011, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1010, 1010, 1010, 1010, 1011, 1014, 1013, 1013, 1013, 1014, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1014, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1016, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1017, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1018, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1019, 1013, 1013, 1020, 1013, 1021, 1022, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1023, 1023, 1026, 1026, 281, 281, 281, 1026, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 1026, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 1027, 281, 1028, 1029, 1030, 1030, 281, 281, 281, 1030, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 1030, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 282, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 1031, 281, 280, 1030, 1032, 1033, 1034, 1034, 268, 268, 268, 1034, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1034, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1035, 268, 1030, 262, 262, 262, 1030, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1030, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1036, 262, 1026, 268, 268, 268, 1026, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1026, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 270, 268, 1026, 1037, 1037, 1037, 1026, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1026, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1038, 1037, 1039, 1040, 1040, 1037, 1037, 1037, 1040, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1040, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1041, 1037, 1040, 262, 262, 262, 1040, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1040, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 1036, 262, 1042, 1040, 1040, 268, 268, 268, 1040, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 1040, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 269, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 270, 268, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1044, 1044, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1044, 1044, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1045, 1043, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1046, 1046, 1046, 1046, 1046, 1046, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1046, 1046, 1046, 1046, 1046, 1046, 1043, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1047, 1047, 1047, 1047, 1047, 1047, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1047, 1047, 1047, 1047, 1047, 1047, 1043, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1048, 1048, 1048, 1048, 1048, 1048, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1048, 1048, 1048, 1048, 1048, 1048, 1043, 1049, 1052, 1051, 1051, 1051, 1052, 1051, 1051, 1051, 1051, 1053, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1052, 1051, 1051, 1051, 1051, 1051, 1053, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1054, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054, 1054, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1055, 1051, 1052, 1051, 1051, 1051, 1052, 1051, 1051, 1051, 1051, 1050, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1052, 1051, 1051, 1051, 1051, 1051, 1050, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1056, 1056, 1056, 1056, 1056, 1056, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1056, 1056, 1056, 1056, 1056, 1056, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1057, 1051, 1050, 1052, 1056, 1056, 1056, 1052, 1056, 1056, 1056, 1056, 1050, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1052, 1056, 1056, 1056, 1056, 1056, 1050, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1050, 1056, 1058, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1053, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1053, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1050, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1056, 1056, 1056, 1056, 1056, 1056, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1056, 1056, 1056, 1056, 1056, 1056, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1062, 1062, 1062, 1062, 1062, 1062, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1062, 1062, 1062, 1062, 1062, 1062, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1064, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1065, 1065, 1065, 1065, 1065, 1065, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1065, 1065, 1065, 1065, 1065, 1065, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1066, 1066, 1066, 1066, 1066, 1066, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1066, 1066, 1066, 1066, 1066, 1066, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1067, 1067, 1067, 1067, 1067, 1067, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1067, 1067, 1067, 1067, 1067, 1067, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1068, 1068, 1068, 1068, 1068, 1068, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1068, 1068, 1068, 1068, 1068, 1068, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1061, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1050, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1071, 1071, 1071, 1071, 1071, 1071, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1071, 1071, 1071, 1071, 1071, 1071, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1072, 1072, 1072, 1072, 1072, 1072, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1072, 1072, 1072, 1072, 1072, 1072, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1073, 1073, 1073, 1073, 1073, 1073, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1073, 1073, 1073, 1073, 1073, 1073, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1074, 1074, 1074, 1074, 1074, 1074, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1074, 1074, 1074, 1074, 1074, 1074, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1075, 1075, 1075, 1075, 1075, 1075, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1075, 1075, 1075, 1075, 1075, 1075, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1076, 1076, 1076, 1076, 1076, 1076, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1076, 1076, 1076, 1076, 1076, 1076, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1077, 1077, 1077, 1077, 1077, 1077, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1077, 1077, 1077, 1077, 1077, 1077, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1050, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1078, 1078, 1078, 1078, 1078, 1078, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1078, 1078, 1078, 1078, 1078, 1078, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1079, 1079, 1079, 1079, 1079, 1079, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1079, 1079, 1079, 1079, 1079, 1079, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1080, 1080, 1080, 1080, 1080, 1080, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1080, 1080, 1080, 1080, 1080, 1080, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1081, 1081, 1081, 1081, 1081, 1081, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1081, 1081, 1081, 1081, 1081, 1081, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1052, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1052, 1059, 1059, 1059, 1059, 1059, 1070, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1069, 1069, 1069, 1069, 1069, 1069, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1063, 1059, 1082, 1083, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1084, 1084, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 287, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 204, 204, 289, 204, 287, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 204, 204, 204, 204, 286, 204, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 204, 204, 204, 204, 204, 286, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 287, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 934, 934, 289, 934, 287, 934, 286, 286, 286, 286, 1086, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 934, 934, 934, 934, 286, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 934, 934, 934, 934, 934, 286, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 287, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 288, 934, 934, 289, 934, 287, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 1087, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 934, 934, 934, 934, 286, 934, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 934, 934, 934, 934, 934, 286, 1088, 1089, 934, 929, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 1090, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 1091, 1092, 868, 868, 868, 868, 868, 1093, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1094, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 1095, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1096, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 1097, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1098, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1099, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 1100, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 1101, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 1102, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 287, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 204, 204, 289, 204, 287, 204, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 204, 204, 204, 204, 868, 204, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 204, 204, 204, 204, 204, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1103, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1104, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 1100, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1105, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1104, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1106, 868, 1107, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1108, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1109, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1110, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1111, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 1112, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1113, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1114, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1115, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1116, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1117, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1118, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1119, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1109, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1120, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1121, 868, 1122, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1123, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1102, 868, 868, 868, 1120, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1124, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1125, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1118, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 1126, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 903, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1116, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 1127, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1128, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1129, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1130, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1118, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1131, 868, 868, 868, 1132, 868, 868, 868, 868, 868, 1133, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1133, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1134, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1135, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1136, 1137, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 1138, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1139, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1140, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1143, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1144, 1141, 1141, 1145, 1141, 1143, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1141, 1141, 1141, 1141, 1142, 1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1141, 1141, 1141, 1141, 1141, 1142, 920, 1146, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 919, 922, 919, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1147, 868, 868, 1148, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1102, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1113, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1149, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1150, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1120, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1151, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 903, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 1152, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1153, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1113, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1118, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1154, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 1155, 868, 868, 868, 868, 868, 868, 868, 1156, 868, 868, 868, 868, 868, 868, 868, 1157, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1120, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1158, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1159, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1127, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1160, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1127, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 1161, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1113, 868, 868, 868, 1162, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1163, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1127, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 1164, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 1165, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 912, 913, 913, 913, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 913, 287, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 288, 912, 912, 289, 912, 287, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 914, 912, 912, 868, 912, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 1107, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 868, 912, 912, 912, 912, 912, 868, 1166, 215, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 934, 1167, 934, 1169, 1168, 1168, 1168, 1169, 1168, 1168, 1168, 1168, 1170, 1171, 1170, 1170, 1170, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169, 1168, 1168, 1168, 1168, 1168, 1170, 1168, 1168, 1172, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1173, 1168, 1170, 1174, 1170, 1170, 1170, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1170, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1180, 1182, 1184, 1185, 1185, 1185, 1184, 1185, 1185, 1185, 1185, 1186, 1187, 1186, 1186, 1186, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1184, 1185, 1185, 1185, 1185, 1185, 1186, 1185, 1188, 1189, 1185, 1185, 1185, 1188, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1185, 1190, 1185, 1185, 1183, 1185, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1185, 1185, 1185, 1185, 1185, 1183, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 295, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 296, 1191, 1191, 1191, 1191, 295, 1191, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 1191, 1191, 1191, 1191, 294, 1191, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 1191, 1191, 1191, 1191, 1191, 294, 1186, 1192, 1186, 1186, 1186, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1186, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1191, 1199, 1201, 1202, 1202, 1202, 1201, 1202, 1202, 1202, 1202, 1203, 1204, 1203, 1203, 1203, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1201, 1202, 1202, 1202, 1202, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1206, 1211, 1212, 1213, 1209, 1214, 1215, 1216, 1209, 1217, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1226, 1226, 1228, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1229, 1230, 1231, 1209, 1232, 1206, 1233, 1234, 1235, 1236, 1237, 1238, 1200, 1200, 1239, 1200, 1200, 1200, 1240, 1241, 1242, 1200, 1200, 1243, 1244, 1245, 1246, 1200, 1247, 1200, 1248, 1200, 1249, 1250, 1251, 1252, 1202, 1200, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1253, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 304, 304, 304, 304, 304, 1253, 304, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 304, 304, 304, 304, 1200, 304, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 304, 304, 304, 304, 304, 1200, 1255, 1254, 1256, 1203, 1257, 1203, 1203, 1203, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1203, 1257, 1258, 1260, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1260, 1259, 1261, 1262, 1263, 1264, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 299, 299, 1265, 299, 1265, 299, 299, 1265, 1265, 299, 299, 299, 1266, 299, 299, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 299, 299, 299, 299, 299, 299, 299, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 299, 1265, 1265, 316, 299, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 1265, 1265, 299, 1265, 316, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1268, 1268, 1268, 1268, 316, 1268, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1268, 1268, 1268, 1268, 1268, 316, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1268, 1269, 304, 1209, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1271, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1269, 1270, 1272, 1273, 1209, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1269, 1274, 1269, 1275, 1270, 1277, 1276, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 1276, 1279, 1278, 1280, 1278, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1282, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1283, 1281, 1281, 1281, 1281, 1281, 1282, 1281, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 301, 1281, 1285, 1284, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1287, 1284, 1288, 1289, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1290, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1291, 1284, 1284, 1284, 1284, 1284, 1284, 1292, 1284, 1284, 1287, 1284, 1288, 1289, 1284, 1284, 1284, 1293, 1284, 1284, 1284, 1284, 1284, 1290, 1284, 1284, 1294, 1284, 1284, 1284, 1284, 1284, 1291, 1284, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1296, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1297, 1295, 1295, 1295, 1295, 1295, 1296, 1295, 1295, 1295, 1298, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1299, 1295, 1300, 304, 1300, 304, 304, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 304, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1300, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302, 1301, 1304, 1303, 1305, 1307, 1306, 1306, 1306, 1308, 1306, 1309, 1310, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1292, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1293, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1294, 1284, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1312, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1293, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1294, 1284, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1315, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1318, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1320, 1319, 1321, 1323, 1322, 1322, 1322, 1324, 1322, 1326, 1325, 1327, 1328, 1330, 1330, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1331, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1332, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1333, 1329, 1334, 1334, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1335, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1334, 1334, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1318, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1338, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1339, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1340, 1336, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1343, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1344, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1345, 1341, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1348, 1346, 1347, 1347, 1347, 1347, 1347, 1347, 1346, 1346, 1349, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1350, 1346, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1352, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1318, 1313, 1351, 1351, 1351, 1351, 1351, 1351, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1354, 1353, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1357, 1353, 1353, 1353, 1353, 1353, 1356, 1353, 1353, 1353, 1358, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1359, 1353, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1361, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1358, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1359, 1353, 1362, 1313, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1364, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1365, 1313, 1313, 1313, 1313, 1313, 1364, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1318, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1316, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1317, 1313, 1271, 1278, 1209, 1366, 1270, 1260, 1270, 1367, 1368, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1260, 1278, 1260, 1270, 1260, 1209, 1270, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 1265, 1265, 1265, 1265, 1265, 1369, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 1265, 1265, 1265, 316, 1265, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 1265, 1265, 1265, 1265, 1265, 316, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1253, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 304, 304, 304, 304, 1253, 304, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 304, 304, 304, 304, 1226, 304, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 304, 304, 304, 304, 304, 1226, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1373, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1374, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1375, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1376, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1377, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1253, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1370, 1372, 1372, 1372, 1372, 1253, 1372, 1226, 1226, 1226, 1376, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1226, 1372, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1372, 1372, 1372, 1372, 1372, 1226, 1378, 1380, 1379, 1381, 1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1384, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1385, 1386, 1200, 1200, 1200, 1200, 1200, 1387, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1388, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1389, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1390, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1391, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1392, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1393, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1394, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1395, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1396, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1397, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1398, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1399, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1400, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1401, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1402, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1398, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1403, 1200, 1404, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1405, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1406, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1407, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1409, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1410, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1411, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1412, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1413, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1414, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1415, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1416, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1417, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1418, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1419, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1420, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1421, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 318, 319, 318, 318, 318, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 318, 1253, 1422, 320, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1422, 1422, 321, 1422, 1422, 1253, 1422, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1422, 322, 1422, 1422, 1200, 1422, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1422, 1422, 1422, 1422, 1422, 1200, 335, 336, 335, 335, 335, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 335, 334, 334, 337, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 340, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 334, 339, 334, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1424, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1425, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1426, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1253, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1427, 1427, 1427, 1427, 1427, 1253, 1427, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1427, 1427, 1427, 1427, 1200, 1427, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1428, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1427, 1427, 1427, 1427, 1427, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1429, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1430, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1431, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1432, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1433, 1200, 1434, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1435, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1436, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1437, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1438, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1418, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1439, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1242, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1440, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1441, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1408, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1443, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1444, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1445, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1418, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1446, 1200, 1200, 1200, 1447, 1200, 1200, 1200, 1200, 1200, 1448, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1449, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1415, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1450, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1451, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1452, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1453, 1454, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1455, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1456, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1457, 1200, 1200, 1458, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1401, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1459, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1415, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1460, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1461, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1462, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1401, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1463, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1464, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1450, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1465, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1466, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1412, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1441, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1467, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1468, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1469, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1470, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1471, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1407, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1472, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1473, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1474, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1475, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1412, 1200, 1200, 1200, 1476, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1477, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1442, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1478, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1479, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1480, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1253, 1383, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1200, 1383, 1200, 1200, 1200, 1450, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1383, 1383, 1383, 1383, 1383, 1200, 1481, 1269, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1209, 1259, 1482, 1484, 1483, 1484, 1484, 1484, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484, 1483, 1483, 1485, 1483, 1483, 1486, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 348, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1487, 1483, 344, 345, 344, 344, 344, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 344, 1488, 1488, 346, 1488, 1488, 347, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 348, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 349, 1488, 351, 1489, 351, 351, 351, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 351, 1489, 1489, 346, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 349, 1489, 354, 353, 359, 1488, 357, 1488, 1491, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1492, 1490, 1491, 1490, 1491, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1494, 1490, 1491, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1495, 1490, 1491, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1496, 1490, 1498, 1496, 0]];
    $send(self, '_lex_indicies=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_targs");
      return self.$private("_lex_trans_targs", "_lex_trans_targs=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[185, 2, 3, 4, 191, 6, 7, 8, 9, 10, 185, 185, 194, 197, 194, 12, 198, 199, 14, 194, 206, 207, 210, 211, 217, 212, 213, 214, 19, 215, 216, 219, 221, 222, 223, 224, 225, 25, 18, 208, 209, 27, 248, 249, 251, 253, 251, 30, 254, 255, 32, 251, 262, 263, 266, 267, 273, 268, 269, 270, 37, 271, 272, 275, 277, 278, 279, 280, 281, 43, 36, 264, 265, 45, 304, 305, 312, 314, 312, 48, 315, 316, 50, 318, 321, 318, 52, 322, 323, 54, 329, 328, 0, 56, 330, 331, 58, 332, 333, 333, 333, 333, 446, 61, 62, 63, 446, 474, 64, 65, 474, 474, 478, 478, 69, 64, 70, 476, 477, 479, 480, 478, 474, 481, 482, 484, 66, 67, 485, 486, 68, 478, 71, 72, 77, 84, 488, 489, 70, 476, 477, 479, 480, 478, 474, 481, 482, 484, 66, 67, 485, 486, 68, 71, 72, 77, 84, 488, 489, 487, 73, 74, 75, 76, 78, 79, 82, 80, 81, 83, 85, 86, 474, 88, 89, 90, 92, 95, 93, 94, 96, 98, 505, 505, 505, 506, 100, 508, 101, 509, 102, 506, 100, 508, 101, 509, 543, 103, 543, 104, 105, 103, 543, 104, 543, 543, 543, 108, 109, 110, 111, 554, 543, 543, 559, 543, 114, 115, 116, 543, 119, 114, 115, 116, 543, 119, 117, 117, 115, 116, 565, 118, 117, 117, 115, 116, 565, 118, 115, 543, 581, 543, 121, 582, 588, 125, 597, 598, 130, 131, 125, 126, 596, 126, 596, 543, 127, 128, 129, 599, 132, 543, 613, 614, 617, 618, 624, 619, 620, 621, 137, 622, 623, 626, 628, 629, 630, 631, 632, 143, 136, 615, 616, 145, 668, 669, 147, 545, 106, 547, 149, 150, 671, 773, 152, 153, 154, 773, 781, 781, 781, 157, 803, 802, 781, 805, 807, 781, 162, 163, 164, 811, 781, 166, 167, 822, 791, 844, 170, 171, 172, 176, 177, 170, 171, 172, 176, 177, 173, 173, 171, 172, 174, 175, 173, 173, 171, 172, 174, 175, 892, 171, 781, 961, 178, 963, 180, 184, 961, 182, 961, 179, 961, 181, 963, 181, 963, 183, 963, 961, 185, 185, 186, 187, 188, 190, 192, 193, 185, 185, 185, 189, 185, 189, 185, 1, 185, 185, 185, 5, 194, 194, 195, 194, 196, 200, 194, 194, 11, 13, 194, 194, 194, 194, 201, 202, 203, 15, 21, 26, 226, 28, 194, 194, 194, 204, 205, 194, 16, 194, 194, 194, 17, 194, 194, 194, 20, 218, 220, 22, 194, 194, 23, 24, 194, 227, 231, 228, 229, 230, 194, 194, 232, 233, 236, 238, 247, 234, 235, 194, 237, 239, 241, 240, 194, 242, 243, 244, 245, 246, 194, 194, 194, 250, 251, 251, 251, 252, 256, 251, 29, 31, 251, 251, 251, 251, 257, 258, 259, 33, 39, 44, 282, 46, 251, 251, 251, 260, 261, 251, 34, 251, 251, 251, 35, 251, 251, 251, 38, 274, 276, 40, 251, 251, 41, 42, 251, 283, 287, 284, 285, 286, 251, 251, 288, 289, 292, 294, 303, 290, 291, 251, 293, 295, 297, 296, 251, 298, 299, 300, 301, 302, 251, 251, 251, 306, 307, 307, 308, 307, 309, 307, 307, 307, 310, 310, 310, 311, 310, 310, 310, 312, 312, 312, 313, 312, 47, 49, 312, 312, 312, 317, 317, 317, 318, 318, 319, 318, 320, 318, 318, 51, 53, 318, 318, 318, 324, 324, 325, 324, 324, 326, 327, 326, 55, 57, 328, 328, 328, 334, 333, 333, 335, 336, 337, 338, 340, 343, 344, 345, 346, 333, 347, 348, 350, 352, 353, 354, 358, 360, 361, 362, 378, 383, 390, 395, 402, 409, 412, 413, 417, 411, 421, 429, 433, 435, 440, 442, 445, 333, 333, 333, 333, 333, 333, 339, 333, 339, 333, 341, 59, 342, 333, 60, 333, 333, 349, 351, 333, 355, 356, 357, 353, 359, 333, 363, 364, 373, 376, 365, 366, 367, 368, 369, 370, 371, 372, 334, 374, 375, 377, 379, 382, 380, 381, 384, 387, 385, 386, 388, 389, 391, 393, 392, 394, 396, 397, 333, 398, 399, 400, 401, 333, 403, 406, 404, 405, 407, 408, 410, 414, 415, 416, 418, 420, 419, 422, 423, 424, 426, 425, 427, 428, 430, 431, 432, 434, 436, 437, 438, 439, 441, 443, 444, 447, 446, 446, 448, 449, 451, 446, 446, 446, 450, 446, 450, 452, 446, 454, 453, 453, 457, 458, 459, 460, 453, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 453, 455, 453, 456, 453, 453, 453, 453, 453, 461, 453, 461, 466, 453, 468, 453, 474, 474, 475, 490, 491, 477, 493, 494, 481, 495, 496, 497, 498, 499, 501, 502, 503, 504, 474, 474, 474, 474, 474, 474, 478, 483, 474, 474, 474, 474, 474, 474, 474, 474, 474, 492, 474, 492, 474, 474, 474, 474, 500, 474, 87, 91, 97, 505, 507, 510, 99, 505, 505, 506, 511, 511, 512, 513, 515, 517, 518, 511, 511, 514, 511, 514, 511, 516, 511, 511, 511, 520, 519, 519, 521, 522, 523, 525, 527, 528, 533, 540, 519, 519, 519, 519, 524, 519, 524, 519, 526, 519, 519, 520, 529, 530, 531, 532, 534, 535, 538, 536, 537, 539, 541, 542, 544, 543, 552, 553, 555, 556, 558, 560, 561, 562, 564, 566, 567, 569, 570, 595, 601, 602, 603, 671, 672, 673, 674, 675, 563, 677, 694, 699, 706, 711, 713, 719, 722, 723, 727, 721, 731, 742, 746, 749, 757, 761, 764, 765, 543, 103, 104, 543, 106, 546, 543, 543, 548, 550, 551, 543, 549, 543, 543, 543, 543, 543, 107, 543, 543, 543, 543, 543, 557, 543, 557, 543, 543, 112, 543, 543, 113, 543, 543, 563, 543, 568, 543, 543, 543, 571, 580, 543, 120, 583, 584, 585, 543, 586, 122, 589, 590, 123, 593, 594, 543, 572, 574, 543, 573, 543, 543, 575, 578, 579, 543, 576, 577, 543, 543, 543, 543, 543, 543, 587, 543, 581, 591, 592, 543, 591, 543, 581, 591, 124, 600, 543, 543, 543, 604, 543, 543, 543, 605, 607, 543, 606, 543, 606, 543, 608, 609, 610, 133, 139, 144, 633, 146, 543, 543, 543, 611, 612, 543, 134, 543, 543, 543, 135, 543, 543, 543, 138, 625, 627, 140, 543, 543, 141, 142, 543, 634, 638, 635, 636, 637, 543, 543, 639, 640, 643, 654, 667, 641, 642, 543, 644, 645, 646, 648, 647, 543, 649, 650, 651, 652, 653, 655, 662, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 543, 543, 543, 670, 148, 151, 543, 676, 678, 679, 689, 692, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 695, 698, 696, 697, 700, 703, 701, 702, 704, 705, 707, 709, 708, 710, 712, 714, 716, 715, 717, 718, 720, 688, 724, 725, 726, 728, 730, 729, 732, 733, 734, 739, 735, 736, 737, 543, 544, 545, 106, 738, 550, 740, 741, 743, 744, 745, 747, 748, 750, 751, 752, 755, 753, 754, 756, 758, 759, 760, 762, 763, 543, 563, 766, 766, 767, 768, 769, 771, 766, 766, 766, 770, 766, 770, 766, 772, 766, 774, 773, 773, 775, 776, 773, 777, 779, 773, 773, 773, 773, 778, 773, 778, 780, 773, 782, 781, 781, 785, 786, 787, 781, 788, 790, 793, 794, 795, 796, 797, 781, 798, 799, 804, 832, 836, 781, 837, 839, 841, 781, 842, 843, 845, 849, 851, 852, 854, 855, 873, 878, 885, 893, 900, 907, 912, 913, 917, 911, 922, 932, 938, 941, 950, 954, 958, 959, 960, 793, 783, 781, 784, 781, 781, 781, 781, 781, 781, 789, 781, 789, 781, 155, 792, 781, 781, 781, 781, 781, 781, 781, 781, 781, 800, 781, 801, 781, 781, 156, 158, 781, 159, 813, 824, 827, 806, 828, 829, 814, 818, 820, 781, 806, 159, 808, 810, 160, 781, 808, 781, 809, 781, 781, 161, 812, 781, 781, 815, 817, 781, 815, 816, 818, 820, 817, 781, 819, 781, 781, 821, 823, 781, 165, 781, 781, 781, 825, 817, 818, 820, 825, 826, 781, 815, 817, 818, 820, 781, 815, 817, 818, 820, 781, 830, 817, 818, 820, 830, 831, 781, 159, 832, 806, 833, 818, 820, 834, 817, 159, 834, 806, 835, 838, 840, 781, 168, 169, 781, 781, 846, 847, 848, 843, 850, 781, 781, 853, 781, 781, 781, 856, 857, 866, 871, 858, 859, 860, 861, 862, 863, 864, 865, 782, 867, 868, 869, 870, 782, 872, 874, 877, 875, 876, 782, 782, 879, 882, 880, 881, 883, 884, 782, 886, 888, 887, 889, 890, 891, 781, 781, 894, 782, 895, 781, 896, 897, 898, 899, 783, 901, 904, 902, 903, 905, 906, 908, 909, 910, 782, 914, 915, 916, 918, 920, 921, 919, 782, 923, 924, 925, 928, 926, 927, 929, 930, 931, 933, 935, 934, 936, 937, 939, 940, 942, 943, 945, 948, 944, 946, 947, 949, 951, 952, 953, 955, 956, 957, 781, 781, 961, 962, 964, 965, 966, 961, 961, 968, 967, 969, 967, 970, 971, 972, 967, 967]];
    $send(self, '_lex_trans_targs=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_trans_actions");
      return self.$private("_lex_trans_actions", "_lex_trans_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 5, 0, 0, 0, 0, 6, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 9, 0, 10, 0, 0, 0, 0, 11, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 12, 0, 13, 0, 0, 0, 0, 14, 0, 15, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 17, 18, 19, 20, 21, 0, 0, 0, 22, 23, 0, 0, 24, 25, 26, 27, 28, 29, 29, 30, 31, 29, 32, 31, 33, 31, 29, 29, 30, 29, 34, 29, 29, 35, 29, 29, 29, 29, 29, 29, 0, 36, 37, 0, 38, 37, 39, 37, 0, 0, 36, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 43, 44, 45, 0, 0, 0, 45, 28, 46, 29, 29, 29, 46, 47, 0, 48, 0, 28, 29, 49, 29, 50, 51, 52, 0, 0, 0, 0, 0, 53, 54, 0, 55, 0, 28, 0, 56, 0, 29, 57, 29, 58, 29, 59, 60, 61, 60, 62, 60, 0, 63, 64, 63, 65, 63, 66, 67, 0, 68, 0, 0, 0, 0, 69, 69, 0, 0, 70, 70, 71, 0, 28, 72, 0, 0, 0, 69, 0, 73, 0, 7, 0, 8, 0, 7, 0, 0, 0, 0, 8, 7, 0, 8, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 74, 75, 0, 0, 0, 76, 77, 78, 79, 0, 7, 7, 80, 81, 81, 82, 0, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 29, 57, 29, 29, 29, 59, 60, 61, 60, 60, 60, 0, 63, 64, 63, 63, 63, 84, 66, 85, 86, 0, 87, 0, 88, 89, 0, 90, 0, 91, 59, 92, 0, 93, 28, 94, 95, 98, 99, 0, 28, 0, 7, 0, 7, 100, 101, 102, 59, 103, 0, 104, 0, 105, 106, 107, 0, 108, 109, 0, 110, 7, 7, 111, 112, 0, 0, 113, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 118, 119, 120, 0, 0, 121, 0, 122, 123, 124, 0, 125, 126, 127, 0, 7, 0, 0, 128, 129, 0, 28, 130, 0, 0, 0, 0, 0, 131, 132, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 135, 136, 137, 0, 138, 139, 140, 7, 7, 141, 0, 0, 142, 143, 144, 145, 117, 117, 117, 117, 117, 117, 117, 117, 146, 147, 148, 0, 0, 149, 0, 150, 151, 152, 0, 153, 154, 155, 0, 7, 0, 0, 156, 157, 0, 28, 158, 0, 0, 0, 0, 0, 159, 160, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 163, 164, 165, 0, 166, 167, 0, 168, 0, 169, 170, 171, 172, 173, 174, 0, 175, 176, 177, 178, 179, 180, 7, 181, 0, 0, 182, 183, 184, 185, 186, 187, 188, 189, 0, 190, 7, 191, 192, 0, 0, 193, 194, 195, 196, 197, 0, 198, 199, 200, 0, 201, 0, 0, 202, 203, 204, 205, 206, 207, 0, 28, 0, 0, 7, 7, 0, 0, 0, 208, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 211, 212, 213, 214, 215, 59, 216, 0, 217, 0, 0, 0, 218, 0, 219, 220, 0, 0, 221, 0, 0, 0, 222, 0, 223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 226, 227, 0, 0, 0, 228, 229, 230, 59, 231, 0, 28, 232, 0, 233, 234, 0, 28, 0, 0, 235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 237, 0, 238, 239, 240, 241, 242, 59, 243, 0, 0, 244, 0, 245, 246, 247, 248, 28, 0, 27, 0, 0, 27, 0, 0, 0, 0, 0, 0, 7, 7, 7, 249, 250, 251, 252, 253, 254, 255, 0, 256, 257, 258, 259, 260, 261, 262, 263, 264, 59, 265, 0, 266, 267, 268, 269, 270, 271, 0, 0, 0, 272, 7, 7, 0, 273, 274, 275, 276, 277, 0, 0, 0, 0, 0, 278, 279, 59, 280, 0, 281, 28, 282, 283, 284, 285, 286, 287, 0, 28, 0, 0, 0, 0, 0, 0, 288, 289, 290, 291, 59, 292, 0, 293, 28, 294, 295, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 297, 298, 0, 8, 0, 0, 7, 299, 0, 0, 299, 299, 0, 0, 7, 300, 0, 300, 0, 300, 300, 300, 0, 0, 300, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 0, 0, 301, 302, 302, 303, 304, 0, 305, 306, 0, 74, 0, 307, 0, 308, 309, 310, 311, 312, 29, 313, 314, 315, 316, 317, 59, 318, 0, 319, 320, 0, 321, 322, 0, 323, 324, 299, 325, 0, 326, 327, 328, 0, 0, 329, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 331, 0, 0, 332, 0, 333, 334, 0, 0, 0, 335, 0, 0, 336, 337, 338, 339, 340, 341, 0, 342, 343, 343, 0, 344, 0, 345, 346, 346, 0, 0, 347, 348, 349, 0, 350, 351, 352, 0, 7, 353, 354, 355, 0, 356, 117, 117, 117, 117, 117, 117, 117, 117, 357, 358, 359, 0, 0, 360, 0, 361, 362, 363, 0, 364, 365, 366, 0, 7, 0, 0, 367, 368, 0, 28, 369, 0, 0, 0, 0, 0, 370, 371, 0, 0, 0, 0, 0, 0, 0, 372, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 375, 376, 0, 0, 0, 377, 28, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 74, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 378, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 379, 380, 381, 382, 383, 383, 379, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 384, 385, 386, 387, 0, 28, 0, 0, 388, 389, 390, 59, 391, 0, 392, 28, 393, 7, 394, 395, 0, 28, 396, 0, 0, 397, 398, 399, 400, 59, 401, 0, 28, 402, 403, 404, 405, 0, 28, 0, 406, 0, 7, 407, 0, 0, 0, 0, 408, 0, 0, 409, 409, 0, 410, 0, 0, 0, 411, 7, 412, 412, 412, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413, 414, 415, 0, 416, 417, 418, 419, 420, 421, 59, 422, 0, 423, 0, 0, 424, 425, 426, 427, 428, 429, 430, 431, 432, 0, 433, 0, 434, 435, 0, 0, 436, 437, 438, 0, 0, 439, 0, 0, 438, 440, 440, 441, 442, 0, 443, 444, 0, 445, 446, 447, 0, 448, 449, 0, 0, 450, 451, 438, 438, 452, 0, 0, 453, 453, 0, 454, 0, 455, 456, 7, 0, 457, 0, 458, 459, 460, 461, 461, 462, 462, 0, 0, 463, 464, 464, 465, 465, 466, 467, 467, 468, 468, 469, 470, 470, 471, 471, 0, 0, 472, 473, 474, 475, 476, 477, 477, 474, 476, 478, 409, 479, 0, 0, 0, 480, 0, 0, 481, 482, 412, 412, 412, 483, 412, 484, 485, 28, 486, 487, 488, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 489, 0, 0, 0, 0, 483, 0, 0, 0, 0, 0, 490, 491, 0, 0, 0, 0, 0, 0, 492, 0, 0, 0, 0, 0, 491, 493, 494, 0, 495, 0, 496, 0, 0, 0, 0, 497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0, 0, 0, 497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 499, 500, 501, 502, 502, 88, 502, 503, 504, 0, 505, 0, 506, 0, 0, 0, 507, 508]];
    $send(self, '_lex_trans_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_to_state_actions");
      return self.$private("_lex_to_state_actions", "_lex_to_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer
    $send(self, '_lex_to_state_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_from_state_actions");
      return self.$private("_lex_from_state_actions", "_lex_from_state_actions=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 97, 0, 97, 0, 0, 0, 0, 97, 97, 0, 0, 0, 0, 0, 97, 0, 97, 0, 97, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0]];
    $send(self, '_lex_from_state_actions=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      self.$attr_accessor("_lex_eof_trans");
      return self.$private("_lex_eof_trans", "_lex_eof_trans=");
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 13, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 45, 45, 45, 45, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 77, 77, 77, 77, 84, 84, 84, 84, 0, 0, 0, 0, 99, 101, 103, 103, 103, 108, 108, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 183, 185, 185, 185, 197, 197, 197, 205, 207, 207, 207, 207, 207, 213, 205, 205, 205, 205, 205, 205, 205, 240, 240, 240, 240, 240, 240, 205, 256, 205, 256, 240, 240, 205, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 205, 240, 240, 240, 240, 294, 294, 294, 299, 301, 301, 301, 305, 305, 308, 308, 308, 308, 313, 313, 313, 299, 305, 305, 305, 305, 305, 305, 305, 305, 305, 344, 351, 353, 353, 353, 353, 344, 0, 369, 370, 371, 373, 375, 377, 375, 375, 0, 387, 388, 392, 392, 393, 394, 403, 404, 405, 405, 405, 408, 408, 410, 411, 412, 412, 412, 414, 415, 416, 416, 412, 408, 408, 421, 422, 422, 422, 422, 422, 425, 425, 425, 425, 431, 432, 432, 432, 432, 440, 432, 432, 432, 432, 445, 432, 432, 432, 432, 432, 432, 451, 452, 453, 453, 0, 460, 464, 464, 465, 466, 475, 476, 477, 477, 477, 480, 480, 482, 483, 484, 484, 484, 486, 487, 488, 488, 484, 480, 480, 493, 494, 494, 494, 494, 494, 497, 497, 497, 497, 503, 504, 504, 504, 504, 512, 504, 504, 504, 504, 517, 504, 504, 504, 504, 504, 504, 523, 524, 525, 525, 0, 532, 533, 0, 539, 0, 546, 550, 550, 551, 0, 0, 560, 561, 565, 565, 566, 0, 571, 0, 574, 0, 577, 577, 578, 579, 0, 620, 622, 623, 624, 625, 627, 629, 633, 633, 624, 624, 624, 624, 635, 624, 624, 629, 624, 624, 620, 639, 639, 639, 639, 639, 639, 629, 629, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 678, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 645, 624, 0, 721, 722, 723, 725, 721, 728, 0, 747, 749, 751, 752, 753, 754, 755, 757, 754, 754, 754, 754, 754, 760, 754, 754, 762, 760, 760, 754, 0, 781, 782, 108, 108, 785, 786, 108, 782, 782, 789, 791, 794, 782, 795, 782, 796, 797, 799, 801, 782, 789, 802, 802, 791, 802, 806, 802, 802, 802, 802, 0, 183, 814, 815, 814, 814, 0, 824, 825, 827, 829, 831, 829, 833, 0, 845, 846, 847, 848, 850, 852, 854, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 855, 0, 913, 916, 919, 920, 924, 926, 927, 928, 929, 930, 932, 935, 936, 938, 940, 943, 944, 946, 947, 205, 944, 949, 944, 935, 951, 935, 935, 969, 972, 974, 975, 979, 982, 983, 984, 985, 969, 969, 969, 969, 969, 969, 969, 969, 969, 969, 989, 993, 995, 969, 969, 935, 1000, 1001, 1001, 1001, 935, 935, 935, 1002, 1009, 1009, 1011, 1013, 1022, 1023, 1024, 1024, 1024, 1027, 1027, 1029, 1030, 1031, 1031, 1031, 1033, 1034, 1035, 1035, 1031, 1027, 1027, 1040, 1041, 1041, 1041, 1041, 1041, 1044, 1044, 1044, 1044, 1050, 1051, 1051, 1051, 1051, 1059, 1051, 1051, 1051, 1051, 1065, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1083, 1084, 1085, 1085, 205, 935, 935, 1089, 935, 930, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 205, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 1142, 920, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 913, 1167, 935, 0, 1175, 1176, 1177, 1179, 1181, 1183, 0, 1192, 1193, 1194, 1195, 1197, 1192, 1200, 0, 305, 1255, 1257, 1258, 1259, 1260, 1262, 1264, 1266, 1269, 1269, 305, 1271, 1273, 1274, 1275, 1271, 1277, 1279, 1279, 1282, 1282, 1285, 1296, 305, 1302, 1304, 1306, 1307, 1310, 1311, 1285, 1285, 1314, 1314, 1314, 1320, 1322, 1323, 1326, 1328, 1329, 1330, 1314, 1314, 1337, 1342, 1347, 1314, 1314, 1354, 1354, 1314, 1314, 1279, 1271, 1271, 1279, 1271, 1271, 1266, 305, 1372, 1373, 1373, 1373, 1373, 1373, 1373, 1379, 1266, 1382, 1383, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1423, 1424, 1384, 1384, 1428, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1482, 1260, 1483, 0, 1489, 1490, 1489, 1489, 1489, 0, 1494, 1494, 1494, 1494, 1498]];
    $send(self, '_lex_eof_trans=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_start")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [185];
    $send(self, 'lex_start=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_error")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [0];
    $send(self, 'lex_error=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [194];
    $send(self, 'lex_en_interp_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [251];
    $send(self, 'lex_en_interp_string=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [307];
    $send(self, 'lex_en_plain_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_string")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [310];
    $send(self, 'lex_en_plain_string=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [312];
    $send(self, 'lex_en_interp_backslash_delimited=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_backslash_delimited")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [317];
    $send(self, 'lex_en_plain_backslash_delimited=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_interp_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [318];
    $send(self, 'lex_en_interp_backslash_delimited_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_plain_backslash_delimited_words")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [324];
    $send(self, 'lex_en_plain_backslash_delimited_words=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_regexp_modifiers")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [326];
    $send(self, 'lex_en_regexp_modifiers=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_variable")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [328];
    $send(self, 'lex_en_expr_variable=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_fname")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [333];
    $send(self, 'lex_en_expr_fname=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_endfn")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [446];
    $send(self, 'lex_en_expr_endfn=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [453];
    $send(self, 'lex_en_expr_dot=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_arg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [474];
    $send(self, 'lex_en_expr_arg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_cmdarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [505];
    $send(self, 'lex_en_expr_cmdarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_endarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [511];
    $send(self, 'lex_en_expr_endarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_mid")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [519];
    $send(self, 'lex_en_expr_mid=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_beg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [543];
    $send(self, 'lex_en_expr_beg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_labelarg")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [766];
    $send(self, 'lex_en_expr_labelarg=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_value")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [773];
    $send(self, 'lex_en_expr_value=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_expr_end")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [781];
    $send(self, 'lex_en_expr_end=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_leading_dot")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [961];
    $send(self, 'lex_en_leading_dot=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_line_comment")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [967];
    $send(self, 'lex_en_line_comment=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("lex_en_line_begin")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = [185];
    $send(self, 'lex_en_line_begin=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.const_set($nesting[0], 'ESCAPES', $hash("a".$ord(), "\u0007", "b".$ord(), "\b", "e".$ord(), "\u001b", "f".$ord(), "\f", "n".$ord(), "\n", "r".$ord(), "\r", "s".$ord(), " ", "t".$ord(), "\t", "v".$ord(), "\v", "\\".$ord(), "\\").$freeze());
    Opal.const_set($nesting[0], 'REGEXP_META_CHARACTERS', $send($$($nesting, 'Regexp'), 'union', Opal.to_a("\\$()*+.<>?[]^{|}".$chars())).$freeze());
    self.$attr_reader("source_buffer");
    self.$attr_accessor("diagnostics");
    self.$attr_accessor("static_env");
    self.$attr_accessor("force_utf32");
    self.$attr_accessor("cond", "cmdarg", "in_kwarg", "context", "command_start");
    self.$attr_accessor("tokens", "comments");
    self.$attr_reader("paren_nest", "cmdarg_stack", "cond_stack", "lambda_stack");
    
    Opal.def(self, '$initialize', $Lexer_initialize$1 = function $$initialize(version) {
      var self = this;

      
      self.version = version;
      self.static_env = nil;
      self.context = nil;
      self.tokens = nil;
      self.comments = nil;
      return self.$reset();
    }, $Lexer_initialize$1.$$arity = 1);
    
    Opal.def(self, '$reset', $Lexer_reset$2 = function $$reset(reset_state) {
      var self = this;

      
      
      if (reset_state == null) {
        reset_state = true;
      };
      if ($truthy(reset_state)) {
        
        self.cs = self.$class().$lex_en_line_begin();
        self.cond = $$($nesting, 'StackState').$new("cond");
        self.cmdarg = $$($nesting, 'StackState').$new("cmdarg");
        self.cond_stack = [];
        self.cmdarg_stack = [];};
      self.force_utf32 = false;
      self.source_pts = nil;
      self.p = 0;
      self.ts = nil;
      self.te = nil;
      self.act = 0;
      self.stack = [];
      self.top = 0;
      self.token_queue = [];
      self.literal_stack = [];
      self.eq_begin_s = nil;
      self.sharp_s = nil;
      self.newline_s = nil;
      self.num_base = nil;
      self.num_digits_s = nil;
      self.num_suffix_s = nil;
      self.num_xfrm = nil;
      self.escape_s = nil;
      self.escape = nil;
      self.herebody_s = nil;
      self.paren_nest = 0;
      self.lambda_stack = [];
      self.dedent_level = nil;
      self.command_start = true;
      self.in_kwarg = false;
      return (self.cs_before_block_comment = self.$class().$lex_en_line_begin());
    }, $Lexer_reset$2.$$arity = -1);
    
    Opal.def(self, '$source_buffer=', $Lexer_source_buffer$eq$3 = function(source_buffer) {
      var self = this, source = nil;

      
      self.source_buffer = source_buffer;
      if ($truthy(self.source_buffer)) {
        
        source = self.source_buffer.$source();
        if (source.$encoding()['$==']($$$($$($nesting, 'Encoding'), 'UTF_8'))) {
          self.source_pts = source.$unpack("U*")
        } else {
          self.source_pts = source.$unpack("C*")
        };
        if (self.source_pts['$[]'](0)['$=='](65279)) {
          return (self.p = 1)
        } else {
          return nil
        };
      } else {
        return (self.source_pts = nil)
      };
    }, $Lexer_source_buffer$eq$3.$$arity = 1);
    
    Opal.def(self, '$encoding', $Lexer_encoding$4 = function $$encoding() {
      var self = this;

      return self.source_buffer.$source().$encoding()
    }, $Lexer_encoding$4.$$arity = 0);
    Opal.const_set($nesting[0], 'LEX_STATES', $hash2(["line_begin", "expr_dot", "expr_fname", "expr_value", "expr_beg", "expr_mid", "expr_arg", "expr_cmdarg", "expr_end", "expr_endarg", "expr_endfn", "expr_labelarg", "interp_string", "interp_words", "plain_string", "plain_words"], {"line_begin": self.$lex_en_line_begin(), "expr_dot": self.$lex_en_expr_dot(), "expr_fname": self.$lex_en_expr_fname(), "expr_value": self.$lex_en_expr_value(), "expr_beg": self.$lex_en_expr_beg(), "expr_mid": self.$lex_en_expr_mid(), "expr_arg": self.$lex_en_expr_arg(), "expr_cmdarg": self.$lex_en_expr_cmdarg(), "expr_end": self.$lex_en_expr_end(), "expr_endarg": self.$lex_en_expr_endarg(), "expr_endfn": self.$lex_en_expr_endfn(), "expr_labelarg": self.$lex_en_expr_labelarg(), "interp_string": self.$lex_en_interp_string(), "interp_words": self.$lex_en_interp_words(), "plain_string": self.$lex_en_plain_string(), "plain_words": self.$lex_en_plain_string()}));
    
    Opal.def(self, '$state', $Lexer_state$5 = function $$state() {
      var self = this;

      return $$($nesting, 'LEX_STATES').$invert().$fetch(self.cs, self.cs)
    }, $Lexer_state$5.$$arity = 0);
    
    Opal.def(self, '$state=', $Lexer_state$eq$6 = function(state) {
      var self = this;

      return (self.cs = $$($nesting, 'LEX_STATES').$fetch(state))
    }, $Lexer_state$eq$6.$$arity = 1);
    
    Opal.def(self, '$push_cmdarg', $Lexer_push_cmdarg$7 = function $$push_cmdarg() {
      var self = this;

      
      self.cmdarg_stack.$push(self.cmdarg);
      return (self.cmdarg = $$($nesting, 'StackState').$new("" + "cmdarg." + (self.cmdarg_stack.$count())));
    }, $Lexer_push_cmdarg$7.$$arity = 0);
    
    Opal.def(self, '$pop_cmdarg', $Lexer_pop_cmdarg$8 = function $$pop_cmdarg() {
      var self = this;

      return (self.cmdarg = self.cmdarg_stack.$pop())
    }, $Lexer_pop_cmdarg$8.$$arity = 0);
    
    Opal.def(self, '$push_cond', $Lexer_push_cond$9 = function $$push_cond() {
      var self = this;

      
      self.cond_stack.$push(self.cond);
      return (self.cond = $$($nesting, 'StackState').$new("" + "cond." + (self.cond_stack.$count())));
    }, $Lexer_push_cond$9.$$arity = 0);
    
    Opal.def(self, '$pop_cond', $Lexer_pop_cond$10 = function $$pop_cond() {
      var self = this;

      return (self.cond = self.cond_stack.$pop())
    }, $Lexer_pop_cond$10.$$arity = 0);
    
    Opal.def(self, '$dedent_level', $Lexer_dedent_level$11 = function $$dedent_level() {
      var $a, self = this, dedent_level = nil;

      
      $a = [self.dedent_level, nil], (dedent_level = $a[0]), (self.dedent_level = $a[1]), $a;
      return dedent_level;
    }, $Lexer_dedent_level$11.$$arity = 0);
    
    Opal.def(self, '$advance', $Lexer_advance$12 = function $$advance() {
      var $a, $b, $$13, $$14, $$15, $$16, $$17, $$18, $$19, $$20, $$21, $$22, $$23, $$24, $$25, $$26, $$27, $$28, $$29, $$30, $$31, $$32, $$33, $$34, $$35, $$36, $$37, $$38, $$39, $$40, $$41, self = this, klass = nil, _lex_trans_keys = nil, _lex_key_spans = nil, _lex_index_offsets = nil, _lex_indicies = nil, _lex_trans_targs = nil, _lex_trans_actions = nil, _lex_to_state_actions = nil, _lex_from_state_actions = nil, _lex_eof_trans = nil, pe = nil, p = nil, eof = nil, cmd_state = nil, testEof = nil, _slen = nil, _trans = nil, _keys = nil, _inds = nil, _acts = nil, _nacts = nil, _goto_level = nil, _resume = nil, _eof_trans = nil, _again = nil, _test_eof = nil, _out = nil, $case = nil, _wide = nil, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil, tm = nil, heredoc_e = nil, diag_msg = nil, ident_tok = nil, ident_ts = nil, ident_te = nil, current_literal = nil, $writer = nil, line = nil, $ret_or_4 = nil, string = nil, $ret_or_5 = nil, lookahead = nil, $ret_or_6 = nil, token = nil, message = nil, $ret_or_7 = nil, $ret_or_8 = nil, escaped_char = nil, $ret_or_9 = nil, $ret_or_10 = nil, $ret_or_11 = nil, $ret_or_12 = nil, $ret_or_13 = nil, $ret_or_14 = nil, $ret_or_15 = nil, $ret_or_16 = nil, $ret_or_17 = nil, $ret_or_18 = nil, $ret_or_19 = nil, $ret_or_20 = nil, $ret_or_21 = nil, $ret_or_22 = nil, $ret_or_23 = nil, $ret_or_24 = nil, $ret_or_25 = nil, $ret_or_26 = nil, $ret_or_27 = nil, $ret_or_28 = nil, $ret_or_29 = nil, $ret_or_30 = nil, $ret_or_31 = nil, $ret_or_32 = nil, $ret_or_33 = nil, $ret_or_34 = nil, $ret_or_35 = nil, $ret_or_36 = nil, $ret_or_37 = nil, $ret_or_38 = nil, $ret_or_39 = nil, $ret_or_40 = nil, $ret_or_41 = nil, $ret_or_42 = nil, $ret_or_43 = nil, $ret_or_44 = nil, $ret_or_45 = nil, $ret_or_46 = nil, $ret_or_47 = nil, $ret_or_48 = nil, $ret_or_49 = nil, $ret_or_50 = nil, $ret_or_51 = nil, $ret_or_52 = nil, $ret_or_53 = nil, $ret_or_54 = nil, $ret_or_55 = nil, unknown_options = nil, type = nil, delimiter = nil, escape = nil, ident = nil, $ret_or_56 = nil, $ret_or_57 = nil, $ret_or_58 = nil, $ret_or_59 = nil, $ret_or_60 = nil, value = nil, $ret_or_61 = nil, $ret_or_62 = nil, $ret_or_63 = nil, $ret_or_64 = nil, digits = nil, $ret_or_65 = nil, $ret_or_66 = nil, $ret_or_67 = nil, invalid_idx = nil, invalid_s = nil, $ret_or_68 = nil, $ret_or_69 = nil, $ret_or_70 = nil, $ret_or_71 = nil, $ret_or_72 = nil, $ret_or_73 = nil, $ret_or_74 = nil, $ret_or_75 = nil, $ret_or_76 = nil, $ret_or_77 = nil, $ret_or_78 = nil, $ret_or_79 = nil, $ret_or_80 = nil, $ret_or_81 = nil, $ret_or_82 = nil, $ret_or_83 = nil, $ret_or_84 = nil, $ret_or_85 = nil, $ret_or_86 = nil, $ret_or_87 = nil, $ret_or_88 = nil, $ret_or_89 = nil, $ret_or_90 = nil, $ret_or_91 = nil, $ret_or_92 = nil, $ret_or_93 = nil, $ret_or_94 = nil, $ret_or_95 = nil, $ret_or_96 = nil, $ret_or_97 = nil, $ret_or_98 = nil, $ret_or_99 = nil, codepoints = nil, codepoint_s = nil, $ret_or_100 = nil, spaces_p = nil, $ret_or_101 = nil, $ret_or_102 = nil, $ret_or_103 = nil, $ret_or_104 = nil, $ret_or_105 = nil, $ret_or_106 = nil, $ret_or_107 = nil, $ret_or_108 = nil, $ret_or_109 = nil, $ret_or_110 = nil, $ret_or_111 = nil, $ret_or_112 = nil, $ret_or_113 = nil, $ret_or_114 = nil, codepoint = nil, $ret_or_115 = nil, $ret_or_116 = nil, $ret_or_117 = nil, $ret_or_118 = nil, $ret_or_119 = nil, $ret_or_120 = nil, $ret_or_121 = nil, $ret_or_122 = nil, $ret_or_123 = nil, $ret_or_124 = nil, $ret_or_125 = nil, $ret_or_126 = nil, $ret_or_127 = nil, $ret_or_128 = nil, $ret_or_129 = nil, $ret_or_130 = nil, $ret_or_131 = nil, $ret_or_132 = nil, $ret_or_133 = nil, $ret_or_134 = nil, $ret_or_135 = nil, $ret_or_136 = nil, $ret_or_137 = nil, $ret_or_138 = nil, $ret_or_139 = nil, $ret_or_140 = nil, $ret_or_141 = nil, $ret_or_142 = nil, $ret_or_143 = nil, $ret_or_144 = nil, $ret_or_145 = nil, $ret_or_146 = nil, $ret_or_147 = nil, $ret_or_148 = nil, $ret_or_149 = nil, $ret_or_150 = nil, $ret_or_151 = nil, $ret_or_152 = nil, $ret_or_153 = nil, $ret_or_154 = nil, $ret_or_155 = nil, $ret_or_156 = nil, $ret_or_157 = nil, $ret_or_158 = nil, $ret_or_159 = nil, $ret_or_160 = nil, $ret_or_161 = nil, $ret_or_162 = nil, $ret_or_163 = nil, $ret_or_164 = nil, $ret_or_165 = nil, $ret_or_166 = nil, $ret_or_167 = nil, $ret_or_168 = nil, $ret_or_169 = nil, $ret_or_170 = nil, $ret_or_171 = nil, $ret_or_172 = nil, $ret_or_173 = nil, $ret_or_174 = nil, $ret_or_175 = nil, $ret_or_176 = nil, $ret_or_177 = nil, $ret_or_178 = nil, $ret_or_179 = nil, $ret_or_180 = nil, $ret_or_181 = nil, $ret_or_182 = nil, $ret_or_183 = nil, $ret_or_184 = nil, $ret_or_185 = nil, $ret_or_186 = nil, $ret_or_187 = nil, $ret_or_188 = nil, $ret_or_189 = nil, $ret_or_190 = nil, $ret_or_191 = nil, $ret_or_192 = nil, $ret_or_193 = nil, $ret_or_194 = nil, $ret_or_195 = nil, $ret_or_196 = nil, $ret_or_197 = nil, $ret_or_198 = nil, $ret_or_199 = nil, $ret_or_200 = nil, $ret_or_201 = nil, $ret_or_202 = nil, $ret_or_203 = nil, $ret_or_204 = nil, $ret_or_205 = nil, $ret_or_206 = nil, $ret_or_207 = nil, $ret_or_208 = nil, $ret_or_209 = nil, $ret_or_210 = nil, $ret_or_211 = nil, $ret_or_212 = nil, $ret_or_213 = nil, $ret_or_214 = nil, $ret_or_215 = nil, $ret_or_216 = nil, $ret_or_217 = nil, $ret_or_218 = nil, $ret_or_219 = nil, $ret_or_220 = nil, $ret_or_221 = nil, $ret_or_222 = nil, $ret_or_223 = nil, $ret_or_224 = nil, $ret_or_225 = nil, $ret_or_226 = nil, $ret_or_227 = nil, $ret_or_228 = nil, $ret_or_229 = nil, $ret_or_230 = nil, $ret_or_231 = nil, $ret_or_232 = nil, $ret_or_233 = nil, new_herebody_s = nil, indent = nil, $ret_or_234 = nil, dedent_body = nil, $ret_or_235 = nil, $ret_or_236 = nil, $ret_or_237 = nil, $ret_or_238 = nil, $ret_or_239 = nil, $ret_or_240 = nil, $ret_or_241 = nil, $ret_or_242 = nil, $ret_or_243 = nil, $ret_or_244 = nil, $ret_or_245 = nil, $ret_or_246 = nil, $ret_or_247 = nil, $ret_or_248 = nil, $ret_or_249 = nil, $ret_or_250 = nil, $ret_or_251 = nil, $ret_or_252 = nil, $ret_or_253 = nil, $ret_or_254 = nil, $ret_or_255 = nil, $ret_or_256 = nil, $ret_or_257 = nil, $ret_or_258 = nil, $ret_or_259 = nil, $ret_or_260 = nil, $ret_or_261 = nil, $ret_or_262 = nil, $ret_or_263 = nil, $ret_or_264 = nil, $ret_or_265 = nil, $ret_or_266 = nil, $ret_or_267 = nil, $ret_or_268 = nil, $ret_or_269 = nil, $ret_or_270 = nil, $ret_or_271 = nil, $ret_or_272 = nil, $ret_or_273 = nil, $ret_or_274 = nil, $ret_or_275 = nil, $ret_or_276 = nil, $ret_or_277 = nil, $ret_or_278 = nil, $ret_or_279 = nil, $ret_or_280 = nil, $ret_or_281 = nil, $ret_or_282 = nil, $ret_or_283 = nil, $ret_or_284 = nil, $ret_or_285 = nil, $ret_or_286 = nil, $ret_or_287 = nil, $ret_or_288 = nil, $ret_or_289 = nil, $ret_or_290 = nil, $ret_or_291 = nil, $ret_or_292 = nil, $ret_or_293 = nil, $ret_or_294 = nil, $ret_or_295 = nil, $ret_or_296 = nil, $ret_or_297 = nil, $ret_or_298 = nil, $ret_or_299 = nil, $ret_or_300 = nil, $ret_or_301 = nil, $ret_or_302 = nil, $ret_or_303 = nil, $ret_or_304 = nil, $ret_or_305 = nil, $ret_or_306 = nil, $ret_or_307 = nil, $ret_or_308 = nil, $ret_or_309 = nil, $ret_or_310 = nil, $ret_or_311 = nil, $ret_or_312 = nil, $ret_or_313 = nil, $ret_or_314 = nil, $ret_or_315 = nil, $ret_or_316 = nil, $ret_or_317 = nil, $ret_or_318 = nil, $ret_or_319 = nil, $ret_or_320 = nil, $ret_or_321 = nil, $ret_or_322 = nil, $ret_or_323 = nil, $ret_or_324 = nil, $ret_or_325 = nil, $ret_or_326 = nil, $ret_or_327 = nil, $ret_or_328 = nil, $ret_or_329 = nil, $ret_or_330 = nil, $ret_or_331 = nil, $ret_or_332 = nil, $ret_or_333 = nil, $ret_or_334 = nil, $ret_or_335 = nil, $ret_or_336 = nil, $ret_or_337 = nil, $ret_or_338 = nil, $ret_or_339 = nil, $ret_or_340 = nil, $ret_or_341 = nil, $ret_or_342 = nil, $ret_or_343 = nil, $ret_or_344 = nil, $ret_or_345 = nil, $ret_or_346 = nil, $ret_or_347 = nil, $ret_or_348 = nil, $ret_or_349 = nil, $ret_or_350 = nil, $ret_or_351 = nil, $ret_or_352 = nil, $ret_or_353 = nil, $ret_or_354 = nil, $ret_or_355 = nil, $ret_or_356 = nil, $ret_or_357 = nil, $ret_or_358 = nil, $ret_or_359 = nil;

      
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()};
      klass = self.$class();
      _lex_trans_keys = klass.$send("_lex_trans_keys");
      _lex_key_spans = klass.$send("_lex_key_spans");
      _lex_index_offsets = klass.$send("_lex_index_offsets");
      _lex_indicies = klass.$send("_lex_indicies");
      _lex_trans_targs = klass.$send("_lex_trans_targs");
      _lex_trans_actions = klass.$send("_lex_trans_actions");
      _lex_to_state_actions = klass.$send("_lex_to_state_actions");
      _lex_from_state_actions = klass.$send("_lex_from_state_actions");
      _lex_eof_trans = klass.$send("_lex_eof_trans");
      pe = $rb_plus(self.source_pts.$size(), 2);
      $a = [self.p, pe], (p = $a[0]), (eof = $a[1]), $a;
      cmd_state = self.command_start;
      self.command_start = false;
      
      testEof = false;
      $b = nil, $a = Opal.to_ary($b), (_slen = ($a[0] == null ? nil : $a[0])), (_trans = ($a[1] == null ? nil : $a[1])), (_keys = ($a[2] == null ? nil : $a[2])), (_inds = ($a[3] == null ? nil : $a[3])), (_acts = ($a[4] == null ? nil : $a[4])), (_nacts = ($a[5] == null ? nil : $a[5])), $b;
      _goto_level = 0;
      _resume = 10;
      _eof_trans = 15;
      _again = 20;
      _test_eof = 30;
      _out = 40;
      while ($truthy(true)) {
        
        if ($truthy($rb_le(_goto_level, 0))) {
          
          if (p['$=='](pe)) {
            
            _goto_level = _test_eof;
            continue;;};
          if (self.cs['$=='](0)) {
            
            _goto_level = _out;
            continue;;};};
        if ($truthy($rb_le(_goto_level, _resume))) {
          
          $case = _lex_from_state_actions['$[]'](self.cs);
          if ((97)['$===']($case)) {
          self.ts = p;};
          _keys = self.cs['$<<'](1);
          _inds = _lex_index_offsets['$[]'](self.cs);
          _slen = _lex_key_spans['$[]'](self.cs);
          _wide = (function() {if ($truthy(($ret_or_1 = self.source_pts['$[]'](p)))) {
            return $ret_or_1
          } else {
            return 0
          }; return nil; })();
          _trans = (function() {if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = $rb_gt(_slen, 0)))) {
            return $rb_le(_lex_trans_keys['$[]'](_keys), _wide)
          } else {
            return $ret_or_3
          }; return nil; })()))) {
            return $rb_le(_wide, _lex_trans_keys['$[]']($rb_plus(_keys, 1)))
          } else {
            return $ret_or_2
          }; return nil; })())) {
            return _lex_indicies['$[]']($rb_minus($rb_plus(_inds, _wide), _lex_trans_keys['$[]'](_keys)))
          } else {
            return _lex_indicies['$[]']($rb_plus(_inds, _slen))
          }; return nil; })();};
        if ($truthy($rb_le(_goto_level, _eof_trans))) {
          
          self.cs = _lex_trans_targs['$[]'](_trans);
          if ($truthy(_lex_trans_actions['$[]'](_trans)['$!='](0))) {
            $case = _lex_trans_actions['$[]'](_trans);
            if ((28)['$===']($case)) {
            self.newline_s = p;}
            else if ((117)['$===']($case)) {
            self.escape_s = p;
            self.escape = nil;}
            else if ((29)['$===']($case)) {
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};}
            else if ((59)['$===']($case)) {
            self.sharp_s = $rb_minus(p, 1);}
            else if ((63)['$===']($case)) {
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());}
            else if ((304)['$===']($case)) {
            tm = p;}
            else if ((36)['$===']($case)) {
            tm = p;}
            else if ((38)['$===']($case)) {
            tm = p;}
            else if ((40)['$===']($case)) {
            tm = p;}
            else if ((70)['$===']($case)) {
            heredoc_e = p;}
            else if ((343)['$===']($case)) {
            tm = $rb_minus(p, 1);
            diag_msg = "ivar_name";}
            else if ((346)['$===']($case)) {
            tm = $rb_minus(p, 2);
            diag_msg = "cvar_name";}
            else if ((354)['$===']($case)) {
            self.escape = nil;}
            else if ((383)['$===']($case)) {
            tm = p;}
            else if ((302)['$===']($case)) {
            ident_tok = self.$tok();
            ident_ts = self.ts;
            ident_te = self.te;}
            else if ((470)['$===']($case)) {
            self.num_base = 16;
            self.num_digits_s = p;}
            else if ((464)['$===']($case)) {
            self.num_base = 10;
            self.num_digits_s = p;}
            else if ((467)['$===']($case)) {
            self.num_base = 8;
            self.num_digits_s = p;}
            else if ((461)['$===']($case)) {
            self.num_base = 2;
            self.num_digits_s = p;}
            else if ((476)['$===']($case)) {
            self.num_base = 10;
            self.num_digits_s = self.ts;}
            else if ((438)['$===']($case)) {
            self.num_base = 8;
            self.num_digits_s = self.ts;}
            else if ((453)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((446)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((443)['$===']($case)) {
            self.num_suffix_s = p;}
            else if ((88)['$===']($case)) {
            tm = p;}
            else if ((7)['$===']($case)) {
            self.te = $rb_plus(p, 1);}
            else if ((113)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((5)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((109)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_4 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_4
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((108)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_5 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_5
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_6 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_6
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((115)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((114)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((111)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((112)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_7 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_7
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_8 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_8
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((6)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_9 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_9
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_10 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_10
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_11 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_11
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_12 = self.escape))) {
                return $ret_or_12
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;}
            else if ((4)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_13 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_13
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_14 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_14
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((142)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((10)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((139)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_15 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_15
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((138)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_16 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_16
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_17 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_17
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((144)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((143)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((141)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_18 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_18
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_19 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_19
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((11)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_20 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_20
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_21 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_21
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_22 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_22
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_23 = self.escape))) {
                return $ret_or_23
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;}
            else if ((9)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_24 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_24
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_25 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_25
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((167)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_26 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_26
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((166)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_27 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_27
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_28 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_28
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((169)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((170)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_29 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_29
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_30 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_30
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((173)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_31 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_31
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((172)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_32 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_32
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_33 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_33
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((175)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_34 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_34
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_35 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_35
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((182)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((13)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((179)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_36 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_36
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((178)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_37 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_37
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_38 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_38
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((184)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((183)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((181)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_39 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_39
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_40 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_40
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((12)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_41 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_41
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_42 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_42
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((186)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_43 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_43
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((185)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_44 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_44
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_45 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_45
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((193)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DBEG", "\#{".$freeze());
            if ($truthy(current_literal['$heredoc?']())) {
              
              
              $writer = [self.herebody_s];
              $send(current_literal, 'saved_herebody_s=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.herebody_s = nil;};
            current_literal.$start_interp_brace();
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((15)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((189)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_46 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_46
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((188)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_47 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_47
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_48 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_48
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((195)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$literal().$extend_string(self.$tok(), self.ts, self.te)
            } else {
              
              message = (function() {if ($truthy(self.$tok()['$start_with?']("\#@@"))) {
                return "cvar_name"
              } else {
                return "ivar_name"
              }; return nil; })();
              self.$diagnostic("error", message, $hash2(["name"], {"name": self.$tok($rb_plus(self.ts, 1), self.te)}), self.$range($rb_plus(self.ts, 1), self.te));
            };;}
            else if ((194)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            current_literal.$flush_string();
            current_literal.$extend_content();
            self.$emit("tSTRING_DVAR", nil, self.ts, $rb_plus(self.ts, 1));
            p = self.ts;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((191)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((192)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_49 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_49
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_50 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_50
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((14)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_51 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_51
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_52 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_52
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((197)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_53 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_53
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;}
            else if ((196)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            string = self.$tok();
            if ($truthy((function() {if ($truthy(($ret_or_54 = $rb_ge(self.version, 22)))) {
              return self.cond['$active?']()['$!']()
            } else {
              return $ret_or_54
            }; return nil; })())) {
              lookahead = self.source_buffer.$slice(Opal.Range.$new(self.te,$rb_plus(self.te, 2), true))};
            current_literal = self.$literal();
            if ($truthy((function() {if ($truthy(($ret_or_55 = current_literal['$heredoc?']()['$!']()))) {
              
              return (token = current_literal.$nest_and_try_closing(string, self.ts, self.te, lookahead));
            } else {
              return $ret_or_55
            }; return nil; })())) {
              
              if (token['$[]'](0)['$==']("tLABEL_END")) {
                
                p = $rb_plus(p, 1);
                self.$pop_literal();
                self.cs = 766;
              } else {
                self.cs = self.$pop_literal()
              };
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              current_literal.$extend_string(string, self.ts, self.te)
            };;}
            else if ((199)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$literal().$extend_space(self.ts, self.te);;}
            else if ((200)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tREGEXP_OPT", self.$tok(self.ts, $rb_minus(self.te, 1)), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((201)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            unknown_options = self.$tok().$scan(/[^imxouesn]/);
            if ($truthy(unknown_options['$any?']())) {
              self.$diagnostic("error", "regexp_options", $hash2(["options"], {"options": unknown_options.$join()}))};
            self.$emit("tREGEXP_OPT");
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((16)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
              self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
            } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
              self.$emit("tBACK_REF")
            } else {
              self.$emit("tGVAR")
            };
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((202)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^\$([1-9][0-9]*)$/))) {
              self.$emit("tNTH_REF", self.$tok($rb_plus(self.ts, 1)).$to_i())
            } else if ($truthy(self.$tok()['$=~'](/^\$([&`'+])$/))) {
              self.$emit("tBACK_REF")
            } else {
              self.$emit("tGVAR")
            };
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((204)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^@@[0-9]/))) {
              self.$diagnostic("error", "cvar_name", $hash2(["name"], {"name": self.$tok()}))};
            self.$emit("tCVAR");
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((203)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.$tok()['$=~'](/^@[0-9]/))) {
              self.$diagnostic("error", "ivar_name", $hash2(["name"], {"name": self.$tok()}))};
            self.$emit("tIVAR");
            self.cs = self.$stack_pop();
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((225)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((211)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((18)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs = 781;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((208)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((220)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((20)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy(self['$version?'](23))) {
              
              $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
              
              self.cs = self.$push_literal(type, delimiter, self.ts);
              _goto_level = _again;
              continue;;;
            } else {
              
              p = $rb_minus(self.ts, 1);
              
              self.cs = 781;
              _goto_level = _again;
              continue;;;
            };;}
            else if ((207)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((206)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((224)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((221)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((223)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((218)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs = 781;
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((214)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((219)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((212)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((217)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((19)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((17)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((210)['$===']($case)) {
            $case = self.act;
            if ((43)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((44)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((45)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((22)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            self.cs = 766;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((227)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((226)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((229)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((228)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((21)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((235)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((234)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((233)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((245)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((236)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((241)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((239)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((244)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((268)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((251)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if (self.$tok(tm, $rb_plus(tm, 1))['$==']("/".$freeze())) {
              if ($truthy($rb_lt(self.version, 30))) {
                self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))
              } else {
                self.$diagnostic("warning", "ambiguous_regexp", nil, self.$range(tm, $rb_plus(tm, 1)))
              }};
            p = $rb_minus(tm, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((257)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((24)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((259)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((39)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((246)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((247)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((258)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((254)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
            p = $rb_minus(tm, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((256)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((250)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((249)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((267)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((25)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;}
            else if ((41)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((23)['$===']($case)) {
            $case = self.act;
            if ((71)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.$tok(tm, $rb_plus(tm, 1))['$==']("/".$freeze())) {
              if ($truthy($rb_lt(self.version, 30))) {
                self.$diagnostic("warning", "ambiguous_literal", nil, self.$range(tm, $rb_plus(tm, 1)))
              } else {
                self.$diagnostic("warning", "ambiguous_regexp", nil, self.$range(tm, $rb_plus(tm, 1)))
              }};
            p = $rb_minus(tm, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;}
            else if ((72)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("warning", "ambiguous_prefix", $hash2(["prefix"], {"prefix": self.$tok(tm, self.te)}), self.$range(tm, self.te));
            p = $rb_minus(tm, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;}
            else if ((77)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;}
            else {
            
            p = $rb_minus(self.te, 1);;};}
            else if ((43)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 474;
            _goto_level = _again;
            continue;;;;}
            else if ((272)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((273)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 474;
            _goto_level = _again;
            continue;;;;}
            else if ((44)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 474;
            _goto_level = _again;
            continue;;;;}
            else if ((42)['$===']($case)) {
            $case = self.act;
            if ((84)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self.cond['$active?']())) {
              self.$emit("kDO_COND", "do".$freeze(), $rb_minus(self.te, 2), self.te)
            } else {
              self.$emit("kDO", "do".$freeze(), $rb_minus(self.te, 2), self.te)
            };
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((85)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 474;
            _goto_level = _again;
            continue;;;};}
            else if ((283)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_do(true);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((276)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((277)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((278)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((281)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((287)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((286)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((295)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((289)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((293)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((288)['$===']($case)) {
            $case = self.act;
            if ((92)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((93)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;};}
            else if ((56)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((328)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            type = (delimiter = self.$tok()['$[]'](0).$chr());
            p = $rb_minus(p, 1);
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((320)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.source_buffer.$slice(self.ts).$chr(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((54)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((341)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            p = $rb_minus(p, 1);
            self.$emit("tSYMBEG", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            
            self.cs = 333;
            _goto_level = _again;
            continue;;;;}
            else if ((329)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((340)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), $rb_plus(self.ts, 2)));
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((68)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((351)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
            self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((350)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((330)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((51)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            if ($truthy(self['$version?'](18))) {
              
              ident = self.$tok(self.ts, $rb_minus(self.te, 2));
              self.$emit((function() {if ($truthy(self.source_buffer.$slice(self.ts)['$=~'](/[A-Z]/))) {
                return "tCONSTANT"
              } else {
                return "tIDENTIFIER"
              }; return nil; })(), ident, self.ts, $rb_minus(self.te, 2));
              p = $rb_minus(p, 1);
              if ($truthy((function() {if ($truthy(($ret_or_56 = self.static_env['$nil?']()['$!']()))) {
                return self.static_env['$declared?'](ident)
              } else {
                return $ret_or_56
              }; return nil; })())) {
                self.cs = 781
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              
              self.$emit("tLABEL", self.$tok(self.ts, $rb_minus(self.te, 2)), self.ts, $rb_minus(self.te, 1));
              self.cs = 766;
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((327)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            if ($truthy($rb_ge(self.version, 30))) {
              if ($truthy((function() {if ($truthy(($ret_or_57 = self.lambda_stack['$any?']()))) {
                return $rb_plus(self.lambda_stack.$last(), 1)['$=='](self.paren_nest)
              } else {
                return $ret_or_57
              }; return nil; })())) {
                self.$emit("tDOT3")
              } else {
                self.$emit("tBDOT3")
              }
            } else if ($truthy($rb_ge(self.version, 27))) {
              self.$emit("tBDOT3")
            } else {
              self.$emit("tDOT3")
            };
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((48)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
            p = $rb_minus(ident_te, 1);
            if ($truthy((function() {if ($truthy(($ret_or_58 = (function() {if ($truthy(($ret_or_59 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](ident_tok)
            } else {
              return $ret_or_59
            }; return nil; })()))) {
              return $rb_lt(self.version, 25)
            } else {
              return $ret_or_58
            }; return nil; })())) {
              self.cs = 446
            } else {
              self.cs = 505
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((314)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 185;
            _goto_level = _again;
            continue;;;;}
            else if ((55)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((298)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((325)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((324)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSTAR", "*".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((321)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            $b = [self.$tok()['$[]']($range(0, -2, false)), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((319)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((348)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((331)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1)), self.ts);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((344)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((349)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "incomplete_escape", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((355)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((322)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((326)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$emit("tBDOT2")
            } else {
              self.$emit("tDOT2")
            };
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((301)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_60 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_60
            }; return nil; })())) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((311)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((313)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 185;
            _goto_level = _again;
            continue;;;;}
            else if ((316)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((53)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("fatal", "string_eof", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((72)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));;}
            else if ((73)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            value = (function() {if ($truthy(($ret_or_61 = self.escape))) {
              return $ret_or_61
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((47)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_62 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_62
            }; return nil; })())) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((52)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;}
            else if ((67)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((50)['$===']($case)) {
            $case = self.act;
            if ((98)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((105)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));}
            else if ((116)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_ge(self.version, 27))) {
              
              self.$emit("tPIPE", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              p = $rb_minus(p, 2);
              
              self.cs = 781;
              _goto_level = _again;
              continue;;;
            };}
            else if ((120)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((121)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((122)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((126)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;}
            else if ((127)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_63 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_63
            }; return nil; })())) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((131)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;};}
            else if ((386)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((387)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((388)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((392)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((76)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((396)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            
            self.cs = self.$push_literal(self.$tok(), self.$tok(), self.ts);
            _goto_level = _again;
            continue;;;;}
            else if ((395)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((394)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((398)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((397)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((75)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            p = $rb_minus(p, 1);
            
            self.cs = 543;
            _goto_level = _again;
            continue;;;;}
            else if ((431)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tLAMBDA", "->".$freeze(), self.ts, $rb_plus(self.ts, 2));
            self.lambda_stack.$push(self.paren_nest);
            self.cs = 446;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((85)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((406)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            $b = [self.$tok(), self.$tok()['$[]'](-1).$chr()], (type = $b[0]), (delimiter = $b[1]), $b;
            
            self.cs = self.$push_literal(type, delimiter, self.ts, nil, false, false, true);
            _goto_level = _again;
            continue;;;;}
            else if ((78)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((427)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 453;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((480)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((420)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((425)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tOP_ASGN", self.$tok(self.ts, $rb_minus(self.te, 1)));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((411)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tEH", "?".$freeze());
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((408)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((410)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tSEMI", ";".$freeze());
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((485)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("error", "bare_backslash", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
            p = $rb_minus(p, 1);;}
            else if ((405)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((404)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((496)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 333;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((494)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((493)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((435)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("error", "no_dot_digit_literal");;}
            else if ((482)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((424)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            
            $writer = [self.top, self.cs];
            $send(self.stack, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.top = $rb_plus(self.top, 1);
            self.cs = 328;
            _goto_level = _again;
            continue;;;;}
            else if ((432)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 453;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((488)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_64 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_64
            }; return nil; })())) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;}
            else if ((430)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((426)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((419)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((433)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((417)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((423)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((83)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_65 = (function() {if ($truthy(($ret_or_66 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_66
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_65
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_67 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_67
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((79)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("error", "no_dot_digit_literal");;}
            else if ((82)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((77)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$diagnostic("fatal", "unexpected", $hash2(["character"], {"character": self.$tok().$inspect()['$[]']($range(1, -2, false))}));;}
            else if ((80)['$===']($case)) {
            $case = self.act;
            if ((144)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((145)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 333;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((146)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((147)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((148)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((149)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((150)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            if ($truthy((function() {if ($truthy(($ret_or_68 = self['$version?'](18)))) {
              return self.$tok()['$==']("not".$freeze())
            } else {
              return $ret_or_68
            }; return nil; })())) {
              
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 474;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((151)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tIDENTIFIER");
              if ($truthy((function() {if ($truthy(($ret_or_69 = self.static_env['$nil?']()['$!']()))) {
                return self.static_env['$declared?'](self.$tok())
              } else {
                return $ret_or_69
              }; return nil; })())) {
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((152)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((153)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_70 = (function() {if ($truthy(($ret_or_71 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_71
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_70
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_72 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_72
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((155)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((156)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((157)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((159)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((163)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_73 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_73
            }; return nil; })())) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((164)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((166)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((167)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((95)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;}
            else if ((501)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 185;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((504)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 185;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};;}
            else if ((503)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 185;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((90)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 185;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};;}
            else if ((86)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 185;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((91)['$===']($case)) {
            $case = self.act;
            if ((180)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_lt(self.version, 27))) {
              
              self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
              p = $rb_minus(p, 1);
              self.cs = 185;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;};}
            else if ((182)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tNL", nil, self.newline_s, $rb_plus(self.newline_s, 1));
            p = $rb_minus(p, 1);
            self.cs = 185;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};}
            else if ((507)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_comment(self.eq_begin_s, self.te);
            
            self.cs = self.cs_before_block_comment;
            _goto_level = _again;
            continue;;;;}
            else if ((506)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$diagnostic("fatal", "embedded_document", nil, self.$range(self.eq_begin_s, $rb_plus(self.eq_begin_s, "=begin".$length())));;}
            else if ((106)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 967;
            _goto_level = _again;
            continue;;;;}
            else if ((2)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(pe, 3);;}
            else if ((98)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 773;
            _goto_level = _again;
            continue;;;;}
            else if ((99)['$===']($case)) {
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(p, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;}
            else if ((100)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);}
            else if ((105)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 967;
            _goto_level = _again;
            continue;;;;}
            else if ((104)['$===']($case)) {
            self.te = p;
            p = $rb_minus(p, 1);
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 773;
            _goto_level = _again;
            continue;;;;}
            else if ((1)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            
            cmd_state = true;
            p = $rb_minus(p, 1);
            
            self.cs = 773;
            _goto_level = _again;
            continue;;;;}
            else if ((66)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;}
            else if ((110)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_74 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_74
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((140)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_75 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_75
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((168)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_76 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_76
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((174)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_77 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_77
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((180)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_78 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_78
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((187)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_79 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_79
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((190)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_80 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_80
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((198)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_81 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_81
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;}
            else if ((269)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((260)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((252)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((352)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            escape = $hash2([" ", "\r", "\n", "\t", "\v", "\f"], {" ": "\\s", "\r": "\\r", "\n": "\\n", "\t": "\\t", "\v": "\\v", "\f": "\\f"})['$[]'](self.source_buffer.$slice($rb_plus(self.ts, 1)));
            self.$diagnostic("warning", "invalid_escape_use", $hash2(["escape"], {"escape": escape}), self.$range());
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((315)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            self.cs_before_block_comment = self.cs;
            
            self.cs = 185;
            _goto_level = _again;
            continue;;;;;}
            else if ((434)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            if (self.paren_nest['$=='](0)) {
              self.$diagnostic("warning", "triple_dot_at_eol", nil, self.$range(self.ts, $rb_minus(self.te, 1)))};
            self.$emit("tDOT3", "...".$freeze(), self.ts, $rb_minus(self.te, 1));
            p = $rb_minus(p, 1);
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((508)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit_comment(self.eq_begin_s, self.te);
            
            self.cs = self.cs_before_block_comment;
            _goto_level = _again;
            continue;;;;;}
            else if ((505)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);;}
            else if ((107)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            self.eq_begin_s = self.ts;
            
            self.cs = 967;
            _goto_level = _again;
            continue;;;;;}
            else if ((3)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(pe, 3);;;}
            else if ((456)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$13 = function(chars){var self = $$13.$$s == null ? this : $$13.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tRATIONAL", self.$Rational(chars));}, $$13.$$s = self, $$13.$$arity = 1, $$13));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_82 = (function() {if ($truthy(($ret_or_83 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_83
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_82
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_84 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_84
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((454)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$14 = function(chars){var self = $$14.$$s == null ? this : $$14.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, chars));}, $$14.$$s = self, $$14.$$arity = 1, $$14));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_85 = (function() {if ($truthy(($ret_or_86 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_86
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_85
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_87 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_87
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((459)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$15 = function(chars){var self = $$15.$$s == null ? this : $$15.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, $$15.$$s = self, $$15.$$arity = 1, $$15));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_88 = (function() {if ($truthy(($ret_or_89 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_89
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_88
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_90 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_90
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((457)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$16 = function(chars){var self = $$16.$$s == null ? this : $$16.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$16.$$s = self, $$16.$$arity = 1, $$16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_91 = (function() {if ($truthy(($ret_or_92 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_92
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_91
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_93 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_93
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((455)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$17 = function(chars){var self = $$17.$$s == null ? this : $$17.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$17.$$s = self, $$17.$$arity = 1, $$17));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_94 = (function() {if ($truthy(($ret_or_95 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_95
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_94
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_96 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_96
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((458)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$18 = function(chars){var self = $$18.$$s == null ? this : $$18.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tINTEGER", chars, self.ts, $rb_minus(self.te, 6));
              return (p = $rb_minus(p, 6));}, $$18.$$s = self, $$18.$$arity = 1, $$18));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_97 = (function() {if ($truthy(($ret_or_98 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_98
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_97
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_99 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_99
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((447)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$19 = function(chars){var self = $$19.$$s == null ? this : $$19.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Float(chars)));}, $$19.$$s = self, $$19.$$arity = 1, $$19));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((448)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$20 = function(chars){var self = $$20.$$s == null ? this : $$20.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 2));
              return (p = $rb_minus(p, 2));}, $$20.$$s = self, $$20.$$arity = 1, $$20));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((449)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$21 = function(chars){var self = $$21.$$s == null ? this : $$21.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tRATIONAL", self.$Rational(chars));}, $$21.$$s = self, $$21.$$arity = 1, $$21));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((451)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$22 = function(chars){var self = $$22.$$s == null ? this : $$22.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tIMAGINARY", self.$Complex(0, self.$Rational(chars)));}, $$22.$$s = self, $$22.$$arity = 1, $$22));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((450)['$===']($case)) {
            
            self.num_xfrm = $send(self, 'lambda', [], ($$23 = function(chars){var self = $$23.$$s == null ? this : $$23.$$s;
              if (self.ts == null) self.ts = nil;
              if (self.te == null) self.te = nil;

            
              
              if (chars == null) {
                chars = nil;
              };
              self.$emit("tFLOAT", self.$Float(chars), self.ts, $rb_minus(self.te, 6));
              return (p = $rb_minus(p, 6));}, $$23.$$s = self, $$23.$$arity = 1, $$23));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((134)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy((function() {if ($truthy(($ret_or_100 = codepoints['$start_with?'](" ")))) {
                return $ret_or_100
              } else {
                return codepoints['$start_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy((function() {if ($truthy(($ret_or_101 = codepoints['$end_with?'](" ")))) {
                return $ret_or_101
              } else {
                return codepoints['$end_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$24 = function($mlhs_tmp1){var self = $$24.$$s == null ? this : $$24.$$s, $c, $d, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $d = $mlhs_tmp1, $c = Opal.to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$24.$$s = self, $$24.$$brk = $brk, $$24.$$arity = 1, $$24.$$has_top_level_mlhs_arg = true, $$24))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_102 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_102
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_103 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_103
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_104 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_104
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_105 = self.escape))) {
                return $ret_or_105
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((162)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy((function() {if ($truthy(($ret_or_106 = codepoints['$start_with?'](" ")))) {
                return $ret_or_106
              } else {
                return codepoints['$start_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy((function() {if ($truthy(($ret_or_107 = codepoints['$end_with?'](" ")))) {
                return $ret_or_107
              } else {
                return codepoints['$end_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$25 = function($mlhs_tmp1){var self = $$25.$$s == null ? this : $$25.$$s, $c, $d, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $d = $mlhs_tmp1, $c = Opal.to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$25.$$s = self, $$25.$$brk = $brk, $$25.$$arity = 1, $$25.$$has_top_level_mlhs_arg = true, $$25))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_108 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_108
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_109 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_109
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_110 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_110
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_111 = self.escape))) {
                return $ret_or_111
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((373)['$===']($case)) {
            
            self.escape = "";
            codepoints = self.$tok($rb_plus(self.escape_s, 2), $rb_minus(p, 1));
            codepoint_s = $rb_plus(self.escape_s, 2);
            if ($truthy($rb_lt(self.version, 24))) {
              
              if ($truthy((function() {if ($truthy(($ret_or_112 = codepoints['$start_with?'](" ")))) {
                return $ret_or_112
              } else {
                return codepoints['$start_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus(self.escape_s, 2), $rb_plus(self.escape_s, 3)))};
              if ($truthy((spaces_p = codepoints.$index(/[ \t]{2}/)))) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_plus($rb_plus(codepoint_s, spaces_p), 1), $rb_plus($rb_plus(codepoint_s, spaces_p), 2)))};
              if ($truthy((function() {if ($truthy(($ret_or_113 = codepoints['$end_with?'](" ")))) {
                return $ret_or_113
              } else {
                return codepoints['$end_with?']("\t")
              }; return nil; })())) {
                self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(p, 1), p))};};
            (function(){var $brk = Opal.new_brk(); try {return $send(codepoints.$scan(/([0-9a-fA-F]+)|([ \t]+)/), 'each', [], ($$26 = function($mlhs_tmp1){var self = $$26.$$s == null ? this : $$26.$$s, $c, $d, codepoint_str = nil, spaces = nil, codepoint = nil;
              if (self.escape == null) self.escape = nil;

            
              
              if ($mlhs_tmp1 == null) {
                $mlhs_tmp1 = nil;
              };
              $d = $mlhs_tmp1, $c = Opal.to_ary($d), (codepoint_str = ($c[0] == null ? nil : $c[0])), (spaces = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(spaces)) {
                return (codepoint_s = $rb_plus(codepoint_s, spaces.$length()))
              } else {
                
                codepoint = codepoint_str.$to_i(16);
                if ($truthy($rb_ge(codepoint, 1114112))) {
                  
                  self.$diagnostic("error", "unicode_point_too_large", nil, self.$range(codepoint_s, $rb_plus(codepoint_s, codepoint_str.$length())));
                  
                  Opal.brk(nil, $brk);};
                self.escape = $rb_plus(self.escape, codepoint.$chr($$$($$($nesting, 'Encoding'), 'UTF_8')));
                return (codepoint_s = $rb_plus(codepoint_s, codepoint_str.$length()));
              };}, $$26.$$s = self, $$26.$$brk = $brk, $$26.$$arity = 1, $$26.$$has_top_level_mlhs_arg = true, $$26))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_114 = self.escape))) {
              return $ret_or_114
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((118)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_115 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_115
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_116 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_116
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_117 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_117
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_118 = self.escape))) {
                return $ret_or_118
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((146)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_119 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_119
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_120 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_120
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_121 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_121
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_122 = self.escape))) {
                return $ret_or_122
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((357)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_123 = self.escape))) {
              return $ret_or_123
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((121)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_124 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_124
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_125 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_125
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_126 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_126
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_127 = self.escape))) {
                return $ret_or_127
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((149)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_128 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_128
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_129 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_129
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_130 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_130
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_131 = self.escape))) {
                return $ret_or_131
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((360)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_escape");;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_132 = self.escape))) {
              return $ret_or_132
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((123)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_133 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_133
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_134 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_134
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_135 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_135
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_136 = self.escape))) {
                return $ret_or_136
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((151)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_137 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_137
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_138 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_138
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_139 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_139
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_140 = self.escape))) {
                return $ret_or_140
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((362)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_141 = self.escape))) {
              return $ret_or_141
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((120)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_142 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_142
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_143 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_143
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_144 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_144
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_145 = self.escape))) {
                return $ret_or_145
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((148)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_146 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_146
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_147 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_147
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_148 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_148
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_149 = self.escape))) {
                return $ret_or_149
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((359)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok(self.escape_s, p).$to_i(8)['$%'](256));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_150 = self.escape))) {
              return $ret_or_150
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((137)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_151 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_151
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_152 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_152
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_153 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_153
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_154 = self.escape))) {
                return $ret_or_154
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((165)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_155 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_155
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_156 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_156
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_157 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_157
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_158 = self.escape))) {
                return $ret_or_158
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((376)['$===']($case)) {
            
            self.escape = self.$encode_escape(self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_159 = self.escape))) {
              return $ret_or_159
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((136)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_160 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_160
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_161 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_161
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_162 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_162
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_163 = self.escape))) {
                return $ret_or_163
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((164)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_164 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_164
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_165 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_165
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_166 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_166
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_167 = self.escape))) {
                return $ret_or_167
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((375)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_hex_escape", nil, self.$range($rb_minus(self.escape_s, 1), $rb_plus(p, 2)));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_168 = self.escape))) {
              return $ret_or_168
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((131)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_169 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_169
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_170 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_170
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_171 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_171
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_172 = self.escape))) {
                return $ret_or_172
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((159)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_173 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_173
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_174 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_174
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_175 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_175
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_176 = self.escape))) {
                return $ret_or_176
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((370)['$===']($case)) {
            
            self.escape = self.$tok($rb_plus(self.escape_s, 1), p).$to_i(16).$chr($$$($$($nesting, 'Encoding'), 'UTF_8'));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_177 = self.escape))) {
              return $ret_or_177
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((130)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_178 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_178
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_179 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_179
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_180 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_180
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_181 = self.escape))) {
                return $ret_or_181
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((158)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_182 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_182
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_183 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_183
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_184 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_184
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_185 = self.escape))) {
                return $ret_or_185
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((369)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_186 = self.escape))) {
              return $ret_or_186
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((135)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_187 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_187
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_188 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_188
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_189 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_189
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_190 = self.escape))) {
                return $ret_or_190
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((163)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_191 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_191
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_192 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_192
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_193 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_193
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_194 = self.escape))) {
                return $ret_or_194
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((374)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_195 = self.escape))) {
              return $ret_or_195
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((132)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_196 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_196
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_197 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_197
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_198 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_198
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_199 = self.escape))) {
                return $ret_or_199
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((160)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_200 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_200
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_201 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_201
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_202 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_202
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_203 = self.escape))) {
                return $ret_or_203
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((371)['$===']($case)) {
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_204 = self.escape))) {
              return $ret_or_204
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((119)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_205 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_205
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_206 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_206
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_207 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_207
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_208 = self.escape))) {
                return $ret_or_208
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((147)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_209 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_209
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_210 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_210
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_211 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_211
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_212 = self.escape))) {
                return $ret_or_212
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((358)['$===']($case)) {
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_213 = self.escape))) {
              return $ret_or_213
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((171)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_214 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_214
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_215 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_215
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_216 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_216
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_217 = self.escape))) {
                return $ret_or_217
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((176)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_218 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_218
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_219 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_219
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_220 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_220
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_221 = self.escape))) {
                return $ret_or_221
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((57)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.newline_s = p;;}
            else if ((30)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((32)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((34)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;}
            else if ((213)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((232)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((240)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((33)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((271)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((263)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((282)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((294)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((290)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(p, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((58)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((49)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = $rb_plus(p, 1);
            
            self.$emit("tIDENTIFIER", ident_tok, ident_ts, ident_te);
            p = $rb_minus(ident_te, 1);
            if ($truthy((function() {if ($truthy(($ret_or_222 = (function() {if ($truthy(($ret_or_223 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](ident_tok)
            } else {
              return $ret_or_223
            }; return nil; })()))) {
              return $rb_lt(self.version, 25)
            } else {
              return $ret_or_222
            }; return nil; })())) {
              self.cs = 446
            } else {
              self.cs = 505
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((312)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((393)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((389)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self.in_kwarg)) {
              
              p = $rb_minus(p, 1);
              
              self.cs = 781;
              _goto_level = _again;
              continue;;;
            } else {
              
              self.cs = 185;
              _goto_level = _again;
              continue;;
            };;;}
            else if ((402)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((399)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 185;
            _goto_level = _again;
            continue;;;;;}
            else if ((486)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((418)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 961;
            _goto_level = _again;
            continue;;;;;}
            else if ((101)['$===']($case)) {
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((262)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze(), $rb_minus(self.te, 1), self.te);
            } else {
              self.$emit("tLCURLY", "{".$freeze(), $rb_minus(self.te, 1), self.te)
            };
            self.command_start = true;
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((284)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.$emit("tLAMBEG", "{".$freeze());
            } else {
              self.$emit("tLBRACE_ARG", "{".$freeze())
            };
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((384)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              self.command_start = true;
              self.$emit("tLAMBEG", "{".$freeze());
            } else {
              self.$emit("tLBRACE", "{".$freeze())
            };
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((499)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              current_literal.$start_interp_brace()};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((500)['$===']($case)) {
            
            current_literal = self.$literal();
            if ($truthy(current_literal)) {
              if ($truthy(current_literal.$end_interp_brace_and_try_closing())) {
                
                if ($truthy(self['$version?'](18, 19))) {
                  
                  self.$emit("tRCURLY", "}".$freeze(), $rb_minus(p, 1), p);
                  self.cond.$lexpop();
                  self.cmdarg.$lexpop();
                } else {
                  self.$emit("tSTRING_DEND", "}".$freeze(), $rb_minus(p, 1), p)
                };
                if ($truthy(current_literal.$saved_herebody_s())) {
                  self.herebody_s = current_literal.$saved_herebody_s()};
                p = $rb_minus(p, 1);
                self.cs = self.$next_state_for_literal(current_literal);
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;}};
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy((function() {if ($truthy(($ret_or_224 = self.$tok()['$==']("}".$freeze())))) {
              return $ret_or_224
            } else {
              return self.$tok()['$==']("]".$freeze())
            }; return nil; })())) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 781
              } else {
                self.cs = 511
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((60)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;}
            else if ((64)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.newline_s = p;;}
            else if ((216)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((231)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((243)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((265)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((280)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((292)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((318)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((391)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((401)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((422)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((103)['$===']($case)) {
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((237)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
            self.cs = self.$arg_or_cmdarg(cmd_state);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((332)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((303)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((415)['$===']($case)) {
            
            tm = p;;
            
            $case = self.act;
            if ((144)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (self.lambda_stack.$last()['$=='](self.paren_nest)) {
              
              self.lambda_stack.$pop();
              if (self.$tok()['$==']("{".$freeze())) {
                self.$emit("tLAMBEG", "{".$freeze())
              } else {
                self.$emit("kDO_LAMBDA", "do".$freeze())
              };
            } else if (self.$tok()['$==']("{".$freeze())) {
              self.$emit("tLCURLY", "{".$freeze())
            } else {
              self.$emit_do()
            };
            if (self.$tok()['$==']("{".$freeze())) {
              self.paren_nest = $rb_plus(self.paren_nest, 1)};
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((145)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 333;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((146)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kCLASS", "class".$freeze(), self.ts, $rb_plus(self.ts, 5));
            self.$emit("tLSHFT", "<<".$freeze(), $rb_minus(self.te, 2), self.te);
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((147)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((148)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((149)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((150)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            if ($truthy((function() {if ($truthy(($ret_or_225 = self['$version?'](18)))) {
              return self.$tok()['$==']("not".$freeze())
            } else {
              return $ret_or_225
            }; return nil; })())) {
              
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 474;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((151)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tIDENTIFIER");
              if ($truthy((function() {if ($truthy(($ret_or_226 = self.static_env['$nil?']()['$!']()))) {
                return self.static_env['$declared?'](self.$tok())
              } else {
                return $ret_or_226
              }; return nil; })())) {
              } else {
                self.cs = self.$arg_or_cmdarg(cmd_state)
              };
            } else {
              self.$emit("k__ENCODING__", "__ENCODING__".$freeze())
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((152)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((153)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_227 = (function() {if ($truthy(($ret_or_228 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_228
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_227
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_229 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_229
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((155)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tINTEGER", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_i(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((156)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy(self['$version?'](18, 19, 20))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": self.$tok($rb_minus(self.te, 1), self.te)}), self.$range($rb_minus(self.te, 1), self.te))
            } else {
              
              self.$emit("tFLOAT", self.$tok(self.ts, $rb_minus(self.te, 1)).$to_f(), self.ts, $rb_minus(self.te, 1));
              p = $rb_minus(p, 1);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((157)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((159)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tCONSTANT");
            self.cs = self.$arg_or_cmdarg(cmd_state);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((163)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_230 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_230
            }; return nil; })())) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((164)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((166)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((167)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;};;}
            else if ((238)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tFID", self.$tok(self.ts, tm), self.ts, tm);
            self.cs = self.$arg_or_cmdarg(cmd_state);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((333)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((305)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((416)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if (tm['$=='](self.te)) {
              self.$emit("tFID")
            } else {
              
              self.$emit("tIDENTIFIER", self.$tok(self.ts, tm), self.ts, tm);
              p = $rb_minus(tm, 1);
            };
            self.cs = 474;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((334)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((306)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((335)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((307)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((339)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((310)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((338)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((309)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            $case = self.act;
            if ((98)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tUNARY_NUM", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
            p = $rb_minus(p, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((105)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));}
            else if ((116)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            if ($truthy($rb_ge(self.version, 27))) {
              
              self.$emit("tPIPE", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = $rb_minus(p, 1);
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              p = $rb_minus(p, 2);
              
              self.cs = 781;
              _goto_level = _again;
              continue;;;
            };}
            else if ((120)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'PUNCTUATION_BEGIN'));
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((121)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((122)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit_table($$($nesting, 'KEYWORDS_BEGIN'));
            self.command_start = true;
            self.cs = 773;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;}
            else if ((126)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;}
            else if ((127)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            self.$emit("tIDENTIFIER");
            if ($truthy((function() {if ($truthy(($ret_or_231 = self.static_env['$nil?']()['$!']()))) {
              return self.static_env['$declared?'](self.$tok())
            } else {
              return $ret_or_231
            }; return nil; })())) {
              
              self.cs = 446;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$arg_or_cmdarg(cmd_state);
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };}
            else if ((131)['$===']($case)) {
            
            p = $rb_minus(self.te, 1);;
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;};;}
            else if ((336)['$===']($case)) {
            
            tm = $rb_minus(p, 3);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((308)['$===']($case)) {
            
            tm = $rb_minus(p, 3);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            p = $rb_minus(self.ts, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((337)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tSYMBOL", self.$tok($rb_plus(self.ts, 1), tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((481)['$===']($case)) {
            
            tm = $rb_minus(p, 2);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tCONSTANT", self.$tok(self.ts, tm), self.ts, tm);
            p = $rb_minus(tm, 1);
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((261)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK", "[".$freeze(), $rb_minus(self.te, 1), self.te);
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((377)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK", "[".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((484)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLBRACK2", "[".$freeze());
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((487)['$===']($case)) {
            
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy((function() {if ($truthy(($ret_or_232 = self.$tok()['$==']("}".$freeze())))) {
              return $ret_or_232
            } else {
              return self.$tok()['$==']("]".$freeze())
            }; return nil; })())) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 781
              } else {
                self.cs = 511
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((253)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy(self['$version?'](18))) {
              
              self.$emit("tLPAREN2", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 773;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;;}
            else if ((266)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN2", "(".$freeze());
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((274)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN_ARG", "(".$freeze(), $rb_minus(self.te, 1), self.te);
            if ($truthy(self['$version?'](18))) {
              
              self.cs = 773;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            };;;}
            else if ((323)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("tLPAREN", "(".$freeze());
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((428)['$===']($case)) {
            
            self.cond.$push(false);
            self.cmdarg.$push(false);
            self.paren_nest = $rb_plus(self.paren_nest, 1);
            if ($truthy(self['$version?'](18))) {
              self.command_start = true};;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            self.cs = 543;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((429)['$===']($case)) {
            
            self.paren_nest = $rb_minus(self.paren_nest, 1);;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit_table($$($nesting, 'PUNCTUATION'));
            if ($truthy($rb_lt(self.version, 24))) {
              
              self.cond.$lexpop();
              self.cmdarg.$lexpop();
            } else {
              
              self.cond.$pop();
              self.cmdarg.$pop();
            };
            if ($truthy((function() {if ($truthy(($ret_or_233 = self.$tok()['$==']("}".$freeze())))) {
              return $ret_or_233
            } else {
              return self.$tok()['$==']("]".$freeze())
            }; return nil; })())) {
              if ($truthy($rb_ge(self.version, 25))) {
                self.cs = 781
              } else {
                self.cs = 511
              }};
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((71)['$===']($case)) {
            
            heredoc_e = p;;
            
            self.newline_s = p;;}
            else if ((347)['$===']($case)) {
            
            new_herebody_s = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$tok(self.ts, heredoc_e)['$=~'](/^<<(-?)(~?)(["'`]?)(.*)\3$/m);
            indent = (function() {if ($truthy(($ret_or_234 = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$empty?']()['$!']()))) {
              return $ret_or_234
            } else {
              return (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$empty?']()['$!']()
            }; return nil; })();
            dedent_body = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))['$empty?']()['$!']();
            type = (function() {if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$empty?']())) {
              return "<<\"".$freeze()
            } else {
              
              return $rb_plus("<<".$freeze(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3)));
            }; return nil; })();
            delimiter = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4));
            if ($truthy($rb_ge(self.version, 27))) {
              if ($truthy((function() {if ($truthy(($ret_or_235 = $rb_gt(delimiter.$count("\n"), 0)))) {
                return $ret_or_235
              } else {
                return $rb_gt(delimiter.$count("\r"), 0)
              }; return nil; })())) {
                self.$diagnostic("error", "unterminated_heredoc_id", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))}
            } else if ($truthy($rb_ge(self.version, 24))) {
              if ($truthy($rb_gt(delimiter.$count("\n"), 0))) {
                if ($truthy(delimiter['$end_with?']("\n"))) {
                  
                  self.$diagnostic("warning", "heredoc_id_ends_with_nl", nil, self.$range(self.ts, $rb_plus(self.ts, 1)));
                  delimiter = delimiter.$rstrip();
                } else {
                  self.$diagnostic("fatal", "heredoc_id_has_newline", nil, self.$range(self.ts, $rb_plus(self.ts, 1)))
                }}};
            if ($truthy((function() {if ($truthy(($ret_or_236 = dedent_body))) {
              return self['$version?'](18, 19, 20, 21, 22)
            } else {
              return $ret_or_236
            }; return nil; })())) {
              
              self.$emit("tLSHFT", "<<".$freeze(), self.ts, $rb_plus(self.ts, 2));
              p = $rb_plus(self.ts, 1);
              self.cs = 543;
              
              p = $rb_plus(p, 1);
              _goto_level = _out;
              continue;;;
            } else {
              
              self.cs = self.$push_literal(type, delimiter, self.ts, heredoc_e, indent, dedent_body);
              self.herebody_s = (function() {if ($truthy(($ret_or_237 = self.herebody_s))) {
                return $ret_or_237
              } else {
                return new_herebody_s
              }; return nil; })();
              p = $rb_minus(self.herebody_s, 1);
            };;;}
            else if ((342)['$===']($case)) {
            
            tm = $rb_minus(p, 1);
            diag_msg = "ivar_name";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((345)['$===']($case)) {
            
            tm = $rb_minus(p, 2);
            diag_msg = "cvar_name";;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            if ($truthy($rb_ge(self.version, 27))) {
              self.$diagnostic("error", diag_msg, $hash2(["name"], {"name": self.$tok(tm, self.te)}), self.$range(tm, self.te))
            } else {
              
              self.$emit("tCOLON", self.$tok(self.ts, $rb_plus(self.ts, 1)), self.ts, $rb_plus(self.ts, 1));
              p = self.ts;
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((353)['$===']($case)) {
            
            self.escape = nil;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_238 = self.escape))) {
              return $ret_or_238
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((380)['$===']($case)) {
            
            tm = p;;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            self.$emit("kRESCUE", "rescue".$freeze(), self.ts, tm);
            p = $rb_minus(tm, 1);
            self.cs = 519;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((471)['$===']($case)) {
            
            self.num_base = 16;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((465)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((468)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((462)['$===']($case)) {
            
            self.num_base = 2;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;}
            else if ((477)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;}
            else if ((440)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;}
            else if ((478)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$27 = function(chars){var self = $$27.$$s == null ? this : $$27.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$27.$$s = self, $$27.$$arity = 1, $$27));;}
            else if ((89)['$===']($case)) {
            
            tm = p;;
            
            self.te = $rb_plus(p, 1);
            
            p = $rb_minus(tm, 1);
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((8)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.newline_s = p;;}
            else if ((444)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_suffix_s = p;;}
            else if ((222)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 43;;}
            else if ((209)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 44;;}
            else if ((205)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 45;;}
            else if ((26)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 71;;}
            else if ((255)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 72;;}
            else if ((27)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 77;;}
            else if ((248)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 78;;}
            else if ((275)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 84;;}
            else if ((45)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 85;;}
            else if ((296)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 92;;}
            else if ((285)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 93;;}
            else if ((69)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 105;;}
            else if ((385)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 116;;}
            else if ((299)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 120;;}
            else if ((379)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 121;;}
            else if ((378)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 122;;}
            else if ((74)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 126;;}
            else if ((297)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 127;;}
            else if ((300)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 131;;}
            else if ((495)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 144;;}
            else if ((490)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 145;;}
            else if ((498)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 147;;}
            else if ((491)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 148;;}
            else if ((492)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 149;;}
            else if ((497)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 150;;}
            else if ((489)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 151;;}
            else if ((483)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 152;;}
            else if ((409)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 153;;}
            else if ((442)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 156;;}
            else if ((81)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 157;;}
            else if ((412)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 159;;}
            else if ((403)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 163;;}
            else if ((414)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 164;;}
            else if ((407)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 166;;}
            else if ((413)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 167;;}
            else if ((87)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 180;;}
            else if ((502)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.act = 182;;}
            else if ((177)['$===']($case)) {
            
            self.newline_s = p;;
            
            self.te = $rb_plus(p, 1);
            
            current_literal = self.$literal();
            if (self.te['$=='](pe)) {
              self.$diagnostic("fatal", "string_eof", nil, self.$range(current_literal.$str_s(), $rb_plus(current_literal.$str_s(), 1)))};
            if ($truthy(current_literal['$heredoc?']())) {
              
              line = self.$tok(self.herebody_s, self.ts).$gsub(/\r+$/, "".$freeze());
              if ($truthy(self['$version?'](18, 19, 20))) {
                line = line.$gsub(/\r.*$/, "".$freeze())};
              if ($truthy(current_literal.$nest_and_try_closing(line, self.herebody_s, self.ts))) {
                
                self.herebody_s = self.te;
                p = $rb_minus(current_literal.$heredoc_e(), 1);
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;
              } else {
                
                current_literal.$infer_indent_level(line);
                self.herebody_s = self.te;
              };
            } else {
              
              if ($truthy(current_literal.$nest_and_try_closing(self.$tok(), self.ts, self.te))) {
                
                self.cs = self.$pop_literal();
                
                p = $rb_plus(p, 1);
                _goto_level = _out;
                continue;;;};
              if ($truthy(self.herebody_s)) {
                
                p = $rb_minus(self.herebody_s, 1);
                self.herebody_s = nil;};
            };
            if ($truthy((function() {if ($truthy(($ret_or_239 = current_literal['$words?']()))) {
              return self['$eof_codepoint?'](self.source_pts['$[]'](p))['$!']()
            } else {
              return $ret_or_239
            }; return nil; })())) {
              current_literal.$extend_space(self.ts, self.te)
            } else {
              
              current_literal.$extend_string(self.$tok(), self.ts, self.te);
              current_literal.$flush_string();
            };;;
            
            self.escape_s = p;
            self.escape = nil;;}
            else if ((124)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_240 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_240
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_241 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_241
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_242 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_242
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_243 = self.escape))) {
                return $ret_or_243
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((152)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_244 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_244
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_245 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_245
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_246 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_246
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_247 = self.escape))) {
                return $ret_or_247
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((363)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_248 = self.escape))) {
              return $ret_or_248
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((129)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_249 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_249
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_250 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_250
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_251 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_251
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_252 = self.escape))) {
                return $ret_or_252
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((157)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_253 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_253
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_254 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_254
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_255 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_255
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_256 = self.escape))) {
                return $ret_or_256
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((368)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_257 = self.escape))) {
              return $ret_or_257
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((122)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_258 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_259 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_259
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_258
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_260 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_260
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_261 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_261
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_262 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_262
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_263 = self.escape))) {
                return $ret_or_263
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((150)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_264 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_265 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_265
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_264
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_266 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_266
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_267 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_267
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_268 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_268
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_269 = self.escape))) {
                return $ret_or_269
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((361)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_270 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_271 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_271
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_270
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_272 = self.escape))) {
              return $ret_or_272
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((128)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_273 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_274 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_274
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_273
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_275 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_275
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_276 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_276
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_277 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_277
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_278 = self.escape))) {
                return $ret_or_278
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((156)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_279 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_280 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_280
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_279
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_281 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_281
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_282 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_282
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_283 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_283
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_284 = self.escape))) {
                return $ret_or_284
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((367)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_285 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_286 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_286
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_285
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_287 = self.escape))) {
              return $ret_or_287
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((126)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_288 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_288
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_289 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_289
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_290 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_290
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_291 = self.escape))) {
                return $ret_or_291
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((154)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_292 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_292
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_293 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_293
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_294 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_294
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_295 = self.escape))) {
                return $ret_or_295
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((365)['$===']($case)) {
            
            self.escape = "\u007F";;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_296 = self.escape))) {
              return $ret_or_296
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((133)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_297 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_297
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_298 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_298
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_299 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_299
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_300 = self.escape))) {
                return $ret_or_300
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((161)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_301 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_301
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_302 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_302
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_303 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_303
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_304 = self.escape))) {
                return $ret_or_304
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((372)['$===']($case)) {
            
            self.$diagnostic("fatal", "invalid_unicode_escape", nil, self.$range($rb_minus(self.escape_s, 1), p));;
            
            self.$diagnostic("fatal", "unterminated_unicode", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_305 = self.escape))) {
              return $ret_or_305
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((116)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_306 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_306
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_307 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_307
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_308 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_308
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_309 = self.escape))) {
                return $ret_or_309
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((145)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_310 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_310
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_311 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_311
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_312 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_312
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_313 = self.escape))) {
                return $ret_or_313
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((356)['$===']($case)) {
            
            self.escape_s = p;
            self.escape = nil;;
            
            self.$diagnostic("fatal", "escape_eof", nil, self.$range($rb_minus(p, 1), p));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_314 = self.escape))) {
              return $ret_or_314
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((61)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.newline_s = p;;}
            else if ((215)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((230)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((242)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((264)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            
            self.cs = 781;
            _goto_level = _again;
            continue;;;;;}
            else if ((279)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((291)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((317)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((390)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((400)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((421)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((102)['$===']($case)) {
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.te = p;
            p = $rb_minus(p, 1);;}
            else if ((473)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$28 = function(chars){var self = $$28.$$s == null ? this : $$28.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$28.$$s = self, $$28.$$arity = 1, $$28));;}
            else if ((437)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$29 = function(chars){var self = $$29.$$s == null ? this : $$29.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$29.$$s = self, $$29.$$arity = 1, $$29));;}
            else if ((452)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$30 = function(chars){var self = $$30.$$s == null ? this : $$30.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$30.$$s = self, $$30.$$arity = 1, $$30));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_315 = (function() {if ($truthy(($ret_or_316 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_316
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_315
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_317 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_317
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((445)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$31 = function(chars){var self = $$31.$$s == null ? this : $$31.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tFLOAT", self.$Float(chars));}, $$31.$$s = self, $$31.$$arity = 1, $$31));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((441)['$===']($case)) {
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$32 = function(chars){var self = $$32.$$s == null ? this : $$32.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tFLOAT", self.$Float(chars));}, $$32.$$s = self, $$32.$$arity = 1, $$32));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.ts, self.num_suffix_s);
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tFLOAT", self.$Float(digits), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits)
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((270)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.newline_s = p;;
            
            self.act = 78;;}
            else if ((35)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 77;;}
            else if ((46)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 85;;}
            else if ((94)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            self.act = 180;;}
            else if ((65)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 98;;}
            else if ((84)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 146;;}
            else if ((93)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 180;;}
            else if ((37)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 72;;}
            else if ((382)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 126;;}
            else if ((381)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            tm = p;;
            
            self.act = 127;;}
            else if ((474)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.act = 153;;}
            else if ((127)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_318 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_318
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_319 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_319
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_320 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_320
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_321 = self.escape))) {
                return $ret_or_321
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((155)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_322 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_322
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_323 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_323
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_324 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_324
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_325 = self.escape))) {
                return $ret_or_325
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((366)['$===']($case)) {
            
            codepoint = self.source_pts['$[]']($rb_minus(p, 1));
            if ($truthy((self.escape = $$($nesting, 'ESCAPES')['$[]'](codepoint))['$nil?']())) {
              self.escape = self.$encode_escape(self.source_buffer.$slice($rb_minus(p, 1)))};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_326 = self.escape))) {
              return $ret_or_326
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((125)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_327 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_328 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_328
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_327
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_329 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_329
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_330 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_330
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_331 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_331
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_332 = self.escape))) {
                return $ret_or_332
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((153)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_333 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_334 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_334
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_333
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            current_literal = self.$literal();
            escaped_char = self.source_buffer.$slice(self.escape_s).$chr();
            if ($truthy(current_literal['$munge_escape?'](escaped_char))) {
              if ($truthy((function() {if ($truthy(($ret_or_335 = current_literal['$regexp?']()))) {
                return $$($nesting, 'REGEXP_META_CHARACTERS').$match(escaped_char)
              } else {
                return $ret_or_335
              }; return nil; })())) {
                current_literal.$extend_string(self.$tok(), self.ts, self.te)
              } else {
                current_literal.$extend_string(escaped_char, self.ts, self.te)
              }
            } else if ($truthy((function() {if ($truthy(($ret_or_336 = current_literal['$squiggly_heredoc?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_336
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok(), self.ts, self.te)
            } else if ($truthy((function() {if ($truthy(($ret_or_337 = current_literal['$supports_line_continuation_via_slash?']()))) {
              return escaped_char['$==']("\n".$freeze())
            } else {
              return $ret_or_337
            }; return nil; })())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else if ($truthy(current_literal['$regexp?']())) {
              current_literal.$extend_string(self.$tok().$gsub("\\\n".$freeze(), "".$freeze()), self.ts, self.te)
            } else {
              current_literal.$extend_string((function() {if ($truthy(($ret_or_338 = self.escape))) {
                return $ret_or_338
              } else {
                return self.$tok()
              }; return nil; })(), self.ts, self.te)
            };;;}
            else if ((364)['$===']($case)) {
            
            self.escape = self.source_buffer.$slice($rb_minus(p, 1)).$chr();
            if ($truthy((function() {if ($truthy(($ret_or_339 = $rb_ge(self.version, 27)))) {
              
              if ($truthy(($ret_or_340 = $range(0, 8, false)['$include?'](self.escape.$ord())))) {
                return $ret_or_340
              } else {
                return $range(14, 31, false)['$include?'](self.escape.$ord())
              };
            } else {
              return $ret_or_339
            }; return nil; })())) {
              self.$diagnostic("fatal", "invalid_escape")};;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$&'](159));;
            
            self.escape = self.$encode_escape(self.escape['$[]'](0).$ord()['$|'](128));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            value = (function() {if ($truthy(($ret_or_341 = self.escape))) {
              return $ret_or_341
            } else {
              return self.$tok($rb_plus(self.ts, 1))
            }; return nil; })();
            if ($truthy(self['$version?'](18))) {
              self.$emit("tINTEGER", value.$getbyte(0))
            } else {
              self.$emit("tCHARACTER", value)
            };
            self.cs = 781;
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((469)['$===']($case)) {
            
            self.num_base = 16;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$33 = function(chars){var self = $$33.$$s == null ? this : $$33.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$33.$$s = self, $$33.$$arity = 1, $$33));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_342 = (function() {if ($truthy(($ret_or_343 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_343
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_342
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_344 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_344
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((463)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$34 = function(chars){var self = $$34.$$s == null ? this : $$34.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$34.$$s = self, $$34.$$arity = 1, $$34));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_345 = (function() {if ($truthy(($ret_or_346 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_346
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_345
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_347 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_347
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((466)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$35 = function(chars){var self = $$35.$$s == null ? this : $$35.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$35.$$s = self, $$35.$$arity = 1, $$35));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_348 = (function() {if ($truthy(($ret_or_349 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_349
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_348
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_350 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_350
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((460)['$===']($case)) {
            
            self.num_base = 2;
            self.num_digits_s = p;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$36 = function(chars){var self = $$36.$$s == null ? this : $$36.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$36.$$s = self, $$36.$$arity = 1, $$36));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_351 = (function() {if ($truthy(($ret_or_352 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_352
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_351
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_353 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_353
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((472)['$===']($case)) {
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$37 = function(chars){var self = $$37.$$s == null ? this : $$37.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$37.$$s = self, $$37.$$arity = 1, $$37));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_354 = (function() {if ($truthy(($ret_or_355 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_355
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_354
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_356 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_356
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((436)['$===']($case)) {
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$38 = function(chars){var self = $$38.$$s == null ? this : $$38.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$38.$$s = self, $$38.$$arity = 1, $$38));;
            
            self.te = p;
            p = $rb_minus(p, 1);
            
            digits = self.$tok(self.num_digits_s, self.num_suffix_s);
            if ($truthy(digits['$end_with?']("_".$freeze()))) {
              self.$diagnostic("error", "trailing_in_number", $hash2(["character"], {"character": "_".$freeze()}), self.$range($rb_minus(self.te, 1), self.te))
            } else if ($truthy((function() {if ($truthy(($ret_or_357 = (function() {if ($truthy(($ret_or_358 = digits['$empty?']()))) {
              return self.num_base['$=='](8)
            } else {
              return $ret_or_358
            }; return nil; })()))) {
              return self['$version?'](18)
            } else {
              return $ret_or_357
            }; return nil; })())) {
              digits = "0".$freeze()
            } else if ($truthy(digits['$empty?']())) {
              self.$diagnostic("error", "empty_numeric")
            } else if ($truthy((function() {if ($truthy(($ret_or_359 = self.num_base['$=='](8)))) {
              
              return (invalid_idx = digits.$index(/[89]/));
            } else {
              return $ret_or_359
            }; return nil; })())) {
              
              invalid_s = $rb_plus(self.num_digits_s, invalid_idx);
              self.$diagnostic("error", "invalid_octal", nil, self.$range(invalid_s, $rb_plus(invalid_s, 1)));};
            if ($truthy(self['$version?'](18, 19, 20))) {
              
              self.$emit("tINTEGER", digits.$to_i(self.num_base), self.ts, self.num_suffix_s);
              p = $rb_minus(self.num_suffix_s, 1);
            } else {
              self.num_xfrm.$call(digits.$to_i(self.num_base))
            };
            
            p = $rb_plus(p, 1);
            _goto_level = _out;
            continue;;;;;}
            else if ((31)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            if ($truthy(self.herebody_s)) {
              
              p = self.herebody_s;
              self.herebody_s = nil;};;
            
            tm = p;;
            
            self.act = 72;;}
            else if ((62)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 98;;}
            else if ((92)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.sharp_s = $rb_minus(p, 1);;
            
            self.$emit_comment(self.sharp_s, (function() {if (p['$=='](pe)) {
              return $rb_minus(p, 2)
            } else {
              return p
            }; return nil; })());;
            
            self.act = 180;;}
            else if ((479)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$39 = function(chars){var self = $$39.$$s == null ? this : $$39.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$39.$$s = self, $$39.$$arity = 1, $$39));;
            
            self.act = 155;;}
            else if ((475)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 10;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$40 = function(chars){var self = $$40.$$s == null ? this : $$40.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$40.$$s = self, $$40.$$arity = 1, $$40));;
            
            self.act = 155;;}
            else if ((439)['$===']($case)) {
            
            self.te = $rb_plus(p, 1);;
            
            self.num_base = 8;
            self.num_digits_s = self.ts;;
            
            self.num_suffix_s = p;;
            
            self.num_xfrm = $send(self, 'lambda', [], ($$41 = function(chars){var self = $$41.$$s == null ? this : $$41.$$s;

            
              
              if (chars == null) {
                chars = nil;
              };
              return self.$emit("tINTEGER", chars);}, $$41.$$s = self, $$41.$$arity = 1, $$41));;
            
            self.act = 155;;}};};
        if ($truthy($rb_le(_goto_level, _again))) {
          
          $case = _lex_to_state_actions['$[]'](self.cs);
          if ((96)['$===']($case)) {
          self.ts = nil;};
          if (self.cs['$=='](0)) {
            
            _goto_level = _out;
            continue;;};
          p = $rb_plus(p, 1);
          if ($truthy(p['$!='](pe))) {
            
            _goto_level = _resume;
            continue;;};};
        if ($truthy($rb_le(_goto_level, _test_eof))) {
          if (p['$=='](eof)) {
            if ($truthy($rb_gt(_lex_eof_trans['$[]'](self.cs), 0))) {
              
              _trans = $rb_minus(_lex_eof_trans['$[]'](self.cs), 1);
              _goto_level = _eof_trans;
              continue;;}}};
        if ($truthy($rb_le(_goto_level, _out))) {
          break;};
      };;
      if ($truthy(false)) {
        testEof};
      self.p = p;
      if ($truthy(self.token_queue['$any?']())) {
        return self.token_queue.$shift()
      } else if (self.cs['$=='](klass.$lex_error())) {
        return [false, ["$error".$freeze(), self.$range($rb_minus(p, 1), p)]]
      } else {
        
        eof = self.source_pts.$size();
        return [false, ["$eof".$freeze(), self.$range(eof, eof)]];
      };
    }, $Lexer_advance$12.$$arity = 0);
    self.$protected();
    
    Opal.def(self, '$eof_codepoint?', $Lexer_eof_codepoint$ques$42 = function(point) {
      var self = this;

      return [4, 26, 0]['$include?'](point)
    }, $Lexer_eof_codepoint$ques$42.$$arity = 1);
    
    Opal.def(self, '$version?', $Lexer_version$ques$43 = function($a) {
      var $post_args, versions, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      versions = $post_args;;
      return versions['$include?'](self.version);
    }, $Lexer_version$ques$43.$$arity = -1);
    
    Opal.def(self, '$stack_pop', $Lexer_stack_pop$44 = function $$stack_pop() {
      var self = this;

      
      self.top = $rb_minus(self.top, 1);
      return self.stack['$[]'](self.top);
    }, $Lexer_stack_pop$44.$$arity = 0);
    
    Opal.def(self, '$encode_escape', $Lexer_encode_escape$45 = function $$encode_escape(ord) {
      var self = this;

      return ord.$chr().$force_encoding(self.source_buffer.$source().$encoding())
    }, $Lexer_encode_escape$45.$$arity = 1);
    
    Opal.def(self, '$tok', $Lexer_tok$46 = function $$tok(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      return self.source_buffer.$slice(Opal.Range.$new(s,e, true));
    }, $Lexer_tok$46.$$arity = -1);
    
    Opal.def(self, '$range', $Lexer_range$47 = function $$range(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      return $$$($$$($$($nesting, 'Parser'), 'Source'), 'Range').$new(self.source_buffer, s, e);
    }, $Lexer_range$47.$$arity = -1);
    
    Opal.def(self, '$emit', $Lexer_emit$48 = function $$emit(type, value, s, e) {
      var self = this, token = nil;

      
      
      if (value == null) {
        value = self.$tok();
      };
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      token = [type, [value, self.$range(s, e)]];
      self.token_queue.$push(token);
      if ($truthy(self.tokens)) {
        self.tokens.$push(token)};
      return token;
    }, $Lexer_emit$48.$$arity = -2);
    
    Opal.def(self, '$emit_table', $Lexer_emit_table$49 = function $$emit_table(table, s, e) {
      var self = this, value = nil;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      value = self.$tok(s, e);
      return self.$emit(table['$[]'](value), value, s, e);
    }, $Lexer_emit_table$49.$$arity = -2);
    
    Opal.def(self, '$emit_do', $Lexer_emit_do$50 = function $$emit_do(do_block) {
      var self = this, $ret_or_360 = nil;

      
      
      if (do_block == null) {
        do_block = false;
      };
      if ($truthy(self.cond['$active?']())) {
        return self.$emit("kDO_COND", "do".$freeze())
      } else if ($truthy((function() {if ($truthy(($ret_or_360 = self.cmdarg['$active?']()))) {
        return $ret_or_360
      } else {
        return do_block
      }; return nil; })())) {
        return self.$emit("kDO_BLOCK", "do".$freeze())
      } else {
        return self.$emit("kDO", "do".$freeze())
      };
    }, $Lexer_emit_do$50.$$arity = -1);
    
    Opal.def(self, '$arg_or_cmdarg', $Lexer_arg_or_cmdarg$51 = function $$arg_or_cmdarg(cmd_state) {
      var self = this;

      if ($truthy(cmd_state)) {
        return self.$class().$lex_en_expr_cmdarg()
      } else {
        return self.$class().$lex_en_expr_arg()
      }
    }, $Lexer_arg_or_cmdarg$51.$$arity = 1);
    
    Opal.def(self, '$emit_comment', $Lexer_emit_comment$52 = function $$emit_comment(s, e) {
      var self = this;

      
      
      if (s == null) {
        s = self.ts;
      };
      
      if (e == null) {
        e = self.te;
      };
      if ($truthy(self.comments)) {
        self.comments.$push($$$($$$($$($nesting, 'Parser'), 'Source'), 'Comment').$new(self.$range(s, e)))};
      if ($truthy(self.tokens)) {
        self.tokens.$push(["tCOMMENT", [self.$tok(s, e), self.$range(s, e)]])};
      return nil;
    }, $Lexer_emit_comment$52.$$arity = -1);
    
    Opal.def(self, '$diagnostic', $Lexer_diagnostic$53 = function $$diagnostic(type, reason, arguments$, location, highlights) {
      var self = this;

      
      
      if (arguments$ == null) {
        arguments$ = nil;
      };
      
      if (location == null) {
        location = self.$range();
      };
      
      if (highlights == null) {
        highlights = [];
      };
      return self.diagnostics.$process($$$($$($nesting, 'Parser'), 'Diagnostic').$new(type, reason, arguments$, location, highlights));
    }, $Lexer_diagnostic$53.$$arity = -3);
    
    Opal.def(self, '$push_literal', $Lexer_push_literal$54 = function $$push_literal($a) {
      var $post_args, args, self = this, new_literal = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      new_literal = $send($$($nesting, 'Literal'), 'new', [self].concat(Opal.to_a(args)));
      self.literal_stack.$push(new_literal);
      return self.$next_state_for_literal(new_literal);
    }, $Lexer_push_literal$54.$$arity = -1);
    
    Opal.def(self, '$next_state_for_literal', $Lexer_next_state_for_literal$55 = function $$next_state_for_literal(literal) {
      var self = this, $ret_or_361 = nil, $ret_or_362 = nil, $ret_or_363 = nil;

      if ($truthy((function() {if ($truthy(($ret_or_361 = literal['$words?']()))) {
        return literal['$backslash_delimited?']()
      } else {
        return $ret_or_361
      }; return nil; })())) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited_words()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited_words()
        }
      } else if ($truthy((function() {if ($truthy(($ret_or_362 = literal['$words?']()))) {
        return literal['$backslash_delimited?']()['$!']()
      } else {
        return $ret_or_362
      }; return nil; })())) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_words()
        } else {
          return self.$class().$lex_en_plain_words()
        }
      } else if ($truthy((function() {if ($truthy(($ret_or_363 = literal['$words?']()['$!']()))) {
        return literal['$backslash_delimited?']()
      } else {
        return $ret_or_363
      }; return nil; })())) {
        if ($truthy(literal['$interpolate?']())) {
          return self.$class().$lex_en_interp_backslash_delimited()
        } else {
          return self.$class().$lex_en_plain_backslash_delimited()
        }
      } else if ($truthy(literal['$interpolate?']())) {
        return self.$class().$lex_en_interp_string()
      } else {
        return self.$class().$lex_en_plain_string()
      }
    }, $Lexer_next_state_for_literal$55.$$arity = 1);
    
    Opal.def(self, '$literal', $Lexer_literal$56 = function $$literal() {
      var self = this;

      return self.literal_stack.$last()
    }, $Lexer_literal$56.$$arity = 0);
    
    Opal.def(self, '$pop_literal', $Lexer_pop_literal$57 = function $$pop_literal() {
      var self = this, old_literal = nil;

      
      old_literal = self.literal_stack.$pop();
      self.dedent_level = old_literal.$dedent_level();
      if (old_literal.$type()['$==']("tREGEXP_BEG")) {
        return self.$class().$lex_en_regexp_modifiers()
      } else {
        return self.$class().$lex_en_expr_end()
      };
    }, $Lexer_pop_literal$57.$$arity = 0);
    Opal.const_set($nesting[0], 'PUNCTUATION', $hash2(["=", "&", "|", "!", "^", "+", "-", "*", "/", "%", "~", ",", ";", ".", "..", "...", "[", "]", "(", ")", "?", ":", "&&", "||", "-@", "+@", "~@", "**", "->", "=~", "!~", "==", "!=", ">", ">>", ">=", "<", "<<", "<=", "=>", "::", "===", "<=>", "[]", "[]=", "{", "}", "`", "!@", "&."], {"=": "tEQL", "&": "tAMPER2", "|": "tPIPE", "!": "tBANG", "^": "tCARET", "+": "tPLUS", "-": "tMINUS", "*": "tSTAR2", "/": "tDIVIDE", "%": "tPERCENT", "~": "tTILDE", ",": "tCOMMA", ";": "tSEMI", ".": "tDOT", "..": "tDOT2", "...": "tDOT3", "[": "tLBRACK2", "]": "tRBRACK", "(": "tLPAREN2", ")": "tRPAREN", "?": "tEH", ":": "tCOLON", "&&": "tANDOP", "||": "tOROP", "-@": "tUMINUS", "+@": "tUPLUS", "~@": "tTILDE", "**": "tPOW", "->": "tLAMBDA", "=~": "tMATCH", "!~": "tNMATCH", "==": "tEQ", "!=": "tNEQ", ">": "tGT", ">>": "tRSHFT", ">=": "tGEQ", "<": "tLT", "<<": "tLSHFT", "<=": "tLEQ", "=>": "tASSOC", "::": "tCOLON2", "===": "tEQQ", "<=>": "tCMP", "[]": "tAREF", "[]=": "tASET", "{": "tLCURLY", "}": "tRCURLY", "`": "tBACK_REF2", "!@": "tBANG", "&.": "tANDDOT"}));
    Opal.const_set($nesting[0], 'PUNCTUATION_BEGIN', $hash2(["&", "*", "**", "+", "-", "::", "(", "{", "["], {"&": "tAMPER", "*": "tSTAR", "**": "tDSTAR", "+": "tUPLUS", "-": "tUMINUS", "::": "tCOLON3", "(": "tLPAREN", "{": "tLBRACE", "[": "tLBRACK"}));
    Opal.const_set($nesting[0], 'KEYWORDS', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF_MOD", "unless": "kUNLESS_MOD", "while": "kWHILE_MOD", "until": "kUNTIL_MOD", "rescue": "kRESCUE_MOD", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    Opal.const_set($nesting[0], 'KEYWORDS_BEGIN', $hash2(["if", "unless", "while", "until", "rescue", "defined?", "BEGIN", "END"], {"if": "kIF", "unless": "kUNLESS", "while": "kWHILE", "until": "kUNTIL", "rescue": "kRESCUE", "defined?": "kDEFINED", "BEGIN": "klBEGIN", "END": "klEND"}));
    return $send(["class", "module", "def", "undef", "begin", "end", "then", "elsif", "else", "ensure", "case", "when", "for", "break", "next", "redo", "retry", "in", "do", "return", "yield", "super", "self", "nil", "true", "false", "and", "or", "not", "alias", "__FILE__", "__LINE__", "__ENCODING__"], 'each', [], ($Lexer$58 = function(keyword){var self = $Lexer$58.$$s == null ? this : $Lexer$58.$$s;

    
      
      if (keyword == null) {
        keyword = nil;
      };
      $writer = [keyword, (($writer = [keyword, "" + "k" + (keyword.$upcase())]), $send($$($nesting, 'KEYWORDS'), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
      $send($$($nesting, 'KEYWORDS_BEGIN'), '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];}, $Lexer$58.$$s = self, $Lexer$58.$$arity = 1, $Lexer$58));
  })($$($nesting, 'Parser'), null, $nesting)
})(Opal);
