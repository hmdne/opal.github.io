/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$freeze', '$<<', '$pop', '$clear', '$empty?', '$==', '$last', '$include?', '$rindex', '$stack', '$nil?', '$!', '$>', '$in_block?', '$in_lambda?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Context');

      var $nesting = [self].concat($parent_nesting), $Context_initialize$1, $Context_push$2, $Context_pop$3, $Context_reset$4, $Context_empty$ques$5, $Context_in_class$ques$6, $Context_indirectly_in_def$ques$7, $Context_class_definition_allowed$ques$8, $Context_in_block$ques$10, $Context_in_lambda$ques$11, $Context_in_dynamic_block$ques$12;

      self.$$prototype.stack = nil;
      
      self.$attr_reader("stack");
      
      Opal.def(self, '$initialize', $Context_initialize$1 = function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$freeze();
      }, $Context_initialize$1.$$arity = 0);
      
      Opal.def(self, '$push', $Context_push$2 = function $$push(state) {
        var self = this;

        return self.stack['$<<'](state)
      }, $Context_push$2.$$arity = 1);
      
      Opal.def(self, '$pop', $Context_pop$3 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $Context_pop$3.$$arity = 0);
      
      Opal.def(self, '$reset', $Context_reset$4 = function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, $Context_reset$4.$$arity = 0);
      
      Opal.def(self, '$empty?', $Context_empty$ques$5 = function() {
        var self = this;

        return self.stack['$empty?']()
      }, $Context_empty$ques$5.$$arity = 0);
      
      Opal.def(self, '$in_class?', $Context_in_class$ques$6 = function() {
        var self = this;

        return self.stack.$last()['$==']("class")
      }, $Context_in_class$ques$6.$$arity = 0);
      
      Opal.def(self, '$indirectly_in_def?', $Context_indirectly_in_def$ques$7 = function() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.stack['$include?']("def")))) {
          return $ret_or_1
        } else {
          return self.stack['$include?']("defs")
        }
      }, $Context_indirectly_in_def$ques$7.$$arity = 0);
      
      Opal.def(self, '$class_definition_allowed?', $Context_class_definition_allowed$ques$8 = function() {
        var $$9, self = this, def_index = nil, sclass_index = nil, $ret_or_2 = nil, $ret_or_3 = nil;

        
        def_index = $send(self.$stack(), 'rindex', [], ($$9 = function(item){var self = $$9.$$s == null ? this : $$9.$$s;

        
          
          if (item == null) {
            item = nil;
          };
          return ["def", "defs"]['$include?'](item);}, $$9.$$s = self, $$9.$$arity = 1, $$9));
        sclass_index = self.$stack().$rindex("sclass");
        if ($truthy(($ret_or_2 = def_index['$nil?']()))) {
          return $ret_or_2
        } else {
          
          if ($truthy(($ret_or_3 = sclass_index['$nil?']()['$!']()))) {
            return $rb_gt(sclass_index, def_index)
          } else {
            return $ret_or_3
          };
        };
      }, $Context_class_definition_allowed$ques$8.$$arity = 0);
      Opal.alias(self, "module_definition_allowed?", "class_definition_allowed?");
      Opal.alias(self, "dynamic_const_definition_allowed?", "class_definition_allowed?");
      
      Opal.def(self, '$in_block?', $Context_in_block$ques$10 = function() {
        var self = this;

        return self.stack.$last()['$==']("block")
      }, $Context_in_block$ques$10.$$arity = 0);
      
      Opal.def(self, '$in_lambda?', $Context_in_lambda$ques$11 = function() {
        var self = this;

        return self.stack.$last()['$==']("lambda")
      }, $Context_in_lambda$ques$11.$$arity = 0);
      return (Opal.def(self, '$in_dynamic_block?', $Context_in_dynamic_block$ques$12 = function() {
        var self = this, $ret_or_4 = nil;

        if ($truthy(($ret_or_4 = self['$in_block?']()))) {
          return $ret_or_4
        } else {
          return self['$in_lambda?']()
        }
      }, $Context_in_dynamic_block$ques$12.$$arity = 0), nil) && 'in_dynamic_block?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
