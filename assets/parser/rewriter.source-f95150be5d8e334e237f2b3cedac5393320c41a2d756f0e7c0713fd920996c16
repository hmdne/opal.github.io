/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$wrap', '$insert_before', '$insert_after', '$replace', '$freeze', '$join', '$extend', '$warn_of_deprecation', '$class', '$warned_of_deprecation=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $Rewriter_rewrite$1, $Rewriter_assignment$ques$2, $Rewriter_remove$3, $Rewriter_wrap$4, $Rewriter_insert_before$5, $Rewriter_insert_after$6, $Rewriter_replace$7, $Rewriter_initialize$8;

      self.$$prototype.source_rewriter = nil;
      
      
      Opal.def(self, '$rewrite', $Rewriter_rewrite$1 = function $$rewrite(source_buffer, ast) {
        var self = this;

        
        self.source_rewriter = $$$($$($nesting, 'Source'), 'Rewriter').$new(source_buffer);
        self.$process(ast);
        return self.source_rewriter.$process();
      }, $Rewriter_rewrite$1.$$arity = 2);
      
      Opal.def(self, '$assignment?', $Rewriter_assignment$ques$2 = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, $Rewriter_assignment$ques$2.$$arity = 1);
      
      Opal.def(self, '$remove', $Rewriter_remove$3 = function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, $Rewriter_remove$3.$$arity = 1);
      
      Opal.def(self, '$wrap', $Rewriter_wrap$4 = function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, $Rewriter_wrap$4.$$arity = 3);
      
      Opal.def(self, '$insert_before', $Rewriter_insert_before$5 = function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, $Rewriter_insert_before$5.$$arity = 2);
      
      Opal.def(self, '$insert_after', $Rewriter_insert_after$6 = function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, $Rewriter_insert_after$6.$$arity = 2);
      
      Opal.def(self, '$replace', $Rewriter_replace$7 = function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, $Rewriter_replace$7.$$arity = 2);
      Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Rewriter is deprecated.", "Please update your code to use Parser::TreeRewriter instead"].$join("\n").$freeze());
      self.$extend($$($nesting, 'Deprecation'));
      return (Opal.def(self, '$initialize', $Rewriter_initialize$8 = function $$initialize($a) {
        var $post_args, $iter = $Rewriter_initialize$8.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) $Rewriter_initialize$8.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        ;
        self.$class().$warn_of_deprecation();
        
        $writer = [true];
        $send($$$($$($nesting, 'Source'), 'Rewriter'), 'warned_of_deprecation=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Rewriter_initialize$8, false, true), 'initialize', $zuper, $iter);
      }, $Rewriter_initialize$8.$$arity = -1), nil) && 'initialize';
    })($nesting[0], $$$($$$($$($nesting, 'Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
})(Opal);
