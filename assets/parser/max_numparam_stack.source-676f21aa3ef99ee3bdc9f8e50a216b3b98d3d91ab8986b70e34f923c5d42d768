/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$==', '$size', '$set', '$top', '$>', '$max', '$last', '$push', '$pop', '$private', '$-', '$length', '$[]=']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'MaxNumparamStack');

      var $nesting = [self].concat($parent_nesting), $MaxNumparamStack_initialize$1, $MaxNumparamStack_empty$ques$2, $MaxNumparamStack_has_ordinary_params$excl$3, $MaxNumparamStack_has_ordinary_params$ques$4, $MaxNumparamStack_has_numparams$ques$5, $MaxNumparamStack_register$6, $MaxNumparamStack_top$7, $MaxNumparamStack_push$8, $MaxNumparamStack_pop$9, $MaxNumparamStack_set$10;

      self.$$prototype.stack = nil;
      
      self.$attr_reader("stack");
      Opal.const_set($nesting[0], 'ORDINARY_PARAMS', -1);
      
      Opal.def(self, '$initialize', $MaxNumparamStack_initialize$1 = function $$initialize() {
        var self = this;

        return (self.stack = [])
      }, $MaxNumparamStack_initialize$1.$$arity = 0);
      
      Opal.def(self, '$empty?', $MaxNumparamStack_empty$ques$2 = function() {
        var self = this;

        return self.stack.$size()['$=='](0)
      }, $MaxNumparamStack_empty$ques$2.$$arity = 0);
      
      Opal.def(self, '$has_ordinary_params!', $MaxNumparamStack_has_ordinary_params$excl$3 = function() {
        var self = this;

        return self.$set($$($nesting, 'ORDINARY_PARAMS'))
      }, $MaxNumparamStack_has_ordinary_params$excl$3.$$arity = 0);
      
      Opal.def(self, '$has_ordinary_params?', $MaxNumparamStack_has_ordinary_params$ques$4 = function() {
        var self = this;

        return self.$top()['$==']($$($nesting, 'ORDINARY_PARAMS'))
      }, $MaxNumparamStack_has_ordinary_params$ques$4.$$arity = 0);
      
      Opal.def(self, '$has_numparams?', $MaxNumparamStack_has_numparams$ques$5 = function() {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.$top()))) {
          return $rb_gt(self.$top(), 0)
        } else {
          return $ret_or_1
        }
      }, $MaxNumparamStack_has_numparams$ques$5.$$arity = 0);
      
      Opal.def(self, '$register', $MaxNumparamStack_register$6 = function $$register(numparam) {
        var self = this;

        return self.$set([self.$top(), numparam].$max())
      }, $MaxNumparamStack_register$6.$$arity = 1);
      
      Opal.def(self, '$top', $MaxNumparamStack_top$7 = function $$top() {
        var self = this;

        return self.stack.$last()
      }, $MaxNumparamStack_top$7.$$arity = 0);
      
      Opal.def(self, '$push', $MaxNumparamStack_push$8 = function $$push() {
        var self = this;

        return self.stack.$push(0)
      }, $MaxNumparamStack_push$8.$$arity = 0);
      
      Opal.def(self, '$pop', $MaxNumparamStack_pop$9 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $MaxNumparamStack_pop$9.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$set', $MaxNumparamStack_set$10 = function $$set(value) {
        var self = this, $writer = nil;

        
        $writer = [$rb_minus(self.stack.$length(), 1), value];
        $send(self.stack, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $MaxNumparamStack_set$10.$$arity = 1), nil) && 'set';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
