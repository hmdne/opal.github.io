/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$attr_reader', '$include?', '$raise', '$join', '$inspect', '$dup', '$compile', '$==', '$line', '$last_line', '$is?', '$+', '$message', '$render_line', '$first_line_only', '$last_line_only', '$-', '$source_buffer', '$decompose_position', '$end_pos', '$>', '$private', '$source_line', '$*', '$length', '$each', '$line_range', '$intersect', '$column_range', '$size', '$[]=', '$!', '$>=', '$map', '$name', '$!=', '$resize', '$=~', '$source', '$adjust']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Diagnostic');

      var $nesting = [self].concat($parent_nesting), $Diagnostic_initialize$1, $Diagnostic_message$2, $Diagnostic_render$3, $Diagnostic_render_line$4, $Diagnostic_first_line_only$7, $Diagnostic_last_line_only$8;

      self.$$prototype.reason = self.$$prototype["arguments"] = self.$$prototype.location = self.$$prototype.level = self.$$prototype.highlights = nil;
      
      Opal.const_set($nesting[0], 'LEVELS', ["note", "warning", "error", "fatal"].$freeze());
      self.$attr_reader("level", "reason", "arguments");
      self.$attr_reader("location", "highlights");
      
      Opal.def(self, '$initialize', $Diagnostic_initialize$1 = function $$initialize(level, reason, arguments$, location, highlights) {
        var self = this, $ret_or_1 = nil;

        
        
        if (highlights == null) {
          highlights = [];
        };
        if ($truthy($$($nesting, 'LEVELS')['$include?'](level))) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "Diagnostic#level must be one of " + ($$($nesting, 'LEVELS').$join(", ")) + "; ") + ("" + (level.$inspect()) + " provided."))
        };
        if ($truthy(location)) {
        } else {
          self.$raise("Expected a location")
        };
        self.level = level;
        self.reason = reason;
        self["arguments"] = (function() {if ($truthy(($ret_or_1 = arguments$))) {
          return $ret_or_1
        } else {
          return $hash2([], {})
        }; return nil; })().$dup().$freeze();
        self.location = location;
        self.highlights = highlights.$dup().$freeze();
        return self.$freeze();
      }, $Diagnostic_initialize$1.$$arity = -5);
      
      Opal.def(self, '$message', $Diagnostic_message$2 = function $$message() {
        var self = this;

        return $$($nesting, 'Messages').$compile(self.reason, self["arguments"])
      }, $Diagnostic_message$2.$$arity = 0);
      
      Opal.def(self, '$render', $Diagnostic_render$3 = function $$render() {
        var $a, $b, self = this, $ret_or_2 = nil, first_line = nil, last_line = nil, num_lines = nil, buffer = nil, last_lineno = nil, last_column = nil;

        if ($truthy((function() {if ($truthy(($ret_or_2 = self.location.$line()['$=='](self.location.$last_line())))) {
          return $ret_or_2
        } else {
          return self.location['$is?']("\n")
        }; return nil; })())) {
          return $rb_plus(["" + (self.location) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(self.location))
        } else {
          
          first_line = self.$first_line_only(self.location);
          last_line = self.$last_line_only(self.location);
          num_lines = $rb_plus($rb_minus(self.location.$last_line(), self.location.$line()), 1);
          buffer = self.location.$source_buffer();
          $b = buffer.$decompose_position(self.location.$end_pos()), $a = Opal.to_ary($b), (last_lineno = ($a[0] == null ? nil : $a[0])), (last_column = ($a[1] == null ? nil : $a[1])), $b;
          return $rb_plus($rb_plus(["" + (self.location) + "-" + (last_lineno) + ":" + (last_column) + ": " + (self.level) + ": " + (self.$message())], self.$render_line(first_line, $rb_gt(num_lines, 2), false)), self.$render_line(last_line, false, true));
        }
      }, $Diagnostic_render$3.$$arity = 0);
      self.$private();
      
      Opal.def(self, '$render_line', $Diagnostic_render_line$4 = function $$render_line(range, ellipsis, range_end) {
        var $$5, $$6, self = this, source_line = nil, highlight_line = nil, $ret_or_3 = nil, $writer = nil;

        
        
        if (ellipsis == null) {
          ellipsis = false;
        };
        
        if (range_end == null) {
          range_end = false;
        };
        source_line = range.$source_line();
        highlight_line = $rb_times(" ", source_line.$length());
        $send(self.highlights, 'each', [], ($$5 = function(highlight){var self = $$5.$$s == null ? this : $$5.$$s, line_range = nil, $writer = nil;

        
          
          if (highlight == null) {
            highlight = nil;
          };
          line_range = range.$source_buffer().$line_range(range.$line());
          if ($truthy((highlight = highlight.$intersect(line_range)))) {
            
            $writer = [highlight.$column_range(), $rb_times("~", highlight.$size())];
            $send(highlight_line, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        if ($truthy(range['$is?']("\n"))) {
          highlight_line = $rb_plus(highlight_line, "^")
        } else if ($truthy((function() {if ($truthy(($ret_or_3 = range_end['$!']()))) {
          return $rb_ge(range.$size(), 1)
        } else {
          return $ret_or_3
        }; return nil; })())) {
          
          $writer = [range.$column_range(), $rb_plus("^", $rb_times("~", $rb_minus(range.$size(), 1)))];
          $send(highlight_line, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [range.$column_range(), $rb_times("~", range.$size())];
          $send(highlight_line, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        if ($truthy(ellipsis)) {
          highlight_line = $rb_plus(highlight_line, "...")};
        return $send([source_line, highlight_line], 'map', [], ($$6 = function(line){var self = $$6.$$s == null ? this : $$6.$$s;

        
          
          if (line == null) {
            line = nil;
          };
          return "" + (range.$source_buffer().$name()) + ":" + (range.$line()) + ": " + (line);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      }, $Diagnostic_render_line$4.$$arity = -2);
      
      Opal.def(self, '$first_line_only', $Diagnostic_first_line_only$7 = function $$first_line_only(range) {
        var self = this;

        if ($truthy(range.$line()['$!='](range.$last_line()))) {
          return range.$resize(range.$source()['$=~'](/\n/))
        } else {
          return range
        }
      }, $Diagnostic_first_line_only$7.$$arity = 1);
      return (Opal.def(self, '$last_line_only', $Diagnostic_last_line_only$8 = function $$last_line_only(range) {
        var self = this;

        if ($truthy(range.$line()['$!='](range.$last_line()))) {
          return range.$adjust($hash2(["begin_pos"], {"begin_pos": range.$source()['$=~'](/[^\n]*$/)}))
        } else {
          return range
        }
      }, $Diagnostic_last_line_only$8.$$arity = 1), nil) && 'last_line_only';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
