/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$reset', '$[]', '$push', '$dup', '$pop', '$add', '$to_sym', '$include?', '$declare', '$declared?', '$empty?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StaticEnvironment');

      var $nesting = [self].concat($parent_nesting), $StaticEnvironment_initialize$1, $StaticEnvironment_reset$2, $StaticEnvironment_extend_static$3, $StaticEnvironment_extend_dynamic$4, $StaticEnvironment_unextend$5, $StaticEnvironment_declare$6, $StaticEnvironment_declared$ques$7, $StaticEnvironment_declare_forward_args$8, $StaticEnvironment_declared_forward_args$ques$9, $StaticEnvironment_empty$ques$10;

      self.$$prototype.stack = self.$$prototype.variables = nil;
      
      Opal.const_set($nesting[0], 'FORWARD_ARGS', "FORWARD_ARGS");
      
      Opal.def(self, '$initialize', $StaticEnvironment_initialize$1 = function $$initialize() {
        var self = this;

        return self.$reset()
      }, $StaticEnvironment_initialize$1.$$arity = 0);
      
      Opal.def(self, '$reset', $StaticEnvironment_reset$2 = function $$reset() {
        var self = this;

        
        self.variables = $$($nesting, 'Set')['$[]']();
        return (self.stack = []);
      }, $StaticEnvironment_reset$2.$$arity = 0);
      
      Opal.def(self, '$extend_static', $StaticEnvironment_extend_static$3 = function $$extend_static() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = $$($nesting, 'Set')['$[]']();
        return self;
      }, $StaticEnvironment_extend_static$3.$$arity = 0);
      
      Opal.def(self, '$extend_dynamic', $StaticEnvironment_extend_dynamic$4 = function $$extend_dynamic() {
        var self = this;

        
        self.stack.$push(self.variables);
        self.variables = self.variables.$dup();
        return self;
      }, $StaticEnvironment_extend_dynamic$4.$$arity = 0);
      
      Opal.def(self, '$unextend', $StaticEnvironment_unextend$5 = function $$unextend() {
        var self = this;

        
        self.variables = self.stack.$pop();
        return self;
      }, $StaticEnvironment_unextend$5.$$arity = 0);
      
      Opal.def(self, '$declare', $StaticEnvironment_declare$6 = function $$declare(name) {
        var self = this;

        
        self.variables.$add(name.$to_sym());
        return self;
      }, $StaticEnvironment_declare$6.$$arity = 1);
      
      Opal.def(self, '$declared?', $StaticEnvironment_declared$ques$7 = function(name) {
        var self = this;

        return self.variables['$include?'](name.$to_sym())
      }, $StaticEnvironment_declared$ques$7.$$arity = 1);
      
      Opal.def(self, '$declare_forward_args', $StaticEnvironment_declare_forward_args$8 = function $$declare_forward_args() {
        var self = this;

        return self.$declare($$($nesting, 'FORWARD_ARGS'))
      }, $StaticEnvironment_declare_forward_args$8.$$arity = 0);
      
      Opal.def(self, '$declared_forward_args?', $StaticEnvironment_declared_forward_args$ques$9 = function() {
        var self = this;

        return self['$declared?']($$($nesting, 'FORWARD_ARGS'))
      }, $StaticEnvironment_declared_forward_args$ques$9.$$arity = 0);
      return (Opal.def(self, '$empty?', $StaticEnvironment_empty$ques$10 = function() {
        var self = this;

        return self.stack['$empty?']()
      }, $StaticEnvironment_empty$ques$10.$$arity = 0), nil) && 'empty?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
