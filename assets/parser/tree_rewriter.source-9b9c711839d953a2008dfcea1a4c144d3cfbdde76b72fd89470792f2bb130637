/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$new', '$process', '$include?', '$type', '$remove', '$wrap', '$insert_before', '$insert_after', '$replace']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TreeRewriter');

      var $nesting = [self].concat($parent_nesting), $TreeRewriter_rewrite$1, $TreeRewriter_assignment$ques$2, $TreeRewriter_remove$3, $TreeRewriter_wrap$4, $TreeRewriter_insert_before$5, $TreeRewriter_insert_after$6, $TreeRewriter_replace$7;

      self.$$prototype.source_rewriter = nil;
      
      
      Opal.def(self, '$rewrite', $TreeRewriter_rewrite$1 = function $$rewrite(source_buffer, ast, $kwargs) {
        var policy, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        policy = Opal.kwrestargs($kwargs, {});;
        self.source_rewriter = $$$($$$($$($nesting, 'Parser'), 'Source'), 'TreeRewriter').$new(source_buffer, Opal.to_hash(policy));
        self.$process(ast);
        return self.source_rewriter.$process();
      }, $TreeRewriter_rewrite$1.$$arity = -3);
      
      Opal.def(self, '$assignment?', $TreeRewriter_assignment$ques$2 = function(node) {
        var self = this;

        return ["lvasgn", "ivasgn", "gvasgn", "cvasgn", "casgn"]['$include?'](node.$type())
      }, $TreeRewriter_assignment$ques$2.$$arity = 1);
      
      Opal.def(self, '$remove', $TreeRewriter_remove$3 = function $$remove(range) {
        var self = this;

        return self.source_rewriter.$remove(range)
      }, $TreeRewriter_remove$3.$$arity = 1);
      
      Opal.def(self, '$wrap', $TreeRewriter_wrap$4 = function $$wrap(range, before, after) {
        var self = this;

        return self.source_rewriter.$wrap(range, before, after)
      }, $TreeRewriter_wrap$4.$$arity = 3);
      
      Opal.def(self, '$insert_before', $TreeRewriter_insert_before$5 = function $$insert_before(range, content) {
        var self = this;

        return self.source_rewriter.$insert_before(range, content)
      }, $TreeRewriter_insert_before$5.$$arity = 2);
      
      Opal.def(self, '$insert_after', $TreeRewriter_insert_after$6 = function $$insert_after(range, content) {
        var self = this;

        return self.source_rewriter.$insert_after(range, content)
      }, $TreeRewriter_insert_after$6.$$arity = 2);
      return (Opal.def(self, '$replace', $TreeRewriter_replace$7 = function $$replace(range, content) {
        var self = this;

        return self.source_rewriter.$replace(range, content)
      }, $TreeRewriter_replace$7.$$arity = 2), nil) && 'replace';
    })($nesting[0], $$$($$$($$($nesting, 'Parser'), 'AST'), 'Processor'), $nesting)
  })($nesting[0], $nesting)
})(Opal);
