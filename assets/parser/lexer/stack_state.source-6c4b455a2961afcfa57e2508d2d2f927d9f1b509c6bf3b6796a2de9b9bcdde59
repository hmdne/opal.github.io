/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$freeze', '$clear', '$|', '$<<', '$&', '$>>', '$==', '$[]', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'StackState');

      var $nesting = [self].concat($parent_nesting), $StackState_initialize$1, $StackState_clear$2, $StackState_push$3, $StackState_pop$4, $StackState_lexpop$5, $StackState_active$ques$6, $StackState_empty$ques$7, $StackState_to_s$8;

      self.$$prototype.stack = self.$$prototype.name = nil;
      
      
      Opal.def(self, '$initialize', $StackState_initialize$1 = function $$initialize(name) {
        var self = this;

        
        self.name = name.$freeze();
        return self.$clear();
      }, $StackState_initialize$1.$$arity = 1);
      
      Opal.def(self, '$clear', $StackState_clear$2 = function $$clear() {
        var self = this;

        return (self.stack = 0)
      }, $StackState_clear$2.$$arity = 0);
      
      Opal.def(self, '$push', $StackState_push$3 = function $$push(bit) {
        var self = this, bit_value = nil;

        
        bit_value = (function() {if ($truthy(bit)) {
          return 1
        } else {
          return 0
        }; return nil; })();
        self.stack = self.stack['$<<'](1)['$|'](bit_value);
        return bit;
      }, $StackState_push$3.$$arity = 1);
      
      Opal.def(self, '$pop', $StackState_pop$4 = function $$pop() {
        var self = this, bit_value = nil;

        
        bit_value = self.stack['$&'](1);
        self.stack = self.stack['$>>'](1);
        return bit_value['$=='](1);
      }, $StackState_pop$4.$$arity = 0);
      
      Opal.def(self, '$lexpop', $StackState_lexpop$5 = function $$lexpop() {
        var self = this;

        
        self.stack = self.stack['$>>'](1)['$|'](self.stack['$&'](1));
        return self.stack['$[]'](0)['$=='](1);
      }, $StackState_lexpop$5.$$arity = 0);
      
      Opal.def(self, '$active?', $StackState_active$ques$6 = function() {
        var self = this;

        return self.stack['$[]'](0)['$=='](1)
      }, $StackState_active$ques$6.$$arity = 0);
      
      Opal.def(self, '$empty?', $StackState_empty$ques$7 = function() {
        var self = this;

        return self.stack['$=='](0)
      }, $StackState_empty$ques$7.$$arity = 0);
      
      Opal.def(self, '$to_s', $StackState_to_s$8 = function $$to_s() {
        var self = this;

        return "" + "[" + (self.stack.$to_s(2)) + " <= " + (self.name) + "]"
      }, $StackState_to_s$8.$$arity = 0);
      return Opal.alias(self, "inspect", "to_s");
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
