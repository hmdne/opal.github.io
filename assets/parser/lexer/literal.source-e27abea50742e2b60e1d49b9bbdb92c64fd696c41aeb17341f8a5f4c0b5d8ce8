/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $enc = Opal.enc, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$coerce_encoding', '$include?', '$send', '$+', '$[]', '$fetch', '$==', '$!', '$heredoc?', '$start_with?', '$freeze', '$clear_buffer', '$emit_start_tok', '$type', '$words?', '$=~', '$delimiter?', '$-', '$extend_space', '$!=', '$flush_string', '$emit', '$each_char', '$===', '$%', '$nil?', '$>', '$<<', '$empty?', '$extend_content', '$protected', '$lstrip', '$b', '$dup', '$force_encoding', '$encoding', '$source', '$source_buffer', '$length']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Literal');

      var $nesting = [self].concat($parent_nesting), $Literal_initialize$1, $Literal_interpolate$ques$2, $Literal_words$ques$3, $Literal_regexp$ques$4, $Literal_heredoc$ques$5, $Literal_plain_heredoc$ques$6, $Literal_squiggly_heredoc$ques$7, $Literal_backslash_delimited$ques$8, $Literal_type$9, $Literal_munge_escape$ques$10, $Literal_nest_and_try_closing$11, $Literal_infer_indent_level$12, $Literal_start_interp_brace$14, $Literal_end_interp_brace_and_try_closing$15, $Literal_extend_string$16, $Literal_flush_string$17, $Literal_extend_content$18, $Literal_extend_space$19, $Literal_supports_line_continuation_via_slash$ques$20, $Literal_delimiter$ques$21, $Literal_coerce_encoding$22, $Literal_clear_buffer$23, $Literal_emit_start_tok$24, $Literal_emit$25;

      self.$$prototype.lexer = self.$$prototype.start_tok = self.$$prototype.str_type = self.$$prototype.monolithic = self.$$prototype.interpolate = self.$$prototype.heredoc_e = self.$$prototype.dedent_body = self.$$prototype.end_delim = self.$$prototype.start_delim = self.$$prototype.nesting = self.$$prototype.label_allowed = self.$$prototype.buffer = self.$$prototype.str_s = self.$$prototype.interp_braces = self.$$prototype.buffer_s = self.$$prototype.buffer_e = self.$$prototype.space_emitted = self.$$prototype.indent = nil;
      
      Opal.const_set($nesting[0], 'DELIMITERS', $hash2(["(", "[", "{", "<"], {"(": $enc(")", "ASCII-8BIT"), "[": $enc("]", "ASCII-8BIT"), "{": $enc("}", "ASCII-8BIT"), "<": $enc(">", "ASCII-8BIT")}));
      Opal.const_set($nesting[0], 'TYPES', $hash2(["'", "<<'", "%q", "\"", "<<\"", "%", "%Q", "%w", "%W", "%i", "%I", ":'", "%s", ":\"", "/", "%r", "%x", "`", "<<`"], {"'": ["tSTRING_BEG", false], "<<'": ["tSTRING_BEG", false], "%q": ["tSTRING_BEG", false], "\"": ["tSTRING_BEG", true], "<<\"": ["tSTRING_BEG", true], "%": ["tSTRING_BEG", true], "%Q": ["tSTRING_BEG", true], "%w": ["tQWORDS_BEG", false], "%W": ["tWORDS_BEG", true], "%i": ["tQSYMBOLS_BEG", false], "%I": ["tSYMBOLS_BEG", true], ":'": ["tSYMBEG", false], "%s": ["tSYMBEG", false], ":\"": ["tSYMBEG", true], "/": ["tREGEXP_BEG", true], "%r": ["tREGEXP_BEG", true], "%x": ["tXSTRING_BEG", true], "`": ["tXSTRING_BEG", true], "<<`": ["tXSTRING_BEG", true]}));
      self.$attr_reader("heredoc_e", "str_s", "dedent_level");
      self.$attr_accessor("saved_herebody_s");
      
      Opal.def(self, '$initialize', $Literal_initialize$1 = function $$initialize(lexer, str_type, delimiter, str_s, heredoc_e, indent, dedent_body, label_allowed) {
        var $a, $b, self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        
        
        if (heredoc_e == null) {
          heredoc_e = nil;
        };
        
        if (indent == null) {
          indent = false;
        };
        
        if (dedent_body == null) {
          dedent_body = false;
        };
        
        if (label_allowed == null) {
          label_allowed = false;
        };
        self.lexer = lexer;
        self.nesting = 1;
        str_type = self.$coerce_encoding(str_type);
        delimiter = self.$coerce_encoding(delimiter);
        if ($truthy($$($nesting, 'TYPES')['$include?'](str_type))) {
        } else {
          lexer.$send("diagnostic", "error", "unexpected_percent_str", $hash2(["type"], {"type": str_type}), self.lexer.$send("range", str_s, $rb_plus(str_s, 2)))
        };
        self.str_type = str_type;
        self.str_s = str_s;
        $b = $$($nesting, 'TYPES')['$[]'](str_type), $a = Opal.to_ary($b), (self.start_tok = ($a[0] == null ? nil : $a[0])), (self.interpolate = ($a[1] == null ? nil : $a[1])), $b;
        self.start_delim = (function() {if ($truthy($$($nesting, 'DELIMITERS')['$include?'](delimiter))) {
          return delimiter
        } else {
          return nil
        }; return nil; })();
        self.end_delim = $$($nesting, 'DELIMITERS').$fetch(delimiter, delimiter);
        self.heredoc_e = heredoc_e;
        self.indent = indent;
        self.label_allowed = label_allowed;
        self.dedent_body = dedent_body;
        self.dedent_level = nil;
        self.interp_braces = 0;
        self.space_emitted = true;
        self.monolithic = (function() {if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.start_tok['$==']("tSTRING_BEG")))) {
          return [$enc("'", "ASCII-8BIT"), $enc("\"", "ASCII-8BIT")]['$include?'](str_type)
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          return self['$heredoc?']()['$!']()
        } else {
          return $ret_or_1
        }; return nil; })();
        if ($truthy(self.str_type['$start_with?']($enc("%", "ASCII-8BIT").$freeze()))) {
          self.str_type = $rb_plus(self.str_type, delimiter)};
        self.$clear_buffer();
        if ($truthy(self.monolithic)) {
          return nil
        } else {
          return self.$emit_start_tok()
        };
      }, $Literal_initialize$1.$$arity = -5);
      
      Opal.def(self, '$interpolate?', $Literal_interpolate$ques$2 = function() {
        var self = this;

        return self.interpolate
      }, $Literal_interpolate$ques$2.$$arity = 0);
      
      Opal.def(self, '$words?', $Literal_words$ques$3 = function() {
        var self = this, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

        if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = self.$type()['$==']("tWORDS_BEG")))) {
          return $ret_or_5
        } else {
          return self.$type()['$==']("tQWORDS_BEG")
        }; return nil; })()))) {
          return $ret_or_4
        } else {
          return self.$type()['$==']("tSYMBOLS_BEG")
        }; return nil; })()))) {
          return $ret_or_3
        } else {
          return self.$type()['$==']("tQSYMBOLS_BEG")
        }
      }, $Literal_words$ques$3.$$arity = 0);
      
      Opal.def(self, '$regexp?', $Literal_regexp$ques$4 = function() {
        var self = this;

        return self.$type()['$==']("tREGEXP_BEG")
      }, $Literal_regexp$ques$4.$$arity = 0);
      
      Opal.def(self, '$heredoc?', $Literal_heredoc$ques$5 = function() {
        var self = this;

        return self.heredoc_e['$!']()['$!']()
      }, $Literal_heredoc$ques$5.$$arity = 0);
      
      Opal.def(self, '$plain_heredoc?', $Literal_plain_heredoc$ques$6 = function() {
        var self = this, $ret_or_6 = nil;

        if ($truthy(($ret_or_6 = self['$heredoc?']()))) {
          return self.dedent_body['$!']()
        } else {
          return $ret_or_6
        }
      }, $Literal_plain_heredoc$ques$6.$$arity = 0);
      
      Opal.def(self, '$squiggly_heredoc?', $Literal_squiggly_heredoc$ques$7 = function() {
        var self = this, $ret_or_7 = nil;

        if ($truthy(($ret_or_7 = self['$heredoc?']()))) {
          return self.dedent_body
        } else {
          return $ret_or_7
        }
      }, $Literal_squiggly_heredoc$ques$7.$$arity = 0);
      
      Opal.def(self, '$backslash_delimited?', $Literal_backslash_delimited$ques$8 = function() {
        var self = this;

        return self.end_delim['$==']($enc("\\", "ASCII-8BIT").$freeze())
      }, $Literal_backslash_delimited$ques$8.$$arity = 0);
      
      Opal.def(self, '$type', $Literal_type$9 = function $$type() {
        var self = this;

        return self.start_tok
      }, $Literal_type$9.$$arity = 0);
      
      Opal.def(self, '$munge_escape?', $Literal_munge_escape$ques$10 = function(character) {
        var self = this, $ret_or_8 = nil;

        
        character = self.$coerce_encoding(character);
        if ($truthy((function() {if ($truthy(($ret_or_8 = self['$words?']()))) {
          return character['$=~'](/[ \t\v\r\f\n]/)
        } else {
          return $ret_or_8
        }; return nil; })())) {
          return true
        } else {
          return [$enc("\\", "ASCII-8BIT").$freeze(), self.start_delim, self.end_delim]['$include?'](character)
        };
      }, $Literal_munge_escape$ques$10.$$arity = 1);
      
      Opal.def(self, '$nest_and_try_closing', $Literal_nest_and_try_closing$11 = function $$nest_and_try_closing(delimiter, ts, te, lookahead) {
        var self = this, $ret_or_9 = nil, $ret_or_10 = nil, $ret_or_11 = nil, $ret_or_12 = nil, $ret_or_13 = nil;

        
        
        if (lookahead == null) {
          lookahead = nil;
        };
        delimiter = self.$coerce_encoding(delimiter);
        if ($truthy((function() {if ($truthy(($ret_or_9 = self.start_delim))) {
          return self.start_delim['$=='](delimiter)
        } else {
          return $ret_or_9
        }; return nil; })())) {
          self.nesting = $rb_plus(self.nesting, 1)
        } else if ($truthy(self['$delimiter?'](delimiter))) {
          self.nesting = $rb_minus(self.nesting, 1)};
        if (self.nesting['$=='](0)) {
          
          if ($truthy(self['$words?']())) {
            self.$extend_space(ts, ts)};
          if ($truthy((function() {if ($truthy(($ret_or_10 = (function() {if ($truthy(($ret_or_11 = (function() {if ($truthy(($ret_or_12 = (function() {if ($truthy(($ret_or_13 = lookahead))) {
            return self.label_allowed
          } else {
            return $ret_or_13
          }; return nil; })()))) {
            return lookahead['$[]'](0)['$==']($enc(":", "ASCII-8BIT"))
          } else {
            return $ret_or_12
          }; return nil; })()))) {
            return lookahead['$[]'](1)['$!=']($enc(":", "ASCII-8BIT"))
          } else {
            return $ret_or_11
          }; return nil; })()))) {
            return self.start_tok['$==']("tSTRING_BEG")
          } else {
            return $ret_or_10
          }; return nil; })())) {
            
            self.$flush_string();
            return self.$emit("tLABEL_END", self.end_delim, ts, $rb_plus(te, 1));
          } else if ($truthy(self.monolithic)) {
            return self.$emit("tSTRING", self.buffer, self.str_s, te)
          } else {
            
            if ($truthy(self['$heredoc?']())) {
            } else {
              self.$flush_string()
            };
            return self.$emit("tSTRING_END", self.end_delim, ts, te);
          };
        } else {
          return nil
        };
      }, $Literal_nest_and_try_closing$11.$$arity = -4);
      
      Opal.def(self, '$infer_indent_level', $Literal_infer_indent_level$12 = function $$infer_indent_level(line) {
        var $$13, self = this, indent_level = nil;

        
        if ($truthy(self.dedent_body['$!']())) {
          return nil};
        indent_level = 0;
        return (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_char', [], ($$13 = function(char$){var self = $$13.$$s == null ? this : $$13.$$s, $case = nil, $ret_or_14 = nil;
          if (self.dedent_level == null) self.dedent_level = nil;

        
          
          if (char$ == null) {
            char$ = nil;
          };
          return (function() {$case = char$;
          if (" "['$===']($case)) {return (indent_level = $rb_plus(indent_level, 1))}
          else if ("\t"['$===']($case)) {return (indent_level = $rb_plus(indent_level, $rb_minus(8, indent_level['$%'](8))))}
          else {
          if ($truthy((function() {if ($truthy(($ret_or_14 = self.dedent_level['$nil?']()))) {
            return $ret_or_14
          } else {
            return $rb_gt(self.dedent_level, indent_level)
          }; return nil; })())) {
            self.dedent_level = indent_level};
          
          Opal.brk(nil, $brk);}})();}, $$13.$$s = self, $$13.$$brk = $brk, $$13.$$arity = 1, $$13))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, $Literal_infer_indent_level$12.$$arity = 1);
      
      Opal.def(self, '$start_interp_brace', $Literal_start_interp_brace$14 = function $$start_interp_brace() {
        var self = this;

        return (self.interp_braces = $rb_plus(self.interp_braces, 1))
      }, $Literal_start_interp_brace$14.$$arity = 0);
      
      Opal.def(self, '$end_interp_brace_and_try_closing', $Literal_end_interp_brace_and_try_closing$15 = function $$end_interp_brace_and_try_closing() {
        var self = this;

        
        self.interp_braces = $rb_minus(self.interp_braces, 1);
        
        return self.interp_braces['$=='](0);;
      }, $Literal_end_interp_brace_and_try_closing$15.$$arity = 0);
      
      Opal.def(self, '$extend_string', $Literal_extend_string$16 = function $$extend_string(string, ts, te) {
        var self = this, $ret_or_15 = nil;

        
        self.buffer_s = (function() {if ($truthy(($ret_or_15 = self.buffer_s))) {
          return $ret_or_15
        } else {
          return ts
        }; return nil; })();
        self.buffer_e = te;
        return self.buffer['$<<'](string);
      }, $Literal_extend_string$16.$$arity = 3);
      
      Opal.def(self, '$flush_string', $Literal_flush_string$17 = function $$flush_string() {
        var self = this;

        
        if ($truthy(self.monolithic)) {
          
          self.$emit_start_tok();
          self.monolithic = false;};
        if ($truthy(self.buffer['$empty?']())) {
          return nil
        } else {
          
          self.$emit("tSTRING_CONTENT", self.buffer, self.buffer_s, self.buffer_e);
          self.$clear_buffer();
          return self.$extend_content();
        };
      }, $Literal_flush_string$17.$$arity = 0);
      
      Opal.def(self, '$extend_content', $Literal_extend_content$18 = function $$extend_content() {
        var self = this;

        return (self.space_emitted = false)
      }, $Literal_extend_content$18.$$arity = 0);
      
      Opal.def(self, '$extend_space', $Literal_extend_space$19 = function $$extend_space(ts, te) {
        var self = this;

        
        self.$flush_string();
        if ($truthy(self.space_emitted)) {
          return nil
        } else {
          
          self.$emit("tSPACE", nil, ts, te);
          return (self.space_emitted = true);
        };
      }, $Literal_extend_space$19.$$arity = 2);
      
      Opal.def(self, '$supports_line_continuation_via_slash?', $Literal_supports_line_continuation_via_slash$ques$20 = function() {
        var self = this, $ret_or_16 = nil;

        if ($truthy(($ret_or_16 = self['$words?']()['$!']()))) {
          return self.interpolate
        } else {
          return $ret_or_16
        }
      }, $Literal_supports_line_continuation_via_slash$ques$20.$$arity = 0);
      self.$protected();
      
      Opal.def(self, '$delimiter?', $Literal_delimiter$ques$21 = function(delimiter) {
        var self = this;

        if ($truthy(self.indent)) {
          return self.end_delim['$=='](delimiter.$lstrip())
        } else {
          return self.end_delim['$=='](delimiter)
        }
      }, $Literal_delimiter$ques$21.$$arity = 1);
      
      Opal.def(self, '$coerce_encoding', $Literal_coerce_encoding$22 = function $$coerce_encoding(string) {
        var self = this;

        return string.$b()
      }, $Literal_coerce_encoding$22.$$arity = 1);
      
      Opal.def(self, '$clear_buffer', $Literal_clear_buffer$23 = function $$clear_buffer() {
        var self = this;

        
        self.buffer = $enc("", "ASCII-8BIT").$dup();
        self.buffer.$force_encoding(self.lexer.$source_buffer().$source().$encoding());
        self.buffer_s = nil;
        return (self.buffer_e = nil);
      }, $Literal_clear_buffer$23.$$arity = 0);
      
      Opal.def(self, '$emit_start_tok', $Literal_emit_start_tok$24 = function $$emit_start_tok() {
        var self = this, str_e = nil, $ret_or_17 = nil;

        
        str_e = (function() {if ($truthy(($ret_or_17 = self.heredoc_e))) {
          return $ret_or_17
        } else {
          return $rb_plus(self.str_s, self.str_type.$length())
        }; return nil; })();
        return self.$emit(self.start_tok, self.str_type, self.str_s, str_e);
      }, $Literal_emit_start_tok$24.$$arity = 0);
      return (Opal.def(self, '$emit', $Literal_emit$25 = function $$emit(token, type, s, e) {
        var self = this;

        return self.lexer.$send("emit", token, type, s, e)
      }, $Literal_emit$25.$$arity = 4), nil) && 'emit';
    })($$($nesting, 'Lexer'), null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
