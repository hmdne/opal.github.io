/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$updated', '$process_all', '$on_var', '$!', '$nil?', '$process', '$on_vasgn', '$on_argument', '$is_a?', '$[]', '$children', '$process_regular_node', '$warn']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Processor');

        var $nesting = [self].concat($parent_nesting), $Processor_process_regular_node$1, $Processor_on_var$2, $Processor_process_variable_node$3, $Processor_on_vasgn$4, $Processor_process_var_asgn_node$5, $Processor_on_op_asgn$6, $Processor_on_const$7, $Processor_on_casgn$8, $Processor_on_argument$9, $Processor_process_argument_node$10, $Processor_on_procarg0$11, $Processor_on_def$12, $Processor_on_defs$13, $Processor_on_send$14, $Processor_on_numblock$15, $Processor_process_variable_node$16, $Processor_process_var_asgn_node$17, $Processor_process_argument_node$18, $Processor_on_empty_else$19;

        
        
        Opal.def(self, '$process_regular_node', $Processor_process_regular_node$1 = function $$process_regular_node(node) {
          var self = this;

          return node.$updated(nil, self.$process_all(node))
        }, $Processor_process_regular_node$1.$$arity = 1);
        Opal.alias(self, "on_dstr", "process_regular_node");
        Opal.alias(self, "on_dsym", "process_regular_node");
        Opal.alias(self, "on_regexp", "process_regular_node");
        Opal.alias(self, "on_xstr", "process_regular_node");
        Opal.alias(self, "on_splat", "process_regular_node");
        Opal.alias(self, "on_kwsplat", "process_regular_node");
        Opal.alias(self, "on_array", "process_regular_node");
        Opal.alias(self, "on_pair", "process_regular_node");
        Opal.alias(self, "on_hash", "process_regular_node");
        Opal.alias(self, "on_kwargs", "process_regular_node");
        Opal.alias(self, "on_irange", "process_regular_node");
        Opal.alias(self, "on_erange", "process_regular_node");
        
        Opal.def(self, '$on_var', $Processor_on_var$2 = function $$on_var(node) {
          var self = this;

          return node
        }, $Processor_on_var$2.$$arity = 1);
        
        Opal.def(self, '$process_variable_node', $Processor_process_variable_node$3 = function $$process_variable_node(node) {
          var self = this;

          return self.$on_var(node)
        }, $Processor_process_variable_node$3.$$arity = 1);
        Opal.alias(self, "on_lvar", "process_variable_node");
        Opal.alias(self, "on_ivar", "process_variable_node");
        Opal.alias(self, "on_gvar", "process_variable_node");
        Opal.alias(self, "on_cvar", "process_variable_node");
        Opal.alias(self, "on_back_ref", "process_variable_node");
        Opal.alias(self, "on_nth_ref", "process_variable_node");
        
        Opal.def(self, '$on_vasgn', $Processor_on_vasgn$4 = function $$on_vasgn(node) {
          var $a, self = this, name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [name, self.$process(value_node)])
          } else {
            return node
          };
        }, $Processor_on_vasgn$4.$$arity = 1);
        
        Opal.def(self, '$process_var_asgn_node', $Processor_process_var_asgn_node$5 = function $$process_var_asgn_node(node) {
          var self = this;

          return self.$on_vasgn(node)
        }, $Processor_process_var_asgn_node$5.$$arity = 1);
        Opal.alias(self, "on_lvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_ivasgn", "process_var_asgn_node");
        Opal.alias(self, "on_gvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_cvasgn", "process_var_asgn_node");
        Opal.alias(self, "on_and_asgn", "process_regular_node");
        Opal.alias(self, "on_or_asgn", "process_regular_node");
        
        Opal.def(self, '$on_op_asgn', $Processor_on_op_asgn$6 = function $$on_op_asgn(node) {
          var $a, self = this, var_node = nil, method_name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (var_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(var_node), method_name, self.$process(value_node)]);
        }, $Processor_on_op_asgn$6.$$arity = 1);
        Opal.alias(self, "on_mlhs", "process_regular_node");
        Opal.alias(self, "on_masgn", "process_regular_node");
        
        Opal.def(self, '$on_const', $Processor_on_const$7 = function $$on_const(node) {
          var $a, self = this, scope_node = nil, name = nil;

          
          $a = [].concat(Opal.to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, [self.$process(scope_node), name]);
        }, $Processor_on_const$7.$$arity = 1);
        
        Opal.def(self, '$on_casgn', $Processor_on_casgn$8 = function $$on_casgn(node) {
          var $a, self = this, scope_node = nil, name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (scope_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (value_node = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [self.$process(scope_node), name, self.$process(value_node)])
          } else {
            return node.$updated(nil, [self.$process(scope_node), name])
          };
        }, $Processor_on_casgn$8.$$arity = 1);
        Opal.alias(self, "on_args", "process_regular_node");
        
        Opal.def(self, '$on_argument', $Processor_on_argument$9 = function $$on_argument(node) {
          var $a, self = this, arg_name = nil, value_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (arg_name = ($a[0] == null ? nil : $a[0])), (value_node = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(value_node['$nil?']()['$!']())) {
            return node.$updated(nil, [arg_name, self.$process(value_node)])
          } else {
            return node
          };
        }, $Processor_on_argument$9.$$arity = 1);
        
        Opal.def(self, '$process_argument_node', $Processor_process_argument_node$10 = function $$process_argument_node(node) {
          var self = this;

          return self.$on_argument(node)
        }, $Processor_process_argument_node$10.$$arity = 1);
        Opal.alias(self, "on_arg", "process_argument_node");
        Opal.alias(self, "on_optarg", "process_argument_node");
        Opal.alias(self, "on_restarg", "process_argument_node");
        Opal.alias(self, "on_blockarg", "process_argument_node");
        Opal.alias(self, "on_shadowarg", "process_argument_node");
        Opal.alias(self, "on_kwarg", "process_argument_node");
        Opal.alias(self, "on_kwoptarg", "process_argument_node");
        Opal.alias(self, "on_kwrestarg", "process_argument_node");
        Opal.alias(self, "on_forward_arg", "process_argument_node");
        
        Opal.def(self, '$on_procarg0', $Processor_on_procarg0$11 = function $$on_procarg0(node) {
          var self = this;

          if ($truthy(node.$children()['$[]'](0)['$is_a?']($$($nesting, 'Symbol')))) {
            return self.$on_argument(node)
          } else {
            return self.$process_regular_node(node)
          }
        }, $Processor_on_procarg0$11.$$arity = 1);
        Opal.alias(self, "on_arg_expr", "process_regular_node");
        Opal.alias(self, "on_restarg_expr", "process_regular_node");
        Opal.alias(self, "on_blockarg_expr", "process_regular_node");
        Opal.alias(self, "on_block_pass", "process_regular_node");
        Opal.alias(self, "on_module", "process_regular_node");
        Opal.alias(self, "on_class", "process_regular_node");
        Opal.alias(self, "on_sclass", "process_regular_node");
        
        Opal.def(self, '$on_def', $Processor_on_def$12 = function $$on_def(node) {
          var $a, self = this, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (args_node = ($a[1] == null ? nil : $a[1])), (body_node = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [name, self.$process(args_node), self.$process(body_node)]);
        }, $Processor_on_def$12.$$arity = 1);
        
        Opal.def(self, '$on_defs', $Processor_on_defs$13 = function $$on_defs(node) {
          var $a, self = this, definee_node = nil, name = nil, args_node = nil, body_node = nil;

          
          $a = [].concat(Opal.to_a(node)), (definee_node = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), (args_node = ($a[2] == null ? nil : $a[2])), (body_node = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, [self.$process(definee_node), name, self.$process(args_node), self.$process(body_node)]);
        }, $Processor_on_defs$13.$$arity = 1);
        Opal.alias(self, "on_undef", "process_regular_node");
        Opal.alias(self, "on_alias", "process_regular_node");
        
        Opal.def(self, '$on_send', $Processor_on_send$14 = function $$on_send(node) {
          var $a, self = this, receiver_node = nil, method_name = nil, arg_nodes = nil;

          
          $a = [].concat(Opal.to_a(node)), (receiver_node = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (arg_nodes = $slice.call($a, 2)), $a;
          if ($truthy(receiver_node)) {
            receiver_node = self.$process(receiver_node)};
          return node.$updated(nil, [receiver_node, method_name].concat(Opal.to_a(self.$process_all(arg_nodes))));
        }, $Processor_on_send$14.$$arity = 1);
        Opal.alias(self, "on_csend", "on_send");
        Opal.alias(self, "on_index", "process_regular_node");
        Opal.alias(self, "on_indexasgn", "process_regular_node");
        Opal.alias(self, "on_block", "process_regular_node");
        Opal.alias(self, "on_lambda", "process_regular_node");
        
        Opal.def(self, '$on_numblock', $Processor_on_numblock$15 = function $$on_numblock(node) {
          var $a, self = this, method_call = nil, max_numparam = nil, body = nil;

          
          $a = [].concat(Opal.to_a(node)), (method_call = ($a[0] == null ? nil : $a[0])), (max_numparam = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, [self.$process(method_call), max_numparam, self.$process(body)]);
        }, $Processor_on_numblock$15.$$arity = 1);
        Opal.alias(self, "on_while", "process_regular_node");
        Opal.alias(self, "on_while_post", "process_regular_node");
        Opal.alias(self, "on_until", "process_regular_node");
        Opal.alias(self, "on_until_post", "process_regular_node");
        Opal.alias(self, "on_for", "process_regular_node");
        Opal.alias(self, "on_return", "process_regular_node");
        Opal.alias(self, "on_break", "process_regular_node");
        Opal.alias(self, "on_next", "process_regular_node");
        Opal.alias(self, "on_redo", "process_regular_node");
        Opal.alias(self, "on_retry", "process_regular_node");
        Opal.alias(self, "on_super", "process_regular_node");
        Opal.alias(self, "on_yield", "process_regular_node");
        Opal.alias(self, "on_defined?", "process_regular_node");
        Opal.alias(self, "on_not", "process_regular_node");
        Opal.alias(self, "on_and", "process_regular_node");
        Opal.alias(self, "on_or", "process_regular_node");
        Opal.alias(self, "on_if", "process_regular_node");
        Opal.alias(self, "on_when", "process_regular_node");
        Opal.alias(self, "on_case", "process_regular_node");
        Opal.alias(self, "on_iflipflop", "process_regular_node");
        Opal.alias(self, "on_eflipflop", "process_regular_node");
        Opal.alias(self, "on_match_current_line", "process_regular_node");
        Opal.alias(self, "on_match_with_lvasgn", "process_regular_node");
        Opal.alias(self, "on_resbody", "process_regular_node");
        Opal.alias(self, "on_rescue", "process_regular_node");
        Opal.alias(self, "on_ensure", "process_regular_node");
        Opal.alias(self, "on_begin", "process_regular_node");
        Opal.alias(self, "on_kwbegin", "process_regular_node");
        Opal.alias(self, "on_preexe", "process_regular_node");
        Opal.alias(self, "on_postexe", "process_regular_node");
        Opal.alias(self, "on_case_match", "process_regular_node");
        Opal.alias(self, "on_in_match", "process_regular_node");
        Opal.alias(self, "on_match_pattern", "process_regular_node");
        Opal.alias(self, "on_match_pattern_p", "process_regular_node");
        Opal.alias(self, "on_in_pattern", "process_regular_node");
        Opal.alias(self, "on_if_guard", "process_regular_node");
        Opal.alias(self, "on_unless_guard", "process_regular_node");
        Opal.alias(self, "on_match_var", "process_variable_node");
        Opal.alias(self, "on_match_rest", "process_regular_node");
        Opal.alias(self, "on_pin", "process_regular_node");
        Opal.alias(self, "on_match_alt", "process_regular_node");
        Opal.alias(self, "on_match_as", "process_regular_node");
        Opal.alias(self, "on_array_pattern", "process_regular_node");
        Opal.alias(self, "on_array_pattern_with_tail", "process_regular_node");
        Opal.alias(self, "on_hash_pattern", "process_regular_node");
        Opal.alias(self, "on_const_pattern", "process_regular_node");
        Opal.alias(self, "on_find_pattern", "process_regular_node");
        
        Opal.def(self, '$process_variable_node', $Processor_process_variable_node$16 = function $$process_variable_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_variable_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_var instead.");
          return self.$on_var(node);
        }, $Processor_process_variable_node$16.$$arity = 1);
        
        Opal.def(self, '$process_var_asgn_node', $Processor_process_var_asgn_node$17 = function $$process_var_asgn_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_var_asgn_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_vasgn instead.");
          return self.$on_vasgn(node);
        }, $Processor_process_var_asgn_node$17.$$arity = 1);
        
        Opal.def(self, '$process_argument_node', $Processor_process_argument_node$18 = function $$process_argument_node(node) {
          var self = this;

          
          self.$warn("" + "Parser::AST::Processor#process_argument_node is deprecated as a" + " public API and will be removed. Please use " + "Parser::AST::Processor#on_argument instead.");
          return self.$on_argument(node);
        }, $Processor_process_argument_node$18.$$arity = 1);
        return (Opal.def(self, '$on_empty_else', $Processor_on_empty_else$19 = function $$on_empty_else(node) {
          var self = this;

          return node
        }, $Processor_on_empty_else$19.$$arity = 1), nil) && 'on_empty_else';
      })($nesting[0], $$$($$$('::', 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
