/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader', '$message']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SyntaxError');

      var $nesting = [self].concat($parent_nesting), $SyntaxError_initialize$1;

      
      self.$attr_reader("diagnostic");
      return (Opal.def(self, '$initialize', $SyntaxError_initialize$1 = function $$initialize(diagnostic) {
        var $iter = $SyntaxError_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $SyntaxError_initialize$1.$$p = null;
        
        self.diagnostic = diagnostic;
        return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $SyntaxError_initialize$1, false, true), 'initialize', [diagnostic.$message()], null);
      }, $SyntaxError_initialize$1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'StandardError'), $nesting)
  })($nesting[0], $nesting)
})(Opal);
