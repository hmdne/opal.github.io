/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$push', '$empty?', '$<<', '$new', '$pop', '$clear', '$last', '$to_sym', '$include?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'VariablesStack');

      var $nesting = [self].concat($parent_nesting), $VariablesStack_initialize$1, $VariablesStack_empty$ques$2, $VariablesStack_push$3, $VariablesStack_pop$4, $VariablesStack_reset$5, $VariablesStack_declare$6, $VariablesStack_declared$ques$7;

      self.$$prototype.stack = nil;
      
      
      Opal.def(self, '$initialize', $VariablesStack_initialize$1 = function $$initialize() {
        var self = this;

        
        self.stack = [];
        return self.$push();
      }, $VariablesStack_initialize$1.$$arity = 0);
      
      Opal.def(self, '$empty?', $VariablesStack_empty$ques$2 = function() {
        var self = this;

        return self.stack['$empty?']()
      }, $VariablesStack_empty$ques$2.$$arity = 0);
      
      Opal.def(self, '$push', $VariablesStack_push$3 = function $$push() {
        var self = this;

        return self.stack['$<<']($$($nesting, 'Set').$new())
      }, $VariablesStack_push$3.$$arity = 0);
      
      Opal.def(self, '$pop', $VariablesStack_pop$4 = function $$pop() {
        var self = this;

        return self.stack.$pop()
      }, $VariablesStack_pop$4.$$arity = 0);
      
      Opal.def(self, '$reset', $VariablesStack_reset$5 = function $$reset() {
        var self = this;

        return self.stack.$clear()
      }, $VariablesStack_reset$5.$$arity = 0);
      
      Opal.def(self, '$declare', $VariablesStack_declare$6 = function $$declare(name) {
        var self = this;

        return self.stack.$last()['$<<'](name.$to_sym())
      }, $VariablesStack_declare$6.$$arity = 1);
      return (Opal.def(self, '$declared?', $VariablesStack_declared$ques$7 = function(name) {
        var self = this;

        return self.stack.$last()['$include?'](name.$to_sym())
      }, $VariablesStack_declared$ques$7.$$arity = 1), nil) && 'declared?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
