/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$alias_method', '$new', '$associate', '$associate_locations', '$freeze', '$source', '$start_with?', '$text', '$==', '$type', '$is_a?', '$location', '$to_s', '$expression', '$inspect']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Comment');

        var $nesting = [self].concat($parent_nesting), $Comment_associate$1, $Comment_associate_locations$2, $Comment_initialize$3, $Comment_type$4, $Comment_inline$ques$5, $Comment_document$ques$6, $Comment_$eq_eq$7, $Comment_inspect$8;

        self.$$prototype.location = nil;
        
        self.$attr_reader("text");
        self.$attr_reader("location");
        self.$alias_method("loc", "location");
        Opal.defs(self, '$associate', $Comment_associate$1 = function $$associate(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate();
        }, $Comment_associate$1.$$arity = 2);
        Opal.defs(self, '$associate_locations', $Comment_associate_locations$2 = function $$associate_locations(ast, comments) {
          var self = this, associator = nil;

          
          associator = $$($nesting, 'Associator').$new(ast, comments);
          return associator.$associate_locations();
        }, $Comment_associate_locations$2.$$arity = 2);
        
        Opal.def(self, '$initialize', $Comment_initialize$3 = function $$initialize(range) {
          var self = this;

          
          self.location = $$$($$$($$($nesting, 'Parser'), 'Source'), 'Map').$new(range);
          self.text = range.$source().$freeze();
          return self.$freeze();
        }, $Comment_initialize$3.$$arity = 1);
        
        Opal.def(self, '$type', $Comment_type$4 = function $$type() {
          var self = this;

          if ($truthy(self.$text()['$start_with?']("#".$freeze()))) {
            return "inline"
          } else if ($truthy(self.$text()['$start_with?']("=begin".$freeze()))) {
            return "document"
          } else {
            return nil
          }
        }, $Comment_type$4.$$arity = 0);
        
        Opal.def(self, '$inline?', $Comment_inline$ques$5 = function() {
          var self = this;

          return self.$type()['$==']("inline")
        }, $Comment_inline$ques$5.$$arity = 0);
        
        Opal.def(self, '$document?', $Comment_document$ques$6 = function() {
          var self = this;

          return self.$type()['$==']("document")
        }, $Comment_document$ques$6.$$arity = 0);
        
        Opal.def(self, '$==', $Comment_$eq_eq$7 = function(other) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = other['$is_a?']($$$($$($nesting, 'Source'), 'Comment'))))) {
            return self.location['$=='](other.$location())
          } else {
            return $ret_or_1
          }
        }, $Comment_$eq_eq$7.$$arity = 1);
        return (Opal.def(self, '$inspect', $Comment_inspect$8 = function $$inspect() {
          var self = this;

          return "" + "#<Parser::Source::Comment " + (self.location.$expression().$to_s()) + " " + (self.$text().$inspect()) + ">"
        }, $Comment_inspect$8.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
