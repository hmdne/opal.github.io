/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$do_associate', '$private', '$freeze', '$[]', '$include?', '$type', '$sort_by', '$compact', '$children', '$begin_pos', '$expression', '$loc', '$select', '$is_a?', '$new', '$[]=', '$-', '$advance_comment', '$advance_through_directives', '$visit', '$process_leading_comments', '$location', '$<=', '$line', '$last_line', '$each', '$children_in_source_order', '$process_trailing_comments', '$==', '$current_comment_before?', '$associate_and_advance_comment', '$current_comment_before_end?', '$current_comment_decorates?', '$+', '$!', '$end_pos', '$<<', '$start_with?', '$text', '$=~']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Associator');

        var $nesting = [self].concat($parent_nesting), $Associator_initialize$1, $Associator_associate$2, $Associator_associate_locations$3, $Associator_children_in_source_order$4, $Associator_do_associate$7, $Associator_visit$9, $Associator_process_leading_comments$11, $Associator_process_trailing_comments$12, $Associator_advance_comment$13, $Associator_current_comment_before$ques$14, $Associator_current_comment_before_end$ques$15, $Associator_current_comment_decorates$ques$16, $Associator_associate_and_advance_comment$17, $Associator_advance_through_directives$18;

        self.$$prototype.skip_directives = self.$$prototype.ast = self.$$prototype.mapping = self.$$prototype.current_comment = self.$$prototype.comment_num = self.$$prototype.comments = self.$$prototype.map_using_locations = nil;
        
        self.$attr_accessor("skip_directives");
        
        Opal.def(self, '$initialize', $Associator_initialize$1 = function $$initialize(ast, comments) {
          var self = this;

          
          self.ast = ast;
          self.comments = comments;
          return (self.skip_directives = true);
        }, $Associator_initialize$1.$$arity = 2);
        
        Opal.def(self, '$associate', $Associator_associate$2 = function $$associate() {
          var self = this;

          
          self.map_using_locations = false;
          return self.$do_associate();
        }, $Associator_associate$2.$$arity = 0);
        
        Opal.def(self, '$associate_locations', $Associator_associate_locations$3 = function $$associate_locations() {
          var self = this;

          
          self.map_using_locations = true;
          return self.$do_associate();
        }, $Associator_associate_locations$3.$$arity = 0);
        self.$private();
        Opal.const_set($nesting[0], 'POSTFIX_TYPES', $$($nesting, 'Set')['$[]']("if", "while", "while_post", "until", "until_post", "masgn").$freeze());
        
        Opal.def(self, '$children_in_source_order', $Associator_children_in_source_order$4 = function $$children_in_source_order(node) {
          var $$5, $$6, self = this;

          if ($truthy($$($nesting, 'POSTFIX_TYPES')['$include?'](node.$type()))) {
            return $send(node.$children().$compact(), 'sort_by', [], ($$5 = function(child){var self = $$5.$$s == null ? this : $$5.$$s;

            
              
              if (child == null) {
                child = nil;
              };
              return child.$loc().$expression().$begin_pos();}, $$5.$$s = self, $$5.$$arity = 1, $$5))
          } else {
            return $send(node.$children(), 'select', [], ($$6 = function(child){var self = $$6.$$s == null ? this : $$6.$$s, $ret_or_1 = nil, $ret_or_2 = nil;

            
              
              if (child == null) {
                child = nil;
              };
              if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = child['$is_a?']($$$($$($nesting, 'AST'), 'Node'))))) {
                return child.$loc()
              } else {
                return $ret_or_2
              }; return nil; })()))) {
                return child.$loc().$expression()
              } else {
                return $ret_or_1
              };}, $$6.$$s = self, $$6.$$arity = 1, $$6))
          }
        }, $Associator_children_in_source_order$4.$$arity = 1);
        
        Opal.def(self, '$do_associate', $Associator_do_associate$7 = function $$do_associate() {
          var $$8, self = this;

          
          self.mapping = $send($$($nesting, 'Hash'), 'new', [], ($$8 = function(h, k){var self = $$8.$$s == null ? this : $$8.$$s, $writer = nil;

          
            
            if (h == null) {
              h = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            $writer = [k, []];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$8.$$s = self, $$8.$$arity = 2, $$8));
          self.comment_num = -1;
          self.$advance_comment();
          if ($truthy(self.skip_directives)) {
            self.$advance_through_directives()};
          if ($truthy(self.ast)) {
            self.$visit(self.ast)};
          return self.mapping;
        }, $Associator_do_associate$7.$$arity = 0);
        
        Opal.def(self, '$visit', $Associator_visit$9 = function $$visit(node) {
          var $$10, self = this, node_loc = nil, $ret_or_3 = nil;

          
          self.$process_leading_comments(node);
          if ($truthy(self.current_comment)) {
          } else {
            return nil
          };
          node_loc = node.$location();
          if ($truthy((function() {if ($truthy(($ret_or_3 = $rb_le(self.current_comment.$location().$line(), node_loc.$last_line())))) {
            return $ret_or_3
          } else {
            return node_loc['$is_a?']($$$($$($nesting, 'Map'), 'Heredoc'))
          }; return nil; })())) {
            
            $send(self.$children_in_source_order(node), 'each', [], ($$10 = function(child){var self = $$10.$$s == null ? this : $$10.$$s;

            
              
              if (child == null) {
                child = nil;
              };
              return self.$visit(child);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
            return self.$process_trailing_comments(node);
          } else {
            return nil
          };
        }, $Associator_visit$9.$$arity = 1);
        
        Opal.def(self, '$process_leading_comments', $Associator_process_leading_comments$11 = function $$process_leading_comments(node) {
          var $a, self = this;

          
          if (node.$type()['$==']("begin")) {
            return nil};
          while ($truthy(self['$current_comment_before?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, $Associator_process_leading_comments$11.$$arity = 1);
        
        Opal.def(self, '$process_trailing_comments', $Associator_process_trailing_comments$12 = function $$process_trailing_comments(node) {
          var $a, self = this;

          
          while ($truthy(self['$current_comment_before_end?'](node))) {
            self.$associate_and_advance_comment(node)
          };
          while ($truthy(self['$current_comment_decorates?'](node))) {
            self.$associate_and_advance_comment(node)
          };
        }, $Associator_process_trailing_comments$12.$$arity = 1);
        
        Opal.def(self, '$advance_comment', $Associator_advance_comment$13 = function $$advance_comment() {
          var self = this;

          
          self.comment_num = $rb_plus(self.comment_num, 1);
          return (self.current_comment = self.comments['$[]'](self.comment_num));
        }, $Associator_advance_comment$13.$$arity = 0);
        
        Opal.def(self, '$current_comment_before?', $Associator_current_comment_before$ques$14 = function(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$begin_pos());
        }, $Associator_current_comment_before$ques$14.$$arity = 1);
        
        Opal.def(self, '$current_comment_before_end?', $Associator_current_comment_before_end$ques$15 = function(node) {
          var self = this, comment_loc = nil, node_loc = nil;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          comment_loc = self.current_comment.$location().$expression();
          node_loc = node.$location().$expression();
          return $rb_le(comment_loc.$end_pos(), node_loc.$end_pos());
        }, $Associator_current_comment_before_end$ques$15.$$arity = 1);
        
        Opal.def(self, '$current_comment_decorates?', $Associator_current_comment_decorates$ques$16 = function(node) {
          var self = this;

          
          if ($truthy(self.current_comment['$!']())) {
            return false};
          return self.current_comment.$location().$line()['$=='](node.$location().$last_line());
        }, $Associator_current_comment_decorates$ques$16.$$arity = 1);
        
        Opal.def(self, '$associate_and_advance_comment', $Associator_associate_and_advance_comment$17 = function $$associate_and_advance_comment(node) {
          var self = this, key = nil;

          
          key = (function() {if ($truthy(self.map_using_locations)) {
            return node.$location()
          } else {
            return node
          }; return nil; })();
          self.mapping['$[]'](key)['$<<'](self.current_comment);
          return self.$advance_comment();
        }, $Associator_associate_and_advance_comment$17.$$arity = 1);
        Opal.const_set($nesting[0], 'MAGIC_COMMENT_RE', /^#\s*(-\*-|)\s*(frozen_string_literal|warn_indent|warn_past_scope):.*\1$/);
        return (Opal.def(self, '$advance_through_directives', $Associator_advance_through_directives$18 = function $$advance_through_directives() {
          var self = this, $ret_or_4 = nil, $ret_or_5 = nil, $ret_or_6 = nil;

          
          if ($truthy((function() {if ($truthy(($ret_or_4 = self.current_comment))) {
            return self.current_comment.$text()['$start_with?']("#!".$freeze())
          } else {
            return $ret_or_4
          }; return nil; })())) {
            self.$advance_comment()};
          if ($truthy((function() {if ($truthy(($ret_or_5 = self.current_comment))) {
            return self.current_comment.$text()['$=~']($$($nesting, 'MAGIC_COMMENT_RE'))
          } else {
            return $ret_or_5
          }; return nil; })())) {
            self.$advance_comment()};
          if ($truthy((function() {if ($truthy(($ret_or_6 = self.current_comment))) {
            return self.current_comment.$text()['$=~']($$$($$($nesting, 'Buffer'), 'ENCODING_RE'))
          } else {
            return $ret_or_6
          }; return nil; })())) {
            return self.$advance_comment()
          } else {
            return nil
          };
        }, $Associator_advance_through_directives$18.$$arity = 0), nil) && 'advance_through_directives';
      })($$($nesting, 'Comment'), null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
