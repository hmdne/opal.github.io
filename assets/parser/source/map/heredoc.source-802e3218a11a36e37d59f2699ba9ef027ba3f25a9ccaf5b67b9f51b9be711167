/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Heredoc');

        var $nesting = [self].concat($parent_nesting), $Heredoc_initialize$1;

        
        self.$attr_reader("heredoc_body");
        self.$attr_reader("heredoc_end");
        return (Opal.def(self, '$initialize', $Heredoc_initialize$1 = function $$initialize(begin_l, body_l, end_l) {
          var $iter = $Heredoc_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Heredoc_initialize$1.$$p = null;
          
          self.heredoc_body = body_l;
          self.heredoc_end = end_l;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Heredoc_initialize$1, false, true), 'initialize', [begin_l], null);
        }, $Heredoc_initialize$1.$$arity = 3), nil) && 'initialize';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
