/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$with', '$update_operator', '$protected']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Send');

        var $nesting = [self].concat($parent_nesting), $Send_initialize$1, $Send_with_operator$2, $Send_update_operator$4;

        
        self.$attr_reader("dot");
        self.$attr_reader("selector");
        self.$attr_reader("operator");
        self.$attr_reader("begin");
        self.$attr_reader("end");
        
        Opal.def(self, '$initialize', $Send_initialize$1 = function $$initialize(dot_l, selector_l, begin_l, end_l, expression_l) {
          var $a, $iter = $Send_initialize$1.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Send_initialize$1.$$p = null;
          
          self.dot = dot_l;
          self.selector = selector_l;
          $a = [begin_l, end_l], (self.begin = $a[0]), (self.end = $a[1]), $a;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $Send_initialize$1, false, true), 'initialize', [expression_l], null);
        }, $Send_initialize$1.$$arity = 5);
        
        Opal.def(self, '$with_operator', $Send_with_operator$2 = function $$with_operator(operator_l) {
          var $$3, self = this;

          return $send(self, 'with', [], ($$3 = function(map){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$update_operator(operator_l);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Send_with_operator$2.$$arity = 1);
        self.$protected();
        return (Opal.def(self, '$update_operator', $Send_update_operator$4 = function $$update_operator(operator_l) {
          var self = this;

          return (self.operator = operator_l)
        }, $Send_update_operator$4.$$arity = 1), nil) && 'update_operator';
      })($$($nesting, 'Map'), $$($nesting, 'Map'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
