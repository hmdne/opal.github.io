/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$warn_of_deprecation', '$class', '$new', '$lambda', '$puts', '$render', '$consumer=', '$-', '$append', '$freeze', '$begin', '$end', '$+', '$in_transaction?', '$raise', '$dup', '$source', '$each', '$sort', '$begin_pos', '$range', '$length', '$replacement', '$[]=', '$private', '$empty?', '$!', '$allow_multiple_insertions?', '$clobbered_insertion?', '$raise_clobber_error', '$record_insertion', '$adjacent_updates?', '$find', '$overlaps?', '$replace_compatible_with_insertion?', '$merge_actions!', '$<<', '$active_queue', '$adjacent_insertions?', '$merge_actions', '$delete', '$can_merge?', '$record_replace', '$|', '$active_insertions', '$active_insertions=', '$active_clobber', '$clobbered_position_mask', '$active_clobber=', '$size', '$!=', '$&', '$<=', '$end_pos', '$adjacent_insertion_mask', '$select', '$adjacent?', '$adjacent_position_mask', '$>=', '$==', '$[]', '$all?', '$intersect', '$nil?', '$max', '$sort_by', '$push', '$join', '$first', '$max_by', '$merge_replacements', '$replace_actions', '$disjoint?', '$<', '$process', '$extend']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Source');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Rewriter');

        var $nesting = [self].concat($parent_nesting), $Rewriter_initialize$1, $Rewriter_remove$3, $Rewriter_insert_before$4, $Rewriter_wrap$5, $Rewriter_insert_before_multi$6, $Rewriter_insert_after$7, $Rewriter_insert_after_multi$8, $Rewriter_replace$9, $Rewriter_process$10, $Rewriter_transaction$12, $Rewriter_append$13, $Rewriter_record_insertion$16, $Rewriter_record_replace$17, $Rewriter_clobbered_position_mask$18, $Rewriter_adjacent_position_mask$19, $Rewriter_adjacent_insertion_mask$20, $Rewriter_clobbered_insertion$ques$21, $Rewriter_adjacent_insertions$ques$23, $Rewriter_adjacent_updates$ques$25, $Rewriter_replace_compatible_with_insertion$ques$27, $Rewriter_can_merge$ques$28, $Rewriter_merge_actions$30, $Rewriter_merge_actions$excl$33, $Rewriter_merge_replacements$34, $Rewriter_replace_actions$36, $Rewriter_raise_clobber_error$38, $Rewriter_in_transaction$ques$39, $Rewriter_active_queue$40, $Rewriter_active_clobber$41, $Rewriter_active_insertions$42, $Rewriter_active_clobber$eq$43, $Rewriter_active_insertions$eq$44, $Rewriter_adjacent$ques$45;

        self.$$prototype.diagnostics = self.$$prototype.insert_before_multi_order = self.$$prototype.insert_after_multi_order = self.$$prototype.source_buffer = self.$$prototype.queue = self.$$prototype.clobber = self.$$prototype.insertions = self.$$prototype.pending_queue = self.$$prototype.pending_clobber = self.$$prototype.pending_insertions = nil;
        
        self.$attr_reader("source_buffer");
        self.$attr_reader("diagnostics");
        
        Opal.def(self, '$initialize', $Rewriter_initialize$1 = function $$initialize(source_buffer) {
          var $$2, self = this, $writer = nil;

          
          self.$class().$warn_of_deprecation();
          self.diagnostics = $$$($$($nesting, 'Diagnostic'), 'Engine').$new();
          
          $writer = [$send(self, 'lambda', [], ($$2 = function(diag){var self = $$2.$$s == null ? this : $$2.$$s;
            if ($gvars.stderr == null) $gvars.stderr = nil;

          
            
            if (diag == null) {
              diag = nil;
            };
            return $gvars.stderr.$puts(diag.$render());}, $$2.$$s = self, $$2.$$arity = 1, $$2))];
          $send(self.diagnostics, 'consumer=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.source_buffer = source_buffer;
          self.queue = [];
          self.clobber = 0;
          self.insertions = 0;
          self.insert_before_multi_order = 0;
          self.insert_after_multi_order = 0;
          self.pending_queue = nil;
          self.pending_clobber = nil;
          return (self.pending_insertions = nil);
        }, $Rewriter_initialize$1.$$arity = 1);
        
        Opal.def(self, '$remove', $Rewriter_remove$3 = function $$remove(range) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range, "".$freeze()))
        }, $Rewriter_remove$3.$$arity = 1);
        
        Opal.def(self, '$insert_before', $Rewriter_insert_before$4 = function $$insert_before(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), content))
        }, $Rewriter_insert_before$4.$$arity = 2);
        
        Opal.def(self, '$wrap', $Rewriter_wrap$5 = function $$wrap(range, before, after) {
          var self = this;

          
          self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), before));
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), after));
        }, $Rewriter_wrap$5.$$arity = 3);
        
        Opal.def(self, '$insert_before_multi', $Rewriter_insert_before_multi$6 = function $$insert_before_multi(range, content) {
          var self = this;

          
          self.insert_before_multi_order = $rb_minus(self.insert_before_multi_order, 1);
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$begin(), content, true, self.insert_before_multi_order));
        }, $Rewriter_insert_before_multi$6.$$arity = 2);
        
        Opal.def(self, '$insert_after', $Rewriter_insert_after$7 = function $$insert_after(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), content))
        }, $Rewriter_insert_after$7.$$arity = 2);
        
        Opal.def(self, '$insert_after_multi', $Rewriter_insert_after_multi$8 = function $$insert_after_multi(range, content) {
          var self = this;

          
          self.insert_after_multi_order = $rb_plus(self.insert_after_multi_order, 1);
          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range.$end(), content, true, self.insert_after_multi_order));
        }, $Rewriter_insert_after_multi$8.$$arity = 2);
        
        Opal.def(self, '$replace', $Rewriter_replace$9 = function $$replace(range, content) {
          var self = this;

          return self.$append($$$($$($nesting, 'Rewriter'), 'Action').$new(range, content))
        }, $Rewriter_replace$9.$$arity = 2);
        
        Opal.def(self, '$process', $Rewriter_process$10 = function $$process() {
          var $$11, self = this, adjustment = nil, source = nil;

          
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("" + "Do not call " + (self.$class()) + "#" + ("process") + " inside a transaction")};
          adjustment = 0;
          source = self.source_buffer.$source().$dup();
          $send(self.queue.$sort(), 'each', [], ($$11 = function(action){var self = $$11.$$s == null ? this : $$11.$$s, begin_pos = nil, end_pos = nil, $writer = nil;

          
            
            if (action == null) {
              action = nil;
            };
            begin_pos = $rb_plus(action.$range().$begin_pos(), adjustment);
            end_pos = $rb_plus(begin_pos, action.$range().$length());
            
            $writer = [Opal.Range.$new(begin_pos,end_pos, true), action.$replacement()];
            $send(source, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (adjustment = $rb_plus(adjustment, $rb_minus(action.$replacement().$length(), action.$range().$length())));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          return source;
        }, $Rewriter_process$10.$$arity = 0);
        
        Opal.def(self, '$transaction', $Rewriter_transaction$12 = function $$transaction() {
          var $iter = $Rewriter_transaction$12.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Rewriter_transaction$12.$$p = null;
          return (function() { try {
          
          if (($yield !== nil)) {
          } else {
            self.$raise("" + (self.$class()) + "#" + ("transaction") + " requires block")
          };
          if ($truthy(self['$in_transaction?']())) {
            self.$raise("Nested transaction is not supported")};
          self.pending_queue = self.queue.$dup();
          self.pending_clobber = self.clobber;
          self.pending_insertions = self.insertions;
          Opal.yieldX($yield, []);
          self.queue = self.pending_queue;
          self.clobber = self.pending_clobber;
          self.insertions = self.pending_insertions;
          return self;
          } finally {
            ((self.pending_queue = nil), (self.pending_clobber = nil), (self.pending_insertions = nil))
          }; })()
        }, $Rewriter_transaction$12.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$append', $Rewriter_append$13 = function $$append(action) {
          var $$14, $$15, self = this, range = nil, $ret_or_1 = nil, conflicting = nil, adjacent = nil, insertions = nil;

          
          range = action.$range();
          if ($truthy(range['$empty?']())) {
            
            if ($truthy(action.$replacement()['$empty?']())) {
              return self};
            if ($truthy((function() {if ($truthy(($ret_or_1 = action['$allow_multiple_insertions?']()['$!']()))) {
              
              return (conflicting = self['$clobbered_insertion?'](range));
            } else {
              return $ret_or_1
            }; return nil; })())) {
              self.$raise_clobber_error(action, [conflicting])};
            self.$record_insertion(range);
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              
              conflicting = $send(adjacent, 'find', [], ($$14 = function(a){var self = $$14.$$s == null ? this : $$14.$$s, $ret_or_2 = nil;

              
                
                if (a == null) {
                  a = nil;
                };
                if ($truthy(($ret_or_2 = a.$range()['$overlaps?'](range)))) {
                  return self['$replace_compatible_with_insertion?'](a, action)['$!']()
                } else {
                  return $ret_or_2
                };}, $$14.$$s = self, $$14.$$arity = 1, $$14));
              if ($truthy(conflicting)) {
                self.$raise_clobber_error(action, [conflicting])};
              self['$merge_actions!'](action, adjacent);
            } else {
              self.$active_queue()['$<<'](action)
            };
          } else {
            
            if ($truthy((insertions = self['$adjacent_insertions?'](range)))) {
              $send(insertions, 'each', [], ($$15 = function(insertion){var self = $$15.$$s == null ? this : $$15.$$s, $ret_or_3 = nil;

              
                
                if (insertion == null) {
                  insertion = nil;
                };
                if ($truthy((function() {if ($truthy(($ret_or_3 = range['$overlaps?'](insertion.$range())))) {
                  return self['$replace_compatible_with_insertion?'](action, insertion)['$!']()
                } else {
                  return $ret_or_3
                }; return nil; })())) {
                  return self.$raise_clobber_error(action, [insertion])
                } else {
                  
                  action = self.$merge_actions(action, [insertion]);
                  return self.$active_queue().$delete(insertion);
                };}, $$15.$$s = self, $$15.$$arity = 1, $$15))};
            if ($truthy((adjacent = self['$adjacent_updates?'](range)))) {
              if ($truthy(self['$can_merge?'](action, adjacent))) {
                
                self.$record_replace(range);
                self['$merge_actions!'](action, adjacent);
              } else {
                self.$raise_clobber_error(action, adjacent)
              }
            } else {
              
              self.$record_replace(range);
              self.$active_queue()['$<<'](action);
            };
          };
          return self;
        }, $Rewriter_append$13.$$arity = 1);
        
        Opal.def(self, '$record_insertion', $Rewriter_record_insertion$16 = function $$record_insertion(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_insertions()['$|']((1)['$<<'](range.$begin_pos()))];
          $send(self, 'active_insertions=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Rewriter_record_insertion$16.$$arity = 1);
        
        Opal.def(self, '$record_replace', $Rewriter_record_replace$17 = function $$record_replace(range) {
          var self = this, $writer = nil;

          
          $writer = [self.$active_clobber()['$|'](self.$clobbered_position_mask(range))];
          $send(self, 'active_clobber=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $Rewriter_record_replace$17.$$arity = 1);
        
        Opal.def(self, '$clobbered_position_mask', $Rewriter_clobbered_position_mask$18 = function $$clobbered_position_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<'](range.$size()), 1)['$<<'](range.$begin_pos())
        }, $Rewriter_clobbered_position_mask$18.$$arity = 1);
        
        Opal.def(self, '$adjacent_position_mask', $Rewriter_adjacent_position_mask$19 = function $$adjacent_position_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 2)), 1)['$<<']($rb_minus(range.$begin_pos(), 1))
        }, $Rewriter_adjacent_position_mask$19.$$arity = 1);
        
        Opal.def(self, '$adjacent_insertion_mask', $Rewriter_adjacent_insertion_mask$20 = function $$adjacent_insertion_mask(range) {
          var self = this;

          return $rb_minus((1)['$<<']($rb_plus(range.$size(), 1)), 1)['$<<'](range.$begin_pos())
        }, $Rewriter_adjacent_insertion_mask$20.$$arity = 1);
        
        Opal.def(self, '$clobbered_insertion?', $Rewriter_clobbered_insertion$ques$21 = function(insertion) {
          var $$22, self = this, insertion_pos = nil;

          
          insertion_pos = insertion.$begin_pos();
          if ($truthy(self.$active_insertions()['$&']((1)['$<<'](insertion_pos))['$!='](0))) {
            return $send(self.$active_queue(), 'find', [], ($$22 = function(a){var self = $$22.$$s == null ? this : $$22.$$s, $ret_or_4 = nil;

            
              
              if (a == null) {
                a = nil;
              };
              if ($truthy(($ret_or_4 = $rb_le(a.$range().$begin_pos(), insertion_pos)))) {
                return $rb_le(insertion_pos, a.$range().$end_pos())
              } else {
                return $ret_or_4
              };}, $$22.$$s = self, $$22.$$arity = 1, $$22))
          } else {
            return nil
          };
        }, $Rewriter_clobbered_insertion$ques$21.$$arity = 1);
        
        Opal.def(self, '$adjacent_insertions?', $Rewriter_adjacent_insertions$ques$23 = function(range) {
          var $$24, self = this, result = nil;

          if ($truthy(self.$active_insertions()['$&'](self.$adjacent_insertion_mask(range))['$!='](0))) {
            
            result = $send(self.$active_queue(), 'select', [], ($$24 = function(a){var self = $$24.$$s == null ? this : $$24.$$s, $ret_or_5 = nil;

            
              
              if (a == null) {
                a = nil;
              };
              if ($truthy(($ret_or_5 = a.$range()['$empty?']()))) {
                return self['$adjacent?'](range, a.$range())
              } else {
                return $ret_or_5
              };}, $$24.$$s = self, $$24.$$arity = 1, $$24));
            if ($truthy(result['$empty?']())) {
              return nil
            } else {
              return result
            };
          } else {
            return nil
          }
        }, $Rewriter_adjacent_insertions$ques$23.$$arity = 1);
        
        Opal.def(self, '$adjacent_updates?', $Rewriter_adjacent_updates$ques$25 = function(range) {
          var $$26, self = this;

          if ($truthy(self.$active_clobber()['$&'](self.$adjacent_position_mask(range))['$!='](0))) {
            return $send(self.$active_queue(), 'select', [], ($$26 = function(a){var self = $$26.$$s == null ? this : $$26.$$s;

            
              
              if (a == null) {
                a = nil;
              };
              return self['$adjacent?'](range, a.$range());}, $$26.$$s = self, $$26.$$arity = 1, $$26))
          } else {
            return nil
          }
        }, $Rewriter_adjacent_updates$ques$25.$$arity = 1);
        
        Opal.def(self, '$replace_compatible_with_insertion?', $Rewriter_replace_compatible_with_insertion$ques$27 = function(replace, insertion) {
          var self = this, $ret_or_6 = nil, $ret_or_7 = nil, offset = nil;

          if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = $rb_ge($rb_minus(replace.$replacement().$length(), replace.$range().$size()), insertion.$range().$size())))) {
            
            return (offset = $rb_minus(insertion.$range().$begin_pos(), replace.$range().$begin_pos()));
          } else {
            return $ret_or_7
          }; return nil; })()))) {
            return replace.$replacement()['$[]'](offset, insertion.$replacement().$length())['$=='](insertion.$replacement())
          } else {
            return $ret_or_6
          }
        }, $Rewriter_replace_compatible_with_insertion$ques$27.$$arity = 2);
        
        Opal.def(self, '$can_merge?', $Rewriter_can_merge$ques$28 = function(action, existing) {
          var $$29, self = this, range = nil;

          
          range = action.$range();
          return $send(existing, 'all?', [], ($$29 = function(other){var self = $$29.$$s == null ? this : $$29.$$s, overlap = nil, repl1_offset = nil, repl2_offset = nil, repl1_length = nil, repl2_length = nil, replacement1 = nil, $ret_or_8 = nil, replacement2 = nil, $ret_or_9 = nil;

          
            
            if (other == null) {
              other = nil;
            };
            overlap = range.$intersect(other.$range());
            if ($truthy(overlap['$nil?']())) {
              return true;};
            repl1_offset = $rb_minus(overlap.$begin_pos(), range.$begin_pos());
            repl2_offset = $rb_minus(overlap.$begin_pos(), other.$range().$begin_pos());
            repl1_length = [$rb_minus(other.$range().$length(), repl2_offset), $rb_minus(other.$replacement().$length(), repl2_offset)].$max();
            repl2_length = [$rb_minus(range.$length(), repl1_offset), $rb_minus(action.$replacement().$length(), repl1_offset)].$max();
            replacement1 = (function() {if ($truthy(($ret_or_8 = action.$replacement()['$[]'](repl1_offset, repl1_length)))) {
              return $ret_or_8
            } else {
              return "".$freeze()
            }; return nil; })();
            replacement2 = (function() {if ($truthy(($ret_or_9 = other.$replacement()['$[]'](repl2_offset, repl2_length)))) {
              return $ret_or_9
            } else {
              return "".$freeze()
            }; return nil; })();
            return replacement1['$=='](replacement2);}, $$29.$$s = self, $$29.$$arity = 1, $$29));
        }, $Rewriter_can_merge$ques$28.$$arity = 2);
        
        Opal.def(self, '$merge_actions', $Rewriter_merge_actions$30 = function $$merge_actions(action, existing) {
          var $$31, $$32, self = this, actions = nil, range = nil;

          
          actions = $send(existing.$push(action), 'sort_by', [], ($$31 = function(a){var self = $$31.$$s == null ? this : $$31.$$s;

          
            
            if (a == null) {
              a = nil;
            };
            return [a.$range().$begin_pos(), a.$range().$end_pos()];}, $$31.$$s = self, $$31.$$arity = 1, $$31));
          range = actions.$first().$range().$join($send(actions, 'max_by', [], ($$32 = function(a){var self = $$32.$$s == null ? this : $$32.$$s;

          
            
            if (a == null) {
              a = nil;
            };
            return a.$range().$end_pos();}, $$32.$$s = self, $$32.$$arity = 1, $$32)).$range());
          return $$$($$($nesting, 'Rewriter'), 'Action').$new(range, self.$merge_replacements(actions));
        }, $Rewriter_merge_actions$30.$$arity = 2);
        
        Opal.def(self, '$merge_actions!', $Rewriter_merge_actions$excl$33 = function(action, existing) {
          var self = this, new_action = nil;

          
          new_action = self.$merge_actions(action, existing);
          self.$active_queue().$delete(action);
          return self.$replace_actions(existing, new_action);
        }, $Rewriter_merge_actions$excl$33.$$arity = 2);
        
        Opal.def(self, '$merge_replacements', $Rewriter_merge_replacements$34 = function $$merge_replacements(actions) {
          var $$35, self = this, result = nil, prev_act = nil;

          
          result = "".$dup();
          prev_act = nil;
          $send(actions, 'each', [], ($$35 = function(act){var self = $$35.$$s == null ? this : $$35.$$s, $ret_or_10 = nil, prev_end = nil, offset = nil;

          
            
            if (act == null) {
              act = nil;
            };
            if ($truthy((function() {if ($truthy(($ret_or_10 = prev_act['$!']()))) {
              return $ret_or_10
            } else {
              return act.$range()['$disjoint?'](prev_act.$range())
            }; return nil; })())) {
              result['$<<'](act.$replacement())
            } else {
              
              prev_end = [$rb_plus(prev_act.$range().$begin_pos(), prev_act.$replacement().$length()), prev_act.$range().$end_pos()].$max();
              offset = $rb_minus(prev_end, act.$range().$begin_pos());
              if ($truthy($rb_lt(offset, act.$replacement().$size()))) {
                result['$<<'](act.$replacement()['$[]'](Opal.Range.$new(offset, -1, false)))};
            };
            return (prev_act = act);}, $$35.$$s = self, $$35.$$arity = 1, $$35));
          return result;
        }, $Rewriter_merge_replacements$34.$$arity = 1);
        
        Opal.def(self, '$replace_actions', $Rewriter_replace_actions$36 = function $$replace_actions(old, updated) {
          var $$37, self = this;

          
          $send(old, 'each', [], ($$37 = function(act){var self = $$37.$$s == null ? this : $$37.$$s;

          
            
            if (act == null) {
              act = nil;
            };
            return self.$active_queue().$delete(act);}, $$37.$$s = self, $$37.$$arity = 1, $$37));
          return self.$active_queue()['$<<'](updated);
        }, $Rewriter_replace_actions$36.$$arity = 2);
        
        Opal.def(self, '$raise_clobber_error', $Rewriter_raise_clobber_error$38 = function $$raise_clobber_error(action, existing) {
          var self = this, diagnostic = nil;

          
          diagnostic = $$($nesting, 'Diagnostic').$new("error", "invalid_action", $hash2(["action"], {"action": action}), action.$range());
          self.diagnostics.$process(diagnostic);
          diagnostic = $$($nesting, 'Diagnostic').$new("note", "clobbered", $hash2(["action"], {"action": existing['$[]'](0)}), existing['$[]'](0).$range());
          self.diagnostics.$process(diagnostic);
          return self.$raise($$($nesting, 'ClobberingError'), "Parser::Source::Rewriter detected clobbering");
        }, $Rewriter_raise_clobber_error$38.$$arity = 2);
        
        Opal.def(self, '$in_transaction?', $Rewriter_in_transaction$ques$39 = function() {
          var self = this;

          return self.pending_queue['$nil?']()['$!']()
        }, $Rewriter_in_transaction$ques$39.$$arity = 0);
        
        Opal.def(self, '$active_queue', $Rewriter_active_queue$40 = function $$active_queue() {
          var self = this, $ret_or_11 = nil;

          if ($truthy(($ret_or_11 = self.pending_queue))) {
            return $ret_or_11
          } else {
            return self.queue
          }
        }, $Rewriter_active_queue$40.$$arity = 0);
        
        Opal.def(self, '$active_clobber', $Rewriter_active_clobber$41 = function $$active_clobber() {
          var self = this, $ret_or_12 = nil;

          if ($truthy(($ret_or_12 = self.pending_clobber))) {
            return $ret_or_12
          } else {
            return self.clobber
          }
        }, $Rewriter_active_clobber$41.$$arity = 0);
        
        Opal.def(self, '$active_insertions', $Rewriter_active_insertions$42 = function $$active_insertions() {
          var self = this, $ret_or_13 = nil;

          if ($truthy(($ret_or_13 = self.pending_insertions))) {
            return $ret_or_13
          } else {
            return self.insertions
          }
        }, $Rewriter_active_insertions$42.$$arity = 0);
        
        Opal.def(self, '$active_clobber=', $Rewriter_active_clobber$eq$43 = function(value) {
          var self = this;

          if ($truthy(self.pending_clobber)) {
            return (self.pending_clobber = value)
          } else {
            return (self.clobber = value)
          }
        }, $Rewriter_active_clobber$eq$43.$$arity = 1);
        
        Opal.def(self, '$active_insertions=', $Rewriter_active_insertions$eq$44 = function(value) {
          var self = this;

          if ($truthy(self.pending_insertions)) {
            return (self.pending_insertions = value)
          } else {
            return (self.insertions = value)
          }
        }, $Rewriter_active_insertions$eq$44.$$arity = 1);
        
        Opal.def(self, '$adjacent?', $Rewriter_adjacent$ques$45 = function(range1, range2) {
          var self = this, $ret_or_14 = nil;

          if ($truthy(($ret_or_14 = $rb_le(range1.$begin_pos(), range2.$end_pos())))) {
            return $rb_le(range2.$begin_pos(), range1.$end_pos())
          } else {
            return $ret_or_14
          }
        }, $Rewriter_adjacent$ques$45.$$arity = 2);
        Opal.const_set($nesting[0], 'DEPRECATION_WARNING', ["Parser::Source::Rewriter is deprecated.", "Please update your code to use Parser::Source::TreeRewriter instead"].$join("\n").$freeze());
        return self.$extend($$($nesting, 'Deprecation'));
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
