/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$ignore?', '$call', '$raise?', '$raise', '$protected', '$==', '$level']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Parser');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Engine');

      var $nesting = [self].concat($parent_nesting), $Engine_initialize$1, $Engine_process$2, $Engine_ignore$ques$3, $Engine_raise$ques$4;

      self.$$prototype.consumer = self.$$prototype.ignore_warnings = self.$$prototype.all_errors_are_fatal = nil;
      
      self.$attr_accessor("consumer");
      self.$attr_accessor("all_errors_are_fatal");
      self.$attr_accessor("ignore_warnings");
      
      Opal.def(self, '$initialize', $Engine_initialize$1 = function $$initialize(consumer) {
        var self = this;

        
        
        if (consumer == null) {
          consumer = nil;
        };
        self.consumer = consumer;
        self.all_errors_are_fatal = false;
        return (self.ignore_warnings = false);
      }, $Engine_initialize$1.$$arity = -1);
      
      Opal.def(self, '$process', $Engine_process$2 = function $$process(diagnostic) {
        var self = this;

        
        if ($truthy(self['$ignore?'](diagnostic))) {
        } else if ($truthy(self.consumer)) {
          self.consumer.$call(diagnostic)};
        if ($truthy(self['$raise?'](diagnostic))) {
          self.$raise($$$($$($nesting, 'Parser'), 'SyntaxError'), diagnostic)};
        return self;
      }, $Engine_process$2.$$arity = 1);
      self.$protected();
      
      Opal.def(self, '$ignore?', $Engine_ignore$ques$3 = function(diagnostic) {
        var self = this, $ret_or_1 = nil;

        if ($truthy(($ret_or_1 = self.ignore_warnings))) {
          return diagnostic.$level()['$==']("warning")
        } else {
          return $ret_or_1
        }
      }, $Engine_ignore$ques$3.$$arity = 1);
      return (Opal.def(self, '$raise?', $Engine_raise$ques$4 = function(diagnostic) {
        var self = this, $ret_or_2 = nil, $ret_or_3 = nil;

        if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self.all_errors_are_fatal))) {
          return diagnostic.$level()['$==']("error")
        } else {
          return $ret_or_3
        }; return nil; })()))) {
          return $ret_or_2
        } else {
          return diagnostic.$level()['$==']("fatal")
        }
      }, $Engine_raise$ques$4.$$arity = 1), nil) && 'raise?';
    })($$($nesting, 'Diagnostic'), null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
