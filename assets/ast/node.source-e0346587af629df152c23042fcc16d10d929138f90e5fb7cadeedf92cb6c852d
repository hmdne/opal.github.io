/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_sym', '$freeze', '$to_a', '$assign_properties', '$hash', '$class', '$eql?', '$type', '$children', '$each', '$instance_variable_set', '$protected', '$private', '$==', '$nil?', '$original_dup', '$send', '$equal?', '$respond_to?', '$to_ast', '$updated', '$+', '$*', '$fancy_type', '$is_a?', '$to_sexp', '$inspect', '$map', '$to_sexp_array', '$gsub', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Node');

      var $nesting = [self].concat($parent_nesting), $Node_initialize$1, $Node_eql$ques$2, $Node_assign_properties$3, $Node_dup$5, $Node_updated$6, $Node_$eq_eq$7, $Node_concat$8, $Node_append$9, $Node_to_sexp$10, $Node_inspect$12, $Node_to_ast$14, $Node_to_sexp_array$15, $Node_deconstruct$17, $Node_fancy_type$18;

      self.$$prototype.type = self.$$prototype.children = nil;
      
      self.$attr_reader("type");
      self.$attr_reader("children");
      Opal.alias(self, "to_a", "children");
      self.$attr_reader("hash");
      
      Opal.def(self, '$initialize', $Node_initialize$1 = function $$initialize(type, children, properties) {
        var $a, self = this;

        
        
        if (children == null) {
          children = [];
        };
        
        if (properties == null) {
          properties = $hash2([], {});
        };
        $a = [type.$to_sym(), children.$to_a().$freeze()], (self.type = $a[0]), (self.children = $a[1]), $a;
        self.$assign_properties(properties);
        self.hash = [self.type, self.children, self.$class()].$hash();
        return self.$freeze();
      }, $Node_initialize$1.$$arity = -2);
      
      Opal.def(self, '$eql?', $Node_eql$ques$2 = function(other) {
        var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

        if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.$class()['$eql?'](other.$class())))) {
          return self.type['$eql?'](other.$type())
        } else {
          return $ret_or_2
        }; return nil; })()))) {
          return self.children['$eql?'](other.$children())
        } else {
          return $ret_or_1
        }
      }, $Node_eql$ques$2.$$arity = 1);
      
      Opal.def(self, '$assign_properties', $Node_assign_properties$3 = function $$assign_properties(properties) {
        var $$4, self = this;

        
        $send(properties, 'each', [], ($$4 = function(name, value){var self = $$4.$$s == null ? this : $$4.$$s;

        
          
          if (name == null) {
            name = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          return self.$instance_variable_set("" + "@" + (name), value);}, $$4.$$s = self, $$4.$$arity = 2, $$4));
        return nil;
      }, $Node_assign_properties$3.$$arity = 1);
      self.$protected("assign_properties");
      Opal.alias(self, "original_dup", "dup");
      self.$private("original_dup");
      
      Opal.def(self, '$dup', $Node_dup$5 = function $$dup() {
        var self = this;

        return self
      }, $Node_dup$5.$$arity = 0);
      Opal.alias(self, "clone", "dup");
      
      Opal.def(self, '$updated', $Node_updated$6 = function $$updated(type, children, properties) {
        var self = this, new_type = nil, $ret_or_3 = nil, new_children = nil, $ret_or_4 = nil, new_properties = nil, $ret_or_5 = nil, $ret_or_6 = nil, $ret_or_7 = nil, copy = nil;

        
        
        if (type == null) {
          type = nil;
        };
        
        if (children == null) {
          children = nil;
        };
        
        if (properties == null) {
          properties = nil;
        };
        new_type = (function() {if ($truthy(($ret_or_3 = type))) {
          return $ret_or_3
        } else {
          return self.type
        }; return nil; })();
        new_children = (function() {if ($truthy(($ret_or_4 = children))) {
          return $ret_or_4
        } else {
          return self.children
        }; return nil; })();
        new_properties = (function() {if ($truthy(($ret_or_5 = properties))) {
          return $ret_or_5
        } else {
          return $hash2([], {})
        }; return nil; })();
        if ($truthy((function() {if ($truthy(($ret_or_6 = (function() {if ($truthy(($ret_or_7 = self.type['$=='](new_type)))) {
          return self.children['$=='](new_children)
        } else {
          return $ret_or_7
        }; return nil; })()))) {
          return properties['$nil?']()
        } else {
          return $ret_or_6
        }; return nil; })())) {
          return self
        } else {
          
          copy = self.$original_dup();
          copy.$send("initialize", new_type, new_children, new_properties);
          return copy;
        };
      }, $Node_updated$6.$$arity = -1);
      
      Opal.def(self, '$==', $Node_$eq_eq$7 = function(other) {
        var self = this, $ret_or_8 = nil;

        if ($truthy(self['$equal?'](other))) {
          return true
        } else if ($truthy(other['$respond_to?']("to_ast"))) {
          
          other = other.$to_ast();
          if ($truthy(($ret_or_8 = other.$type()['$=='](self.$type())))) {
            return other.$children()['$=='](self.$children())
          } else {
            return $ret_or_8
          };
        } else {
          return false
        }
      }, $Node_$eq_eq$7.$$arity = 1);
      
      Opal.def(self, '$concat', $Node_concat$8 = function $$concat(array) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, array.$to_a()))
      }, $Node_concat$8.$$arity = 1);
      Opal.alias(self, "+", "concat");
      
      Opal.def(self, '$append', $Node_append$9 = function $$append(element) {
        var self = this;

        return self.$updated(nil, $rb_plus(self.children, [element]))
      }, $Node_append$9.$$arity = 1);
      Opal.alias(self, "<<", "append");
      
      Opal.def(self, '$to_sexp', $Node_to_sexp$10 = function $$to_sexp(indent) {
        var $$11, self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "(" + (self.$fancy_type());
        $send(self.$children(), 'each', [], ($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return (sexp = $rb_plus(sexp, "" + "\n" + (child.$to_sexp($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, "" + " " + (child.$inspect())))
          };}, $$11.$$s = self, $$11.$$arity = 1, $$11));
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, $Node_to_sexp$10.$$arity = -1);
      Opal.alias(self, "to_s", "to_sexp");
      
      Opal.def(self, '$inspect', $Node_inspect$12 = function $$inspect(indent) {
        var $$13, self = this, indented = nil, sexp = nil;

        
        
        if (indent == null) {
          indent = 0;
        };
        indented = $rb_times("  ", indent);
        sexp = "" + (indented) + "s(:" + (self.type);
        $send(self.$children(), 'each', [], ($$13 = function(child){var self = $$13.$$s == null ? this : $$13.$$s;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return (sexp = $rb_plus(sexp, "" + ",\n" + (child.$inspect($rb_plus(indent, 1)))))
          } else {
            return (sexp = $rb_plus(sexp, "" + ", " + (child.$inspect())))
          };}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        sexp = $rb_plus(sexp, ")");
        return sexp;
      }, $Node_inspect$12.$$arity = -1);
      
      Opal.def(self, '$to_ast', $Node_to_ast$14 = function $$to_ast() {
        var self = this;

        return self
      }, $Node_to_ast$14.$$arity = 0);
      
      Opal.def(self, '$to_sexp_array', $Node_to_sexp_array$15 = function $$to_sexp_array() {
        var $$16, self = this, children_sexp_arrs = nil;

        
        children_sexp_arrs = $send(self.$children(), 'map', [], ($$16 = function(child){var self = $$16.$$s == null ? this : $$16.$$s;

        
          
          if (child == null) {
            child = nil;
          };
          if ($truthy(child['$is_a?']($$($nesting, 'Node')))) {
            return child.$to_sexp_array()
          } else {
            return child
          };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
        return [self.$type()].concat(Opal.to_a(children_sexp_arrs));
      }, $Node_to_sexp_array$15.$$arity = 0);
      
      Opal.def(self, '$deconstruct', $Node_deconstruct$17 = function $$deconstruct() {
        var self = this;

        return [self.$type()].concat(Opal.to_a(self.$children()))
      }, $Node_deconstruct$17.$$arity = 0);
      self.$protected();
      return (Opal.def(self, '$fancy_type', $Node_fancy_type$18 = function $$fancy_type() {
        var self = this;

        return self.type.$to_s().$gsub("_", "-")
      }, $Node_fancy_type$18.$$arity = 0), nil) && 'fancy_type';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
