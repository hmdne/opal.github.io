/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$to_ast', '$type', '$respond_to?', '$send', '$handler_missing', '$map', '$to_a', '$process']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'AST');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Processor');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Mixin');

        var $nesting = [self].concat($parent_nesting), $Mixin_process$1, $Mixin_process_all$2, $Mixin_handler_missing$4;

        
        
        Opal.def(self, '$process', $Mixin_process$1 = function $$process(node) {
          var self = this, on_handler = nil, new_node = nil;

          
          if ($truthy(node['$nil?']())) {
            return nil};
          node = node.$to_ast();
          on_handler = "" + "on_" + (node.$type());
          if ($truthy(self['$respond_to?'](on_handler))) {
            new_node = self.$send(on_handler, node)
          } else {
            new_node = self.$handler_missing(node)
          };
          if ($truthy(new_node)) {
            node = new_node};
          return node;
        }, $Mixin_process$1.$$arity = 1);
        
        Opal.def(self, '$process_all', $Mixin_process_all$2 = function $$process_all(nodes) {
          var $$3, self = this;

          return $send(nodes.$to_a(), 'map', [], ($$3 = function(node){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (node == null) {
              node = nil;
            };
            return self.$process(node);}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Mixin_process_all$2.$$arity = 1);
        
        Opal.def(self, '$handler_missing', $Mixin_handler_missing$4 = function $$handler_missing(node) {
          var self = this;

          return nil
        }, $Mixin_handler_missing$4.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
