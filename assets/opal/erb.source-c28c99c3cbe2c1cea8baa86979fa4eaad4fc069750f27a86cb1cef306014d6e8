/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$compile', '$new', '$freeze', '$fix_quotes', '$find_contents', '$find_code', '$wrap_compiled', '$require_erb', '$prepared_source', '$gsub', '$+', '$last_match', '$=~', '$sub']);
  
  self.$require("opal/compiler");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'ERB');

      var $nesting = [self].concat($parent_nesting), $ERB_compile$1;

      
      Opal.defs(self, '$compile', $ERB_compile$1 = function $$compile(source, file_name) {
        var self = this;

        
        
        if (file_name == null) {
          file_name = "(erb)";
        };
        return $$($nesting, 'Compiler').$new(source, file_name).$compile();
      }, $ERB_compile$1.$$arity = -2);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Compiler');

        var $nesting = [self].concat($parent_nesting), $Compiler_initialize$2, $Compiler_prepared_source$3, $Compiler_compile$4, $Compiler_fix_quotes$5, $Compiler_require_erb$6, $Compiler_find_contents$7, $Compiler_find_code$9, $Compiler_wrap_compiled$11;

        self.$$prototype.prepared_source = self.$$prototype.source = self.$$prototype.file_name = nil;
        
        Opal.const_set($nesting[0], 'BLOCK_EXPR', /\s+(do|\{)(\s*\|[^|]*\|)?\s*\Z/.$freeze());
        
        Opal.def(self, '$initialize', $Compiler_initialize$2 = function $$initialize(source, file_name) {
          var $a, self = this;

          
          
          if (file_name == null) {
            file_name = "(erb)";
          };
          return $a = [source, file_name, source], (self.source = $a[0]), (self.file_name = $a[1]), (self.result = $a[2]), $a;
        }, $Compiler_initialize$2.$$arity = -2);
        
        Opal.def(self, '$prepared_source', $Compiler_prepared_source$3 = function $$prepared_source() {
          var self = this, $ret_or_1 = nil, source = nil;

          return (self.prepared_source = (function() {if ($truthy(($ret_or_1 = self.prepared_source))) {
            return $ret_or_1
          } else {
            
            source = self.source;
            source = self.$fix_quotes(source);
            source = self.$find_contents(source);
            source = self.$find_code(source);
            source = self.$wrap_compiled(source);
            source = self.$require_erb(source);
            return source;
          }; return nil; })())
        }, $Compiler_prepared_source$3.$$arity = 0);
        
        Opal.def(self, '$compile', $Compiler_compile$4 = function $$compile() {
          var self = this;

          return $$($nesting, 'Opal').$compile(self.$prepared_source())
        }, $Compiler_compile$4.$$arity = 0);
        
        Opal.def(self, '$fix_quotes', $Compiler_fix_quotes$5 = function $$fix_quotes(result) {
          var self = this;

          return result.$gsub("\"", "\\\"")
        }, $Compiler_fix_quotes$5.$$arity = 1);
        
        Opal.def(self, '$require_erb', $Compiler_require_erb$6 = function $$require_erb(result) {
          var self = this;

          return $rb_plus("require \"erb\";", result)
        }, $Compiler_require_erb$6.$$arity = 1);
        
        Opal.def(self, '$find_contents', $Compiler_find_contents$7 = function $$find_contents(result) {
          var $$8, self = this;

          return $send(result, 'gsub', [/<%=([\s\S]+?)%>/], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, inner = nil;

          
            inner = $$($nesting, 'Regexp').$last_match(1).$gsub(/\\'/, "'").$gsub(/\\"/, "\"");
            if ($truthy(inner['$=~']($$($nesting, 'BLOCK_EXPR')))) {
              return "" + "\")\noutput_buffer.append= " + (inner) + "\noutput_buffer.append(\""
            } else {
              return "" + "\")\noutput_buffer.append=(" + (inner) + ")\noutput_buffer.append(\""
            };}, $$8.$$s = self, $$8.$$arity = 0, $$8))
        }, $Compiler_find_contents$7.$$arity = 1);
        
        Opal.def(self, '$find_code', $Compiler_find_code$9 = function $$find_code(result) {
          var $$10, self = this;

          return $send(result, 'gsub', [/<%([\s\S]+?)%>/], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s, inner = nil;

          
            inner = $$($nesting, 'Regexp').$last_match(1).$gsub(/\\"/, "\"");
            return "" + "\")\n" + (inner) + "\noutput_buffer.append(\"";}, $$10.$$s = self, $$10.$$arity = 0, $$10))
        }, $Compiler_find_code$9.$$arity = 1);
        return (Opal.def(self, '$wrap_compiled', $Compiler_wrap_compiled$11 = function $$wrap_compiled(result) {
          var self = this, path = nil;

          
          path = self.file_name.$sub(Opal.regexp(["\\.opalerb", $$($nesting, 'REGEXP_END')]), "");
          return "" + "Template.new('" + (path) + "') do |output_buffer|\noutput_buffer.append(\"" + (result) + "\")\noutput_buffer.join\nend\n";
        }, $Compiler_wrap_compiled$11.$$arity = 1), nil) && 'wrap_compiled';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
