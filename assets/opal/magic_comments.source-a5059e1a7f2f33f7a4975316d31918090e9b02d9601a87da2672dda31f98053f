/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$freeze', '$line', '$loc', '$take', '$each', '$>=', '$any?', '$scan', '$text', '$to_sym', '$===', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'MagicComments');

    var $nesting = [self].concat($parent_nesting), $MagicComments_parse$1;

    
    Opal.const_set($nesting[0], 'MAGIC_COMMENT_RE', /^# *(\w+) *: *(\S+.*?) *$/.$freeze());
    Opal.const_set($nesting[0], 'EMACS_MAGIC_COMMENT_RE', /^# *-\*- *(\w+) *: *(\S+.*?) *-\*- *$/.$freeze());
    Opal.defs(self, '$parse', $MagicComments_parse$1 = function $$parse(sexp, comments) {
      var $$2, self = this, flags = nil, first_line = nil;

      
      flags = $hash2([], {});
      if ($truthy(sexp)) {
        
        first_line = sexp.$loc().$line();
        comments = comments.$take(first_line);};
      $send(comments, 'each', [], ($$2 = function(comment){var self = $$2.$$s == null ? this : $$2.$$s, $$3, $ret_or_1 = nil, $ret_or_2 = nil, parts = nil;

      
        
        if (comment == null) {
          comment = nil;
        };
        if ($truthy((function() {if ($truthy(($ret_or_1 = first_line))) {
          return $rb_ge(comment.$loc().$line(), first_line)
        } else {
          return $ret_or_1
        }; return nil; })())) {
          return nil;};
        if ($truthy((function() {if ($truthy(($ret_or_2 = (parts = comment.$text().$scan($$($nesting, 'MAGIC_COMMENT_RE')))['$any?']()))) {
          return $ret_or_2
        } else {
          return (parts = comment.$text().$scan($$($nesting, 'EMACS_MAGIC_COMMENT_RE')))['$any?']()
        }; return nil; })())) {
          return $send(parts, 'each', [], ($$3 = function(key, value){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil, $case = nil;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (value == null) {
              value = nil;
            };
            $writer = [key.$to_sym(), (function() {$case = value;
            if ("true"['$===']($case)) {return true}
            else if ("false"['$===']($case)) {return false}
            else {return value}})()];
            $send(flags, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3))
        } else {
          return nil
        };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
      return flags;
    }, $MagicComments_parse$1.$$arity = 2);
  })($$($nesting, 'Opal'), $nesting)
})(Opal);
