/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$empty?', '$[]', '$last_token_position', '$drop_while', '$lines', '$==', '$join', '$private', '$last', '$end_pos']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EofContent');

      var $nesting = [self].concat($parent_nesting), $EofContent_initialize$1, $EofContent_eof$2, $EofContent_last_token_position$4;

      self.$$prototype.tokens = self.$$prototype.source = nil;
      
      Opal.const_set($nesting[0], 'DATA_SEPARATOR', "__END__\n");
      
      Opal.def(self, '$initialize', $EofContent_initialize$1 = function $$initialize(tokens, source) {
        var self = this;

        
        self.tokens = tokens;
        return (self.source = source);
      }, $EofContent_initialize$1.$$arity = 2);
      
      Opal.def(self, '$eof', $EofContent_eof$2 = function $$eof() {
        var $$3, self = this, eof_content = nil, $ret_or_1 = nil;

        
        if ($truthy(self.tokens['$empty?']())) {
          return nil};
        eof_content = self.source['$[]'](Opal.Range.$new(self.$last_token_position(), -1, false));
        if ($truthy(eof_content)) {
        } else {
          return nil
        };
        eof_content = $send(eof_content.$lines(), 'drop_while', [], ($$3 = function(line){var self = $$3.$$s == null ? this : $$3.$$s;

        
          
          if (line == null) {
            line = nil;
          };
          return line['$==']("\n");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        if (eof_content['$[]'](0)['$==']("__END__\n")) {
          
          eof_content = (function() {if ($truthy(($ret_or_1 = eof_content['$[]']($range(1, -1, false))))) {
            return $ret_or_1
          } else {
            return []
          }; return nil; })();
          return eof_content.$join();
        } else if (eof_content['$=='](["__END__"])) {
          return ""
        } else {
          return nil
        };
      }, $EofContent_eof$2.$$arity = 0);
      self.$private();
      return (Opal.def(self, '$last_token_position', $EofContent_last_token_position$4 = function $$last_token_position() {
        var $a, $b, self = this, _ = nil, last_token_info = nil, last_token_range = nil;

        
        $b = self.tokens.$last(), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_info = ($a[1] == null ? nil : $a[1])), $b;
        $b = last_token_info, $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (last_token_range = ($a[1] == null ? nil : $a[1])), $b;
        return last_token_range.$end_pos();
      }, $EofContent_last_token_position$4.$$arity = 0), nil) && 'last_token_position';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
