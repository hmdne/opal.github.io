/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$attr_reader', '$[]', '$frozen?', '$dup', '$merge!', '$loc', '$line', '$column']);
  
  self.$require("ast");
  self.$require("parser/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Node');

        var $nesting = [self].concat($parent_nesting), $Node_assign_properties$1, $Node_line$2, $Node_column$3;

        self.$$prototype.meta = nil;
        
        self.$attr_reader("meta");
        
        Opal.def(self, '$assign_properties', $Node_assign_properties$1 = function $$assign_properties(properties) {
          var $iter = $Node_assign_properties$1.$$p, $yield = $iter || nil, self = this, meta = nil, $ret_or_1 = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Node_assign_properties$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy((meta = properties['$[]']("meta")))) {
            
            if ($truthy(meta['$frozen?']())) {
              meta = meta.$dup()};
            self.meta['$merge!'](meta);
          } else {
            self.meta = (function() {if ($truthy(($ret_or_1 = self.meta))) {
              return $ret_or_1
            } else {
              return $hash2([], {})
            }; return nil; })()
          };
          return $send2(self, Opal.find_super_dispatcher(self, 'assign_properties', $Node_assign_properties$1, false, true), 'assign_properties', $zuper, $iter);
        }, $Node_assign_properties$1.$$arity = 1);
        
        Opal.def(self, '$line', $Node_line$2 = function $$line() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$line()
          } else {
            return nil
          }
        }, $Node_line$2.$$arity = 0);
        return (Opal.def(self, '$column', $Node_column$3 = function $$column() {
          var self = this;

          if ($truthy(self.$loc())) {
            return self.$loc().$column()
          } else {
            return nil
          }
        }, $Node_column$3.$$arity = 0), nil) && 'column';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'AST'), 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
