/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$emit_lambda=', '$-', '$new']);
  
  self.$require("opal/ast/node");
  self.$require("parser/ruby30");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'AST');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Builder');

        var $nesting = [self].concat($parent_nesting), $Builder_n$1, $writer = nil;

        
        
        $writer = [true];
        $send(self, 'emit_lambda=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return (Opal.def(self, '$n', $Builder_n$1 = function $$n(type, children, location) {
          var self = this;

          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": location}))
        }, $Builder_n$1.$$arity = 3), nil) && 'n';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'Builders'), 'Default'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
