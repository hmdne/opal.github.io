/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$children', '$skip_check_present?', '$s', '$skip_check_present_not?', '$updated', '$process_all', '$==']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'OpalEngineCheck');

        var $nesting = [self].concat($parent_nesting), $OpalEngineCheck_on_if$1, $OpalEngineCheck_skip_check_present$ques$2, $OpalEngineCheck_skip_check_present_not$ques$3;

        
        
        Opal.def(self, '$on_if', $OpalEngineCheck_on_if$1 = function $$on_if(node) {
          var $a, self = this, test = nil, true_body = nil, false_body = nil;

          
          $a = [].concat(Opal.to_a(node.$children())), (test = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
          if ($truthy(self['$skip_check_present?'](test))) {
            false_body = self.$s("nil")};
          if ($truthy(self['$skip_check_present_not?'](test))) {
            true_body = self.$s("nil")};
          return node.$updated(nil, self.$process_all([test, true_body, false_body]));
        }, $OpalEngineCheck_on_if$1.$$arity = 1);
        
        Opal.def(self, '$skip_check_present?', $OpalEngineCheck_skip_check_present$ques$2 = function(test) {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = test['$==']($$($nesting, 'RUBY_ENGINE_CHECK'))))) {
            return $ret_or_1
          } else {
            return test['$==']($$($nesting, 'RUBY_PLATFORM_CHECK'))
          }
        }, $OpalEngineCheck_skip_check_present$ques$2.$$arity = 1);
        
        Opal.def(self, '$skip_check_present_not?', $OpalEngineCheck_skip_check_present_not$ques$3 = function(test) {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = test['$==']($$($nesting, 'RUBY_ENGINE_CHECK_NOT'))))) {
            return $ret_or_2
          } else {
            return test['$==']($$($nesting, 'RUBY_PLATFORM_CHECK_NOT'))
          }
        }, $OpalEngineCheck_skip_check_present_not$ques$3.$$arity = 1);
        Opal.const_set($nesting[0], 'RUBY_ENGINE_CHECK', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "==", self.$s("str", "opal")));
        Opal.const_set($nesting[0], 'RUBY_ENGINE_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_ENGINE"), "!=", self.$s("str", "opal")));
        Opal.const_set($nesting[0], 'RUBY_PLATFORM_CHECK', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "==", self.$s("str", "opal")));
        return Opal.const_set($nesting[0], 'RUBY_PLATFORM_CHECK_NOT', self.$s("send", self.$s("const", nil, "RUBY_PLATFORM"), "!=", self.$s("str", "opal")));
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
