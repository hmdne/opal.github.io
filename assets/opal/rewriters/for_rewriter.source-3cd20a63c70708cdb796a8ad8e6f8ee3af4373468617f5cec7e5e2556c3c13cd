/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$+', '$find', '$map', '$s', '$next_tmp', '$class', '$type', '$===', '$<<', '$prepend_to_body', '$process', '$attr_reader', '$new', '$to_a', '$result']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ForRewriter');

        var $nesting = [self].concat($parent_nesting), $ForRewriter_reset_tmp_counter$excl$1, $ForRewriter_next_tmp$2, $ForRewriter_on_for$3;

        
        Opal.defs(self, '$reset_tmp_counter!', $ForRewriter_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (self.counter = 0)
        }, $ForRewriter_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$next_tmp', $ForRewriter_next_tmp$2 = function $$next_tmp() {
          var self = this, $ret_or_1 = nil;
          if (self.counter == null) self.counter = nil;

          
          self.counter = (function() {if ($truthy(($ret_or_1 = self.counter))) {
            return $ret_or_1
          } else {
            return 0
          }; return nil; })();
          self.counter = $rb_plus(self.counter, 1);
          return "" + "$for_tmp" + (self.counter);
        }, $ForRewriter_next_tmp$2.$$arity = 0);
        
        Opal.def(self, '$on_for', $ForRewriter_on_for$3 = function $$on_for(node) {
          var $a, $$4, self = this, loop_variable = nil, iterating_value = nil, loop_body = nil, iterating_lvars = nil, lvars_declared_in_body = nil, outer_assigns = nil, tmp_loop_variable = nil, get_tmp_loop_variable = nil, loop_variable_assignment = nil, $case = nil;

          
          $a = [].concat(Opal.to_a(node)), (loop_variable = ($a[0] == null ? nil : $a[0])), (iterating_value = ($a[1] == null ? nil : $a[1])), (loop_body = ($a[2] == null ? nil : $a[2])), $a;
          iterating_lvars = $$($nesting, 'LocalVariableAssigns').$find(loop_variable);
          lvars_declared_in_body = $$($nesting, 'LocalVariableAssigns').$find(loop_body);
          outer_assigns = $send($rb_plus(iterating_lvars, lvars_declared_in_body), 'map', [], ($$4 = function(lvar_name){var self = $$4.$$s == null ? this : $$4.$$s;

          
            
            if (lvar_name == null) {
              lvar_name = nil;
            };
            return self.$s("lvdeclare", lvar_name);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
          tmp_loop_variable = self.$class().$next_tmp();
          get_tmp_loop_variable = self.$s("js_tmp", tmp_loop_variable);
          loop_variable_assignment = (function() {$case = loop_variable.$type();
          if ("mlhs"['$===']($case)) {return self.$s("masgn", loop_variable, get_tmp_loop_variable)}
          else {return loop_variable['$<<'](get_tmp_loop_variable)}})();
          loop_body = self.$prepend_to_body(loop_body, loop_variable_assignment);
          node = self.$s("send", iterating_value, "each", self.$s("iter", self.$s("args", self.$s("arg", tmp_loop_variable)), self.$process(loop_body)));
          return $send(self, 's', ["begin"].concat(Opal.to_a(outer_assigns)).concat([node]));
        }, $ForRewriter_on_for$3.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'LocalVariableAssigns');

          var $nesting = [self].concat($parent_nesting), $LocalVariableAssigns_find$5, $LocalVariableAssigns_initialize$6, $LocalVariableAssigns_on_lvasgn$7;

          
          self.$attr_reader("result");
          Opal.defs(self, '$find', $LocalVariableAssigns_find$5 = function $$find(node) {
            var self = this, processor = nil;

            
            processor = self.$new();
            processor.$process(node);
            return processor.$result().$to_a();
          }, $LocalVariableAssigns_find$5.$$arity = 1);
          
          Opal.def(self, '$initialize', $LocalVariableAssigns_initialize$6 = function $$initialize() {
            var self = this;

            return (self.result = $$($nesting, 'Set').$new())
          }, $LocalVariableAssigns_initialize$6.$$arity = 0);
          return (Opal.def(self, '$on_lvasgn', $LocalVariableAssigns_on_lvasgn$7 = function $$on_lvasgn(node) {
            var $a, $iter = $LocalVariableAssigns_on_lvasgn$7.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $LocalVariableAssigns_on_lvasgn$7.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
            self.$result()['$<<'](name);
            return $send2(self, Opal.find_super_dispatcher(self, 'on_lvasgn', $LocalVariableAssigns_on_lvasgn$7, false, true), 'on_lvasgn', $zuper, $iter);
          }, $LocalVariableAssigns_on_lvasgn$7.$$arity = 1), nil) && 'on_lvasgn';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
