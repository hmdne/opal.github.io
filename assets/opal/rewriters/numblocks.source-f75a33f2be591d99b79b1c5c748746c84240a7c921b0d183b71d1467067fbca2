/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$children', '$s', '$gen_args', '$map']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Numblocks');

        var $nesting = [self].concat($parent_nesting), $Numblocks_on_numblock$1, $Numblocks_gen_args$2;

        
        
        Opal.def(self, '$on_numblock', $Numblocks_on_numblock$1 = function $$on_numblock(node) {
          var $a, $b, self = this, left = nil, arg_count = nil, right = nil;

          
          $b = node.$children(), $a = Opal.to_ary($b), (left = ($a[0] == null ? nil : $a[0])), (arg_count = ($a[1] == null ? nil : $a[1])), (right = ($a[2] == null ? nil : $a[2])), $b;
          return self.$s("block", left, $send(self, 's', ["args"].concat(Opal.to_a(self.$gen_args(arg_count)))), right);
        }, $Numblocks_on_numblock$1.$$arity = 1);
        return (Opal.def(self, '$gen_args', $Numblocks_gen_args$2 = function $$gen_args(arg_count) {
          var $$3, self = this;

          return $send(Opal.Range.$new(1, arg_count, false), 'map', [], ($$3 = function(i){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (i == null) {
              i = nil;
            };
            return self.$s("arg", "" + "_" + (i));}, $$3.$$s = self, $$3.$$arity = 1, $$3))
        }, $Numblocks_gen_args$2.$$arity = 1), nil) && 'gen_args';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
