/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$updated', '$rewritten', '$initialization', '$s', '$prepend_to_body', '$attr_reader', '$split!', '$+', '$each', '$children', '$==', '$type', '$new_mlhs_tmp', '$process', '$<<', '$length', '$[]', '$empty?']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MlhsArgs');

        var $nesting = [self].concat($parent_nesting), $MlhsArgs_on_def$1, $MlhsArgs_on_defs$2, $MlhsArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $MlhsArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $MlhsArgs_on_def$1.$$p, $yield = $iter || nil, self = this, mid = nil, args = nil, body = nil, arguments$ = nil, $ret_or_1 = nil;

          if ($iter) $MlhsArgs_on_def$1.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_def', $MlhsArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = (function() {if ($truthy(($ret_or_1 = body))) {
              return $ret_or_1
            } else {
              return self.$s("nil")
            }; return nil; })();
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [mid, args, body]);
        }, $MlhsArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $MlhsArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $MlhsArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, arguments$ = nil, $ret_or_2 = nil;

          if ($iter) $MlhsArgs_on_defs$2.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_defs', $MlhsArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = (function() {if ($truthy(($ret_or_2 = body))) {
              return $ret_or_2
            } else {
              return self.$s("nil")
            }; return nil; })();
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [recv, mid, args, body]);
        }, $MlhsArgs_on_defs$2.$$arity = 1);
        
        Opal.def(self, '$on_iter', $MlhsArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $MlhsArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, body = nil, arguments$ = nil, $ret_or_3 = nil;

          if ($iter) $MlhsArgs_on_iter$3.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_iter', $MlhsArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          arguments$ = $$($nesting, 'Arguments').$new(args);
          args = args.$updated(nil, arguments$.$rewritten());
          if ($truthy(arguments$.$initialization())) {
            
            body = (function() {if ($truthy(($ret_or_3 = body))) {
              return $ret_or_3
            } else {
              return self.$s("nil")
            }; return nil; })();
            body = self.$prepend_to_body(body, arguments$.$initialization());};
          return node.$updated(nil, [args, body]);
        }, $MlhsArgs_on_iter$3.$$arity = 1);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Arguments');

          var $nesting = [self].concat($parent_nesting), $Arguments_initialize$4, $Arguments_reset_tmp_counter$excl$5, $Arguments_new_mlhs_tmp$6, $Arguments_split$excl$7;

          self.$$prototype.counter = self.$$prototype.args = self.$$prototype.initialization = nil;
          
          self.$attr_reader("rewritten", "initialization");
          
          Opal.def(self, '$initialize', $Arguments_initialize$4 = function $$initialize(args) {
            var self = this;

            
            self.args = args;
            self.rewritten = [];
            self.initialization = [];
            self.rewriter = $$($nesting, 'MlhsRewriter').$new();
            return self['$split!']();
          }, $Arguments_initialize$4.$$arity = 1);
          
          Opal.def(self, '$reset_tmp_counter!', $Arguments_reset_tmp_counter$excl$5 = function() {
            var self = this;

            return (self.counter = 0)
          }, $Arguments_reset_tmp_counter$excl$5.$$arity = 0);
          
          Opal.def(self, '$new_mlhs_tmp', $Arguments_new_mlhs_tmp$6 = function $$new_mlhs_tmp() {
            var self = this, $ret_or_4 = nil;

            
            self.counter = (function() {if ($truthy(($ret_or_4 = self.counter))) {
              return $ret_or_4
            } else {
              return 0
            }; return nil; })();
            self.counter = $rb_plus(self.counter, 1);
            return "" + "$mlhs_tmp" + (self.counter);
          }, $Arguments_new_mlhs_tmp$6.$$arity = 0);
          return (Opal.def(self, '$split!', $Arguments_split$excl$7 = function() {
            var $$8, self = this;

            
            $send(self.args.$children(), 'each', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s, var_name = nil, rhs = nil, mlhs = nil;
              if (self.rewriter == null) self.rewriter = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.rewritten == null) self.rewritten = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if (arg.$type()['$==']("mlhs")) {
                
                var_name = self.$new_mlhs_tmp();
                rhs = self.$s("lvar", var_name);
                mlhs = self.rewriter.$process(arg);
                self.initialization['$<<'](self.$s("masgn", mlhs, rhs));
                return self.rewritten['$<<'](self.$s("arg", var_name).$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": var_name})})));
              } else {
                return self.rewritten['$<<'](arg)
              };}, $$8.$$s = self, $$8.$$arity = 1, $$8));
            if (self.initialization.$length()['$=='](1)) {
              return (self.initialization = self.initialization['$[]'](0))
            } else if ($truthy(self.initialization['$empty?']())) {
              return (self.initialization = nil)
            } else {
              return (self.initialization = $send(self, 's', ["begin"].concat(Opal.to_a(self.initialization))))
            };
          }, $Arguments_split$excl$7.$$arity = 0), nil) && 'split!';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'MlhsRewriter');

          var $nesting = [self].concat($parent_nesting), $MlhsRewriter_on_arg$9, $MlhsRewriter_on_restarg$10;

          
          
          Opal.def(self, '$on_arg', $MlhsRewriter_on_arg$9 = function $$on_arg(node) {
            var self = this;

            return node.$updated("lvasgn")
          }, $MlhsRewriter_on_arg$9.$$arity = 1);
          return (Opal.def(self, '$on_restarg', $MlhsRewriter_on_restarg$10 = function $$on_restarg(node) {
            var self = this, name = nil;

            
            name = node.$children()['$[]'](0);
            if ($truthy(name)) {
              return self.$s("splat", node.$updated("lvasgn"))
            } else {
              return self.$s("splat")
            };
          }, $MlhsRewriter_on_restarg$10.$$arity = 1), nil) && 'on_restarg';
        })($nesting[0], $$($nesting, 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
