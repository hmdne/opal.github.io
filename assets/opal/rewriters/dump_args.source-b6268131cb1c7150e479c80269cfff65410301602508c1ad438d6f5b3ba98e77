/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$updated']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DumpArgs');

        var $nesting = [self].concat($parent_nesting), $DumpArgs_on_def$1, $DumpArgs_on_defs$2, $DumpArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $DumpArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $DumpArgs_on_def$1.$$p, $yield = $iter || nil, self = this, _mid = nil, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_def$1.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_def', $DumpArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (_mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (_body = ($a[2] == null ? nil : $a[2])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $DumpArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $DumpArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, _recv = nil, _mid = nil, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_defs$2.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_defs', $DumpArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (_recv = ($a[0] == null ? nil : $a[0])), (_mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (_body = ($a[3] == null ? nil : $a[3])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_defs$2.$$arity = 1);
        return (Opal.def(self, '$on_iter', $DumpArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $DumpArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, _body = nil;

          if ($iter) $DumpArgs_on_iter$3.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_iter', $DumpArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (_body = ($a[1] == null ? nil : $a[1])), $a;
          return node.$updated(nil, nil, $hash2(["meta"], {"meta": $hash2(["original_args"], {"original_args": args})}));
        }, $DumpArgs_on_iter$3.$$arity = 1), nil) && 'on_iter';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
