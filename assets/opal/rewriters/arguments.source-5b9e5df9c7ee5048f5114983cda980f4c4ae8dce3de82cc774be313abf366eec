/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$each', '$type', '$===', '$<<', '$any?', '$raise', '$!', '$nil?', '$has_any_kwargs?', '$can_inline_kwargs?', '$empty?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Arguments');

        var $nesting = [self].concat($parent_nesting), $Arguments_initialize$1, $Arguments_has_post_args$ques$3, $Arguments_has_any_kwargs$ques$4, $Arguments_can_inline_kwargs$ques$5;

        self.$$prototype.restarg = self.$$prototype.postargs = self.$$prototype.kwargs = self.$$prototype.kwoptargs = self.$$prototype.kwrestarg = self.$$prototype.optargs = nil;
        
        self.$attr_reader("args", "optargs", "restarg", "postargs", "kwargs", "kwoptargs", "kwrestarg", "shadowargs", "blockarg");
        
        Opal.def(self, '$initialize', $Arguments_initialize$1 = function $$initialize(args) {
          var $$2, self = this;

          
          self.args = [];
          self.optargs = [];
          self.restarg = nil;
          self.postargs = [];
          self.kwargs = [];
          self.kwoptargs = [];
          self.kwrestarg = nil;
          self.shadowargs = [];
          self.blockarg = nil;
          return $send(args, 'each', [], ($$2 = function(arg){var self = $$2.$$s == null ? this : $$2.$$s, $case = nil, $ret_or_1 = nil;
            if (self.restarg == null) self.restarg = nil;
            if (self.optargs == null) self.optargs = nil;
            if (self.postargs == null) self.postargs = nil;
            if (self.args == null) self.args = nil;
            if (self.kwargs == null) self.kwargs = nil;
            if (self.kwoptargs == null) self.kwoptargs = nil;
            if (self.shadowargs == null) self.shadowargs = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            return (function() {$case = arg.$type();
            if ("arg"['$===']($case) || "mlhs"['$===']($case)) {return (function() {if ($truthy((function() {if ($truthy(($ret_or_1 = self.restarg))) {
              return $ret_or_1
            } else {
              return self.optargs['$any?']()
            }; return nil; })())) {
              return self.postargs
            } else {
              return self.args
            }; return nil; })()['$<<'](arg)}
            else if ("optarg"['$===']($case)) {return self.optargs['$<<'](arg)}
            else if ("restarg"['$===']($case)) {return (self.restarg = arg)}
            else if ("kwarg"['$===']($case)) {return self.kwargs['$<<'](arg)}
            else if ("kwoptarg"['$===']($case)) {return self.kwoptargs['$<<'](arg)}
            else if ("kwrestarg"['$===']($case)) {return (self.kwrestarg = arg)}
            else if ("shadowarg"['$===']($case)) {return self.shadowargs['$<<'](arg)}
            else if ("blockarg"['$===']($case)) {return (self.blockarg = arg)}
            else {return self.$raise("" + "Unsupported arg type " + (arg.$type()))}})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $Arguments_initialize$1.$$arity = 1);
        
        Opal.def(self, '$has_post_args?', $Arguments_has_post_args$ques$3 = function() {
          var self = this, $ret_or_2 = nil, $ret_or_3 = nil, $ret_or_4 = nil;

          if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self.restarg['$nil?']()['$!']()))) {
            return $ret_or_3
          } else {
            return self.postargs['$any?']()
          }; return nil; })()))) {
            return $ret_or_2
          } else {
            
            if ($truthy(($ret_or_4 = self['$has_any_kwargs?']()))) {
              return self['$can_inline_kwargs?']()['$!']()
            } else {
              return $ret_or_4
            };
          }
        }, $Arguments_has_post_args$ques$3.$$arity = 0);
        
        Opal.def(self, '$has_any_kwargs?', $Arguments_has_any_kwargs$ques$4 = function() {
          var self = this, $ret_or_5 = nil, $ret_or_6 = nil;

          if ($truthy(($ret_or_5 = (function() {if ($truthy(($ret_or_6 = self.kwargs['$any?']()))) {
            return $ret_or_6
          } else {
            return self.kwoptargs['$any?']()
          }; return nil; })()))) {
            return $ret_or_5
          } else {
            return self.kwrestarg['$nil?']()['$!']()
          }
        }, $Arguments_has_any_kwargs$ques$4.$$arity = 0);
        return (Opal.def(self, '$can_inline_kwargs?', $Arguments_can_inline_kwargs$ques$5 = function() {
          var self = this, $ret_or_7 = nil, $ret_or_8 = nil;

          if ($truthy(($ret_or_7 = (function() {if ($truthy(($ret_or_8 = self.optargs['$empty?']()))) {
            return self.restarg['$nil?']()
          } else {
            return $ret_or_8
          }; return nil; })()))) {
            return self.postargs['$empty?']()
          } else {
            return $ret_or_7
          }
        }, $Arguments_can_inline_kwargs$ques$5.$$arity = 0), nil) && 'can_inline_kwargs?';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
