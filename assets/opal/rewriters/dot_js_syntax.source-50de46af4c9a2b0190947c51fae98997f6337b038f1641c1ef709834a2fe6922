/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $slice = Opal.slice, $truthy = Opal.truthy, $send2 = Opal.send2, $send = Opal.send;

  Opal.add_stubs(['$require', '$==', '$type', '$===', '$!=', '$size', '$error', '$first', '$to_js_attr_call', '$to_js_attr_assign_call', '$to_native_js_call', '$s']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DotJsSyntax');

        var $nesting = [self].concat($parent_nesting), $DotJsSyntax_on_send$1, $DotJsSyntax_to_native_js_call$2, $DotJsSyntax_to_js_attr_call$3, $DotJsSyntax_to_js_attr_assign_call$4;

        
        
        Opal.def(self, '$on_send', $DotJsSyntax_on_send$1 = function $$on_send(node) {
          var $a, $iter = $DotJsSyntax_on_send$1.$$p, $yield = $iter || nil, self = this, recv = nil, meth = nil, args = nil, $ret_or_1 = nil, recv_of_recv = nil, meth_of_recv = nil, _ = nil, $case = nil, property = nil, value = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DotJsSyntax_on_send$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if ($truthy((function() {if ($truthy(($ret_or_1 = recv))) {
            return recv.$type()['$==']("send")
          } else {
            return $ret_or_1
          }; return nil; })())) {
            
            $a = [].concat(Opal.to_a(recv)), (recv_of_recv = ($a[0] == null ? nil : $a[0])), (meth_of_recv = ($a[1] == null ? nil : $a[1])), (_ = ($a[2] == null ? nil : $a[2])), $a;
            if (meth_of_recv['$==']("JS")) {
              
              $case = meth;
              if ("[]"['$===']($case)) {
              if ($truthy(args.$size()['$!='](1))) {
                self.$error(".JS[:property] syntax supports only one argument")};
              property = args.$first();
              node = self.$to_js_attr_call(recv_of_recv, property);}
              else if ("[]="['$===']($case)) {
              if ($truthy(args.$size()['$!='](2))) {
                self.$error(".JS[:property]= syntax supports only two arguments")};
              $a = [].concat(Opal.to_a(args)), (property = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
              node = self.$to_js_attr_assign_call(recv_of_recv, property, value);}
              else {node = self.$to_native_js_call(recv_of_recv, meth, args)};
              return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', [node], null);
            } else {
              return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', $zuper, $iter)
            };
          } else {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $DotJsSyntax_on_send$1, false, true), 'on_send', $zuper, $iter)
          };
        }, $DotJsSyntax_on_send$1.$$arity = 1);
        
        Opal.def(self, '$to_native_js_call', $DotJsSyntax_to_native_js_call$2 = function $$to_native_js_call(recv, meth, args) {
          var self = this;

          return $send(self, 's', ["jscall", recv, meth].concat(Opal.to_a(args)))
        }, $DotJsSyntax_to_native_js_call$2.$$arity = 3);
        
        Opal.def(self, '$to_js_attr_call', $DotJsSyntax_to_js_attr_call$3 = function $$to_js_attr_call(recv, property) {
          var self = this;

          return self.$s("jsattr", recv, property)
        }, $DotJsSyntax_to_js_attr_call$3.$$arity = 2);
        return (Opal.def(self, '$to_js_attr_assign_call', $DotJsSyntax_to_js_attr_assign_call$4 = function $$to_js_attr_assign_call(recv, property, value) {
          var self = this;

          return self.$s("jsattrasgn", recv, property, value)
        }, $DotJsSyntax_to_js_attr_assign_call$4.$$arity = 3), nil) && 'to_js_attr_assign_call';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
