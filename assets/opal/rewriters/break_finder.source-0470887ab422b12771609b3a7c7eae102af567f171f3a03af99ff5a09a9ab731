/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/rewriter");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BreakFinder');

        var $nesting = [self].concat($parent_nesting), $BreakFinder_initialize$1, $BreakFinder_found_break$ques$2, $BreakFinder_on_break$3, $BreakFinder_stop_lookup$4;

        self.$$prototype.found_break = nil;
        
        
        Opal.def(self, '$initialize', $BreakFinder_initialize$1 = function $$initialize() {
          var self = this;

          return (self.found_break = false)
        }, $BreakFinder_initialize$1.$$arity = 0);
        
        Opal.def(self, '$found_break?', $BreakFinder_found_break$ques$2 = function() {
          var self = this;

          return self.found_break
        }, $BreakFinder_found_break$ques$2.$$arity = 0);
        
        Opal.def(self, '$on_break', $BreakFinder_on_break$3 = function $$on_break(node) {
          var self = this;

          
          self.found_break = true;
          return node;
        }, $BreakFinder_on_break$3.$$arity = 1);
        
        Opal.def(self, '$stop_lookup', $BreakFinder_stop_lookup$4 = function $$stop_lookup(node) {
          var self = this;

          return nil
        }, $BreakFinder_stop_lookup$4.$$arity = 1);
        Opal.alias(self, "on_for", "stop_lookup");
        Opal.alias(self, "on_while", "stop_lookup");
        Opal.alias(self, "on_while_post", "stop_lookup");
        Opal.alias(self, "on_until", "stop_lookup");
        Opal.alias(self, "on_until_post", "stop_lookup");
        return Opal.alias(self, "on_block", "stop_lookup");
      })($nesting[0], $$$($$$($$($nesting, 'Opal'), 'Rewriters'), 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
