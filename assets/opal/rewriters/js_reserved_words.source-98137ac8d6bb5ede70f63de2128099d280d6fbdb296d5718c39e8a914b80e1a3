/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send2 = Opal.send2, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$freeze', '$=~', '$!', '$valid_name?', '$class', '$to_sym', '$valid_ivar_name?', '$[]', '$to_s', '$updated', '$fix_var_name', '$fix_ivar_name']);
  
  self.$require("opal/rewriters/base");
  self.$require("opal/regexp_anchors");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsReservedWords');

        var $nesting = [self].concat($parent_nesting), $JsReservedWords_valid_name$ques$1, $JsReservedWords_valid_ivar_name$ques$2, $JsReservedWords_fix_var_name$3, $JsReservedWords_fix_ivar_name$4, $JsReservedWords_on_lvar$5, $JsReservedWords_on_lvasgn$6, $JsReservedWords_on_ivar$7, $JsReservedWords_on_ivasgn$8, $JsReservedWords_on_restarg$9, $JsReservedWords_on_argument$10;

        
        Opal.const_set($nesting[0], 'ES51_RESERVED_WORD', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'ES3_RESERVED_WORD_EXCLUSIVE', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:int|byte|char|goto|long|final|float|short|double|native|throws|boolean|abstract|volatile|transient|synchronized)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'PROTO_SPECIAL_PROPS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:constructor|displayName|__proto__|__parent__|__noSuchMethod__|__count__)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'PROTO_SPECIAL_METHODS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:hasOwnProperty|valueOf)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'IMMUTABLE_PROPS', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:NaN|Infinity|undefined)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.const_set($nesting[0], 'BASIC_IDENTIFIER_RULES', Opal.regexp([$$($nesting, 'REGEXP_START'), "[$_a-z][$_a-z\\d]*", $$($nesting, 'REGEXP_END')], 'i').$freeze());
        Opal.const_set($nesting[0], 'RESERVED_FUNCTION_NAMES', Opal.regexp([$$($nesting, 'REGEXP_START'), "(?:Array)", $$($nesting, 'REGEXP_END')]).$freeze());
        Opal.defs(self, '$valid_name?', $JsReservedWords_valid_name$ques$1 = function(name) {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_1 = $$($nesting, 'BASIC_IDENTIFIER_RULES')['$=~'](name)))) {
            return (function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = $$($nesting, 'ES51_RESERVED_WORD')['$=~'](name)))) {
              return $ret_or_3
            } else {
              return $$($nesting, 'ES3_RESERVED_WORD_EXCLUSIVE')['$=~'](name)
            }; return nil; })()))) {
              return $ret_or_2
            } else {
              return $$($nesting, 'IMMUTABLE_PROPS')['$=~'](name)
            }; return nil; })()['$!']()
          } else {
            return $ret_or_1
          }
        }, $JsReservedWords_valid_name$ques$1.$$arity = 1);
        Opal.defs(self, '$valid_ivar_name?', $JsReservedWords_valid_ivar_name$ques$2 = function(name) {
          var self = this, $ret_or_4 = nil;

          return (function() {if ($truthy(($ret_or_4 = $$($nesting, 'PROTO_SPECIAL_PROPS')['$=~'](name)))) {
            return $ret_or_4
          } else {
            return $$($nesting, 'PROTO_SPECIAL_METHODS')['$=~'](name)
          }; return nil; })()['$!']()
        }, $JsReservedWords_valid_ivar_name$ques$2.$$arity = 1);
        
        Opal.def(self, '$fix_var_name', $JsReservedWords_fix_var_name$3 = function $$fix_var_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_name?'](name))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, $JsReservedWords_fix_var_name$3.$$arity = 1);
        
        Opal.def(self, '$fix_ivar_name', $JsReservedWords_fix_ivar_name$4 = function $$fix_ivar_name(name) {
          var self = this;

          if ($truthy(self.$class()['$valid_ivar_name?'](name.$to_s()['$[]']($range(1, -1, false))))) {
            return name
          } else {
            return (("" + (name)) + "$").$to_sym()
          }
        }, $JsReservedWords_fix_ivar_name$4.$$arity = 1);
        
        Opal.def(self, '$on_lvar', $JsReservedWords_on_lvar$5 = function $$on_lvar(node) {
          var $a, $iter = $JsReservedWords_on_lvar$5.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil;

          if ($iter) $JsReservedWords_on_lvar$5.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_var_name(name)]);
          return $send2(self, Opal.find_super_dispatcher(self, 'on_lvar', $JsReservedWords_on_lvar$5, false, true), 'on_lvar', [node], null);
        }, $JsReservedWords_on_lvar$5.$$arity = 1);
        
        Opal.def(self, '$on_lvasgn', $JsReservedWords_on_lvasgn$6 = function $$on_lvasgn(node) {
          var $a, $iter = $JsReservedWords_on_lvasgn$6.$$p, $yield = $iter || nil, self = this, name = nil, value = nil;

          if ($iter) $JsReservedWords_on_lvasgn$6.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = (function() {if ($truthy(value)) {
            return node.$updated(nil, [self.$fix_var_name(name), value])
          } else {
            return node.$updated(nil, [self.$fix_var_name(name)])
          }; return nil; })();
          return $send2(self, Opal.find_super_dispatcher(self, 'on_lvasgn', $JsReservedWords_on_lvasgn$6, false, true), 'on_lvasgn', [node], null);
        }, $JsReservedWords_on_lvasgn$6.$$arity = 1);
        
        Opal.def(self, '$on_ivar', $JsReservedWords_on_ivar$7 = function $$on_ivar(node) {
          var $a, $iter = $JsReservedWords_on_ivar$7.$$p, $yield = $iter || nil, self = this, name = nil, _ = nil;

          if ($iter) $JsReservedWords_on_ivar$7.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          node = node.$updated(nil, [self.$fix_ivar_name(name)]);
          return $send2(self, Opal.find_super_dispatcher(self, 'on_ivar', $JsReservedWords_on_ivar$7, false, true), 'on_ivar', [node], null);
        }, $JsReservedWords_on_ivar$7.$$arity = 1);
        
        Opal.def(self, '$on_ivasgn', $JsReservedWords_on_ivasgn$8 = function $$on_ivasgn(node) {
          var $a, $iter = $JsReservedWords_on_ivasgn$8.$$p, $yield = $iter || nil, self = this, name = nil, value = nil;

          if ($iter) $JsReservedWords_on_ivasgn$8.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          node = (function() {if ($truthy(value)) {
            return node.$updated(nil, [self.$fix_ivar_name(name), value])
          } else {
            return node.$updated(nil, [self.$fix_ivar_name(name)])
          }; return nil; })();
          return $send2(self, Opal.find_super_dispatcher(self, 'on_ivasgn', $JsReservedWords_on_ivasgn$8, false, true), 'on_ivasgn', [node], null);
        }, $JsReservedWords_on_ivasgn$8.$$arity = 1);
        
        Opal.def(self, '$on_restarg', $JsReservedWords_on_restarg$9 = function $$on_restarg(node) {
          var $a, self = this, name = nil, _ = nil;

          
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if ($truthy(name)) {
            node = node.$updated(nil, [self.$fix_var_name(name)], $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}))};
          return node;
        }, $JsReservedWords_on_restarg$9.$$arity = 1);
        return (Opal.def(self, '$on_argument', $JsReservedWords_on_argument$10 = function $$on_argument(node) {
          var $a, $iter = $JsReservedWords_on_argument$10.$$p, $yield = $iter || nil, self = this, name = nil, value = nil, fixed_name = nil, new_children = nil;

          if ($iter) $JsReservedWords_on_argument$10.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_argument', $JsReservedWords_on_argument$10, false, true), 'on_argument', [node], null);
          $a = [].concat(Opal.to_a(node)), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $a;
          fixed_name = self.$fix_var_name(name);
          new_children = (function() {if ($truthy(value)) {
            return [fixed_name, value]
          } else {
            return [fixed_name]
          }; return nil; })();
          return node.$updated(nil, new_children, $hash2(["meta"], {"meta": $hash2(["arg_name"], {"arg_name": name})}));
        }, $JsReservedWords_on_argument$10.$$arity = 1), nil) && 'on_argument';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
