/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2, $slice = Opal.slice, $send = Opal.send;

  Opal.add_stubs(['$require', '$s', '$=~', '$to_s', '$==', '$process_all', '$updated']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExplicitWriterReturn');

        var $nesting = [self].concat($parent_nesting), $ExplicitWriterReturn_initialize$1, $ExplicitWriterReturn_on_send$2, $ExplicitWriterReturn_on_masgn$3;

        self.$$prototype.in_masgn = nil;
        
        
        Opal.def(self, '$initialize', $ExplicitWriterReturn_initialize$1 = function $$initialize() {
          var self = this;

          return (self.in_masgn = false)
        }, $ExplicitWriterReturn_initialize$1.$$arity = 0);
        Opal.const_set($nesting[0], 'TMP_NAME', "$writer");
        Opal.const_set($nesting[0], 'GET_ARGS_NODE', self.$s("lvar", $$($nesting, 'TMP_NAME')));
        Opal.const_set($nesting[0], 'RETURN_ARGS_NODE', self.$s("jsattr", $$($nesting, 'GET_ARGS_NODE'), self.$s("send", self.$s("jsattr", $$($nesting, 'GET_ARGS_NODE'), self.$s("str", "length")), "-", self.$s("int", 1))));
        
        Opal.def(self, '$on_send', $ExplicitWriterReturn_on_send$2 = function $$on_send(node) {
          var $a, $iter = $ExplicitWriterReturn_on_send$2.$$p, $yield = $iter || nil, self = this, recv = nil, method_name = nil, args = nil, $ret_or_1 = nil, set_args_node = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ExplicitWriterReturn_on_send$2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self.in_masgn)) {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $ExplicitWriterReturn_on_send$2, false, true), 'on_send', $zuper, $iter)};
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          if ($truthy((function() {if ($truthy(($ret_or_1 = method_name.$to_s()['$=~'](Opal.regexp([$$($nesting, 'REGEXP_START'), "\\w+=", $$($nesting, 'REGEXP_END')]))))) {
            return $ret_or_1
          } else {
            return method_name.$to_s()['$==']("[]=")
          }; return nil; })())) {
            
            set_args_node = self.$s("lvasgn", $$($nesting, 'TMP_NAME'), $send(self, 's', ["array"].concat(Opal.to_a(self.$process_all(args)))));
            return self.$s("begin", set_args_node, node.$updated(nil, [recv, method_name, self.$s("splat", $$($nesting, 'GET_ARGS_NODE'))]), $$($nesting, 'RETURN_ARGS_NODE'));
          } else {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_send', $ExplicitWriterReturn_on_send$2, false, true), 'on_send', $zuper, $iter)
          };
        }, $ExplicitWriterReturn_on_send$2.$$arity = 1);
        return (Opal.def(self, '$on_masgn', $ExplicitWriterReturn_on_masgn$3 = function $$on_masgn(node) {
          var $iter = $ExplicitWriterReturn_on_masgn$3.$$p, $yield = $iter || nil, self = this, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ExplicitWriterReturn_on_masgn$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.in_masgn = true;
          result = $send2(self, Opal.find_super_dispatcher(self, 'on_masgn', $ExplicitWriterReturn_on_masgn$3, false, true), 'on_masgn', $zuper, $iter);
          self.in_masgn = false;
          return result;
        }, $ExplicitWriterReturn_on_masgn$3.$$arity = 1), nil) && 'on_masgn';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
