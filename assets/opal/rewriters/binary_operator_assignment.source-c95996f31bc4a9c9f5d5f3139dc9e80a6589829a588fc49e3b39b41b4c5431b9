/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $lambda = Opal.lambda, $slice = Opal.slice, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$+', '$updated', '$s', '$[]', '$==', '$type', '$new_temp', '$freeze', '$call', '$fetch', '$error', '$process']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BinaryOperatorAssignment');

        var $nesting = [self].concat($parent_nesting), $BinaryOperatorAssignment_reset_tmp_counter$excl$1, $BinaryOperatorAssignment_new_temp$2, $BinaryOperatorAssignment$3, $BinaryOperatorAssignment_on_op_asgn$7, $BinaryOperatorAssignment_on_defined$ques$9;

        
        Opal.defs(self, '$reset_tmp_counter!', $BinaryOperatorAssignment_reset_tmp_counter$excl$1 = function() {
          var self = this;

          return (Opal.class_variable_set($nesting[0], '@@counter', 0))
        }, $BinaryOperatorAssignment_reset_tmp_counter$excl$1.$$arity = 0);
        Opal.defs(self, '$new_temp', $BinaryOperatorAssignment_new_temp$2 = function $$new_temp() {
          var $a, self = this, $ret_or_1 = nil;

          
          (Opal.class_variable_set($nesting[0], '@@counter', (function() {if ($truthy(($ret_or_1 = (($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a)))) {
            return $ret_or_1
          } else {
            return 0
          }; return nil; })()));
          (Opal.class_variable_set($nesting[0], '@@counter', $rb_plus((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a), 1)));
          return "" + "$binary_op_recvr_tmp_" + ((($a = $nesting[0].$$cvars['@@counter']) == null ? nil : $a));
        }, $BinaryOperatorAssignment_new_temp$2.$$arity = 0);
        Opal.const_set($nesting[0], 'GET_SET', $lambda(($BinaryOperatorAssignment$3 = function(get_type, set_type){var self = $BinaryOperatorAssignment$3.$$s == null ? this : $BinaryOperatorAssignment$3.$$s, $$4;

        
          
          if (get_type == null) {
            get_type = nil;
          };
          
          if (set_type == null) {
            set_type = nil;
          };
          return $lambda(($$4 = function(lhs, operation, rhs){var self = $$4.$$s == null ? this : $$4.$$s, get_node = nil, set_node = nil;

          
            
            if (lhs == null) {
              lhs = nil;
            };
            
            if (operation == null) {
              operation = nil;
            };
            
            if (rhs == null) {
              rhs = nil;
            };
            get_node = lhs.$updated(get_type);
            set_node = self.$s("send", get_node, operation, rhs);
            return lhs.$updated(set_type, [].concat(Opal.to_a(lhs)).concat([set_node]));}, $$4.$$s = self, $$4.$$arity = 3, $$4));}, $BinaryOperatorAssignment$3.$$s = self, $BinaryOperatorAssignment$3.$$arity = 2, $BinaryOperatorAssignment$3)));
        Opal.const_set($nesting[0], 'LocalVariableHandler', $$($nesting, 'GET_SET')['$[]']("lvar", "lvasgn"));
        Opal.const_set($nesting[0], 'InstanceVariableHandler', $$($nesting, 'GET_SET')['$[]']("ivar", "ivasgn"));
        Opal.const_set($nesting[0], 'ConstantHandler', $$($nesting, 'GET_SET')['$[]']("const", "casgn"));
        Opal.const_set($nesting[0], 'GlobalVariableHandler', $$($nesting, 'GET_SET')['$[]']("gvar", "gvasgn"));
        Opal.const_set($nesting[0], 'ClassVariableHandler', $$($nesting, 'GET_SET')['$[]']("cvar", "cvasgn"));
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'SendHandler');

          var $nesting = [self].concat($parent_nesting), $SendHandler_call$5;

          return (Opal.defs(self, '$call', $SendHandler_call$5 = function $$call(lhs, operation, rhs) {
            var $a, self = this, recvr = nil, reader_method = nil, args = nil, $ret_or_2 = nil, recvr_tmp = nil, cache_recvr = nil, writer_method = nil, call_reader = nil, call_op = nil, call_writer = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (reader_method = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            if ($truthy((function() {if ($truthy(($ret_or_2 = recvr))) {
              return recvr.$type()['$==']("send")
            } else {
              return $ret_or_2
            }; return nil; })())) {
              
              recvr_tmp = self.$new_temp();
              cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
              recvr = self.$s("js_tmp", recvr_tmp);};
            writer_method = "" + (reader_method) + "=";
            call_reader = lhs.$updated("send", [recvr, reader_method].concat(Opal.to_a(args)));
            call_op = self.$s("send", call_reader, operation, rhs);
            call_writer = lhs.$updated("send", [recvr, writer_method].concat(Opal.to_a(args)).concat([call_op]));
            if ($truthy(cache_recvr)) {
              return self.$s("begin", cache_recvr, call_writer)
            } else {
              return call_writer
            };
          }, $SendHandler_call$5.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ConditionalSendHandler');

          var $nesting = [self].concat($parent_nesting), $ConditionalSendHandler_call$6;

          return (Opal.defs(self, '$call', $ConditionalSendHandler_call$6 = function $$call(lhs, operation, rhs) {
            var $a, self = this, recvr = nil, meth = nil, args = nil, recvr_tmp = nil, cache_recvr = nil, recvr_is_nil = nil, plain_send = nil, plain_op_asgn = nil;

            
            $a = [].concat(Opal.to_a(lhs)), (recvr = ($a[0] == null ? nil : $a[0])), (meth = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
            recvr_tmp = self.$new_temp();
            cache_recvr = self.$s("lvasgn", recvr_tmp, recvr);
            recvr = self.$s("js_tmp", recvr_tmp);
            recvr_is_nil = self.$s("send", recvr, "nil?");
            plain_send = lhs.$updated("send", [recvr, meth].concat(Opal.to_a(args)));
            plain_op_asgn = self.$s("op_asgn", plain_send, operation, rhs);
            return self.$s("begin", cache_recvr, self.$s("if", recvr_is_nil, self.$s("nil"), plain_op_asgn));
          }, $ConditionalSendHandler_call$6.$$arity = 3), nil) && 'call'
        })($nesting[0], self, $nesting);
        Opal.const_set($nesting[0], 'HANDLERS', $hash2(["lvasgn", "ivasgn", "casgn", "gvasgn", "cvasgn", "send", "csend"], {"lvasgn": $$($nesting, 'LocalVariableHandler'), "ivasgn": $$($nesting, 'InstanceVariableHandler'), "casgn": $$($nesting, 'ConstantHandler'), "gvasgn": $$($nesting, 'GlobalVariableHandler'), "cvasgn": $$($nesting, 'ClassVariableHandler'), "send": $$($nesting, 'SendHandler'), "csend": $$($nesting, 'ConditionalSendHandler')}).$freeze());
        
        Opal.def(self, '$on_op_asgn', $BinaryOperatorAssignment_on_op_asgn$7 = function $$on_op_asgn(node) {
          var $a, $$8, self = this, lhs = nil, op = nil, rhs = nil, result = nil;

          
          $a = [].concat(Opal.to_a(node)), (lhs = ($a[0] == null ? nil : $a[0])), (op = ($a[1] == null ? nil : $a[1])), (rhs = ($a[2] == null ? nil : $a[2])), $a;
          result = $send($$($nesting, 'HANDLERS'), 'fetch', [lhs.$type()], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;

          return self.$error("" + "cannot handle LHS type: " + (lhs.$type()))}, $$8.$$s = self, $$8.$$arity = 0, $$8)).$call(lhs, op, rhs);
          return self.$process(result);
        }, $BinaryOperatorAssignment_on_op_asgn$7.$$arity = 1);
        Opal.const_set($nesting[0], 'ASSIGNMENT_STRING_NODE', self.$s("str", "assignment"));
        return (Opal.def(self, '$on_defined?', $BinaryOperatorAssignment_on_defined$ques$9 = function(node) {
          var $a, $iter = $BinaryOperatorAssignment_on_defined$ques$9.$$p, $yield = $iter || nil, self = this, inner = nil, _ = nil;

          if ($iter) $BinaryOperatorAssignment_on_defined$ques$9.$$p = null;
          
          $a = [].concat(Opal.to_a(node)), (inner = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          if (inner.$type()['$==']("op_asgn")) {
            return $$($nesting, 'ASSIGNMENT_STRING_NODE')
          } else {
            return $send2(self, Opal.find_super_dispatcher(self, 'on_defined?', $BinaryOperatorAssignment_on_defined$ques$9, false, true), 'on_defined?', [node], null)
          };
        }, $BinaryOperatorAssignment_on_defined$ques$9.$$arity = 1), nil) && 'on_defined?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
