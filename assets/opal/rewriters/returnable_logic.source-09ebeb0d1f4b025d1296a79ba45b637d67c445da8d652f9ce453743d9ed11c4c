/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$+', '$children', '$next_tmp', '$updated', '$s', '$process']);
  
  self.$require("opal/rewriters/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnableLogic');

        var $nesting = [self].concat($parent_nesting), $ReturnableLogic_next_tmp$1, $ReturnableLogic_reset_tmp_counter$excl$2, $ReturnableLogic_on_or$3, $ReturnableLogic_on_and$4;

        self.$$prototype.counter = nil;
        
        
        Opal.def(self, '$next_tmp', $ReturnableLogic_next_tmp$1 = function $$next_tmp() {
          var self = this, $ret_or_1 = nil;

          
          self.counter = (function() {if ($truthy(($ret_or_1 = self.counter))) {
            return $ret_or_1
          } else {
            return 0
          }; return nil; })();
          self.counter = $rb_plus(self.counter, 1);
          return "" + "$ret_or_" + (self.counter);
        }, $ReturnableLogic_next_tmp$1.$$arity = 0);
        
        Opal.def(self, '$reset_tmp_counter!', $ReturnableLogic_reset_tmp_counter$excl$2 = function() {
          var self = this;

          return (self.counter = nil)
        }, $ReturnableLogic_reset_tmp_counter$excl$2.$$arity = 0);
        
        Opal.def(self, '$on_or', $ReturnableLogic_on_or$3 = function $$on_or(node) {
          var $a, self = this, lhs = nil, rhs = nil, lhs_tmp = nil;

          
          $a = [].concat(Opal.to_a(node.$children())), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          lhs_tmp = self.$next_tmp();
          return node.$updated("if", [self.$s("lvasgn", lhs_tmp, self.$process(lhs)), self.$s("js_tmp", lhs_tmp), self.$process(rhs)]);
        }, $ReturnableLogic_on_or$3.$$arity = 1);
        return (Opal.def(self, '$on_and', $ReturnableLogic_on_and$4 = function $$on_and(node) {
          var $a, self = this, lhs = nil, rhs = nil, lhs_tmp = nil;

          
          $a = [].concat(Opal.to_a(node.$children())), (lhs = ($a[0] == null ? nil : $a[0])), (rhs = ($a[1] == null ? nil : $a[1])), $a;
          lhs_tmp = self.$next_tmp();
          return node.$updated("if", [self.$s("lvasgn", lhs_tmp, self.$process(lhs)), self.$process(rhs), self.$s("js_tmp", lhs_tmp)]);
        }, $ReturnableLogic_on_and$4.$$arity = 1), nil) && 'on_and';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
