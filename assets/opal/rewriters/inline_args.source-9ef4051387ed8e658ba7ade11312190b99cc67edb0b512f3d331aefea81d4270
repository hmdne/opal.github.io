/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$s', '$new', '$updated', '$inline', '$prepend_to_body', '$initialization', '$attr_reader', '$freeze', '$children', '$each', '$send', '$any?', '$blockarg', '$<<', '$shadowargs', '$args', '$==', '$[]', '$has_post_args?', '$length', '$has_any_kwargs?', '$can_inline_kwargs?', '$kwargs', '$kwoptargs', '$kwrestarg', '$postargs', '$optargs', '$args_to_keep', '$restarg']);
  
  self.$require("opal/rewriters/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InlineArgs');

        var $nesting = [self].concat($parent_nesting), $InlineArgs_on_def$1, $InlineArgs_on_defs$2, $InlineArgs_on_iter$3;

        
        
        Opal.def(self, '$on_def', $InlineArgs_on_def$1 = function $$on_def(node) {
          var $a, $iter = $InlineArgs_on_def$1.$$p, $yield = $iter || nil, self = this, mid = nil, args = nil, body = nil, $ret_or_1 = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_def$1.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_def', $InlineArgs_on_def$1, false, true), 'on_def', [node], null);
          $a = [].concat(Opal.to_a(node)), (mid = ($a[0] == null ? nil : $a[0])), (args = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
          body = (function() {if ($truthy(($ret_or_1 = body))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }; return nil; })();
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "def"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [mid, inline_args, body]);
        }, $InlineArgs_on_def$1.$$arity = 1);
        
        Opal.def(self, '$on_defs', $InlineArgs_on_defs$2 = function $$on_defs(node) {
          var $a, $iter = $InlineArgs_on_defs$2.$$p, $yield = $iter || nil, self = this, recv = nil, mid = nil, args = nil, body = nil, $ret_or_2 = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_defs$2.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_defs', $InlineArgs_on_defs$2, false, true), 'on_defs', [node], null);
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (mid = ($a[1] == null ? nil : $a[1])), (args = ($a[2] == null ? nil : $a[2])), (body = ($a[3] == null ? nil : $a[3])), $a;
          body = (function() {if ($truthy(($ret_or_2 = body))) {
            return $ret_or_2
          } else {
            return self.$s("nil")
          }; return nil; })();
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "defs"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [recv, mid, inline_args, body]);
        }, $InlineArgs_on_defs$2.$$arity = 1);
        
        Opal.def(self, '$on_iter', $InlineArgs_on_iter$3 = function $$on_iter(node) {
          var $a, $iter = $InlineArgs_on_iter$3.$$p, $yield = $iter || nil, self = this, args = nil, body = nil, $ret_or_3 = nil, initializer = nil, inline_args = nil;

          if ($iter) $InlineArgs_on_iter$3.$$p = null;
          
          node = $send2(self, Opal.find_super_dispatcher(self, 'on_iter', $InlineArgs_on_iter$3, false, true), 'on_iter', [node], null);
          $a = [].concat(Opal.to_a(node)), (args = ($a[0] == null ? nil : $a[0])), (body = ($a[1] == null ? nil : $a[1])), $a;
          body = (function() {if ($truthy(($ret_or_3 = body))) {
            return $ret_or_3
          } else {
            return self.$s("nil")
          }; return nil; })();
          initializer = $$($nesting, 'Initializer').$new(args, $hash2(["type"], {"type": "iter"}));
          inline_args = args.$updated(nil, initializer.$inline());
          body = self.$prepend_to_body(body, initializer.$initialization());
          return node.$updated(nil, [inline_args, body]);
        }, $InlineArgs_on_iter$3.$$arity = 1);
        return (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Initializer');

          var $nesting = [self].concat($parent_nesting), $Initializer_initialize$4, $Initializer_extract_blockarg$6, $Initializer_initialize_shadowargs$7, $Initializer_extract_args$9, $Initializer_prepare_post_args$11, $Initializer_prepare_kwargs$12, $Initializer_extract_kwargs$13, $Initializer_extract_kwoptargs$15, $Initializer_extract_kwrestarg$17, $Initializer_extract_post_args$18, $Initializer_extract_optargs$20, $Initializer_extract_restarg$22, $Initializer_args_to_keep$23;

          self.$$prototype.initialization = self.$$prototype.args = self.$$prototype.inline = nil;
          
          self.$attr_reader("inline", "initialization");
          Opal.const_set($nesting[0], 'STEPS', ["extract_blockarg", "initialize_shadowargs", "extract_args", "prepare_post_args", "prepare_kwargs", "extract_optargs", "extract_restarg", "extract_post_args", "extract_kwargs", "extract_kwoptargs", "extract_kwrestarg"].$freeze());
          
          Opal.def(self, '$initialize', $Initializer_initialize$4 = function $$initialize(args, $kwargs) {
            var type, $$5, self = this;

            
            
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else if (!$kwargs.$$is_hash) {
              throw Opal.ArgumentError.$new('expected kwargs');
            };
            
            if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'type')) {
              throw Opal.ArgumentError.$new('missing keyword: type');
            }
            type = $kwargs.$$smap["type"];;
            self.args = $$($nesting, 'Arguments').$new(args.$children());
            self.inline = [];
            self.initialization = [];
            self.type = type;
            self.underscore_found = false;
            $send($$($nesting, 'STEPS'), 'each', [], ($$5 = function(step){var self = $$5.$$s == null ? this : $$5.$$s;

            
              
              if (step == null) {
                step = nil;
              };
              return self.$send(step);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
            if ($truthy(self.initialization['$any?']())) {
              return (self.initialization = $send(self, 's', ["begin"].concat(Opal.to_a(self.initialization))))
            } else {
              return (self.initialization = nil)
            };
          }, $Initializer_initialize$4.$$arity = 2);
          
          Opal.def(self, '$extract_blockarg', $Initializer_extract_blockarg$6 = function $$extract_blockarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$blockarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_blockarg"))
            } else {
              return nil
            }
          }, $Initializer_extract_blockarg$6.$$arity = 0);
          
          Opal.def(self, '$initialize_shadowargs', $Initializer_initialize_shadowargs$7 = function $$initialize_shadowargs() {
            var $$8, self = this;

            return $send(self.args.$shadowargs(), 'each', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("initialize_shadowarg"));}, $$8.$$s = self, $$8.$$arity = 1, $$8))
          }, $Initializer_initialize_shadowargs$7.$$arity = 0);
          
          Opal.def(self, '$extract_args', $Initializer_extract_args$9 = function $$extract_args() {
            var $$10, self = this;

            return $send(self.args.$args(), 'each', [], ($$10 = function(arg){var self = $$10.$$s == null ? this : $$10.$$s;
              if (self.type == null) self.type = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.underscore_found == null) self.underscore_found = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if (self.type['$==']("iter")) {
                
                self.initialization['$<<'](arg.$updated("initialize_iter_arg"));
                if (arg.$children()['$[]'](0)['$==']("_")) {
                  
                  if ($truthy(self.underscore_found)) {
                    arg = self.$s("fake_arg")};
                  self.underscore_found = true;};};
              return self.inline['$<<'](arg);}, $$10.$$s = self, $$10.$$arity = 1, $$10))
          }, $Initializer_extract_args$9.$$arity = 0);
          
          Opal.def(self, '$prepare_post_args', $Initializer_prepare_post_args$11 = function $$prepare_post_args() {
            var self = this;

            if ($truthy(self.args['$has_post_args?']())) {
              return self.initialization['$<<'](self.$s("prepare_post_args", self.args.$args().$length()))
            } else {
              return nil
            }
          }, $Initializer_prepare_post_args$11.$$arity = 0);
          
          Opal.def(self, '$prepare_kwargs', $Initializer_prepare_kwargs$12 = function $$prepare_kwargs() {
            var self = this;

            
            if ($truthy(self.args['$has_any_kwargs?']())) {
            } else {
              return nil
            };
            if ($truthy(self.args['$can_inline_kwargs?']())) {
              self.inline['$<<'](self.$s("arg", "$kwargs"))
            } else {
              
              self.initialization['$<<'](self.$s("extract_kwargs"));
              self.inline['$<<'](self.$s("fake_arg"));
            };
            return self.initialization['$<<'](self.$s("ensure_kwargs_are_kwargs"));
          }, $Initializer_prepare_kwargs$12.$$arity = 0);
          
          Opal.def(self, '$extract_kwargs', $Initializer_extract_kwargs$13 = function $$extract_kwargs() {
            var $$14, self = this;

            return $send(self.args.$kwargs(), 'each', [], ($$14 = function(arg){var self = $$14.$$s == null ? this : $$14.$$s;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("extract_kwarg"));}, $$14.$$s = self, $$14.$$arity = 1, $$14))
          }, $Initializer_extract_kwargs$13.$$arity = 0);
          
          Opal.def(self, '$extract_kwoptargs', $Initializer_extract_kwoptargs$15 = function $$extract_kwoptargs() {
            var $$16, self = this;

            return $send(self.args.$kwoptargs(), 'each', [], ($$16 = function(arg){var self = $$16.$$s == null ? this : $$16.$$s;
              if (self.initialization == null) self.initialization = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              return self.initialization['$<<'](arg.$updated("extract_kwoptarg"));}, $$16.$$s = self, $$16.$$arity = 1, $$16))
          }, $Initializer_extract_kwoptargs$15.$$arity = 0);
          
          Opal.def(self, '$extract_kwrestarg', $Initializer_extract_kwrestarg$17 = function $$extract_kwrestarg() {
            var self = this, arg = nil;

            if ($truthy((arg = self.args.$kwrestarg()))) {
              return self.initialization['$<<'](arg.$updated("extract_kwrestarg"))
            } else {
              return nil
            }
          }, $Initializer_extract_kwrestarg$17.$$arity = 0);
          
          Opal.def(self, '$extract_post_args', $Initializer_extract_post_args$18 = function $$extract_post_args() {
            var $$19, self = this;

            return $send(self.args.$postargs(), 'each', [], ($$19 = function(arg){var self = $$19.$$s == null ? this : $$19.$$s;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              self.initialization['$<<'](arg.$updated("extract_post_arg"));
              return self.inline['$<<'](self.$s("fake_arg"));}, $$19.$$s = self, $$19.$$arity = 1, $$19))
          }, $Initializer_extract_post_args$18.$$arity = 0);
          
          Opal.def(self, '$extract_optargs', $Initializer_extract_optargs$20 = function $$extract_optargs() {
            var $$21, self = this, has_post_args = nil;

            
            has_post_args = self.args['$has_post_args?']();
            return $send(self.args.$optargs(), 'each', [], ($$21 = function(arg){var self = $$21.$$s == null ? this : $$21.$$s, $a, arg_name = nil, default_value = nil;
              if (self.initialization == null) self.initialization = nil;
              if (self.inline == null) self.inline = nil;

            
              
              if (arg == null) {
                arg = nil;
              };
              if ($truthy(has_post_args)) {
                
                $a = [].concat(Opal.to_a(arg)), (arg_name = ($a[0] == null ? nil : $a[0])), (default_value = ($a[1] == null ? nil : $a[1])), $a;
                self.initialization['$<<'](arg.$updated("extract_post_optarg", [arg_name, default_value, self.$args_to_keep()]));
                return self.inline['$<<'](self.$s("fake_arg"));
              } else {
                
                self.inline['$<<'](arg.$updated("arg"));
                return self.initialization['$<<'](arg.$updated("extract_optarg"));
              };}, $$21.$$s = self, $$21.$$arity = 1, $$21));
          }, $Initializer_extract_optargs$20.$$arity = 0);
          
          Opal.def(self, '$extract_restarg', $Initializer_extract_restarg$22 = function $$extract_restarg() {
            var self = this, arg = nil, arg_name = nil;

            if ($truthy((arg = self.args.$restarg()))) {
              
              arg_name = arg.$children()['$[]'](0);
              self.initialization['$<<'](arg.$updated("extract_restarg", [arg_name, self.$args_to_keep()]));
              return self.inline['$<<'](self.$s("fake_arg"));
            } else {
              return nil
            }
          }, $Initializer_extract_restarg$22.$$arity = 0);
          return (Opal.def(self, '$args_to_keep', $Initializer_args_to_keep$23 = function $$args_to_keep() {
            var self = this;

            return self.args.$postargs().$length()
          }, $Initializer_args_to_keep$23.$$arity = 0), nil) && 'args_to_keep';
        })($nesting[0], $$$($$$($$$('::', 'Opal'), 'Rewriters'), 'Base'), $nesting);
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
