/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$new', '$current_node', '$loc', '$+', '$stmts_of', '$begin_with_stmts', '$nil?', '$include?', '$type', '$children', '$length', '$===', '$[]', '$s', '$attr_accessor', '$current_node=', '$-', '$location=', '$raise']);
  
  self.$require("parser");
  self.$require("opal/ast/node");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Rewriters');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $Base_s$9, $Base_s$10, $Base_prepend_to_body$11, $Base_append_to_body$12, $Base_stmts_of$13, $Base_begin_with_stmts$14, $Base_process$15, $Base_error$16;

        
        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'DummyLocation');

          var $nesting = [self].concat($parent_nesting), $DummyLocation_node$eq$1, $DummyLocation_expression$2, $DummyLocation_begin_pos$3, $DummyLocation_end_pos$4, $DummyLocation_source$5, $DummyLocation_line$6, $DummyLocation_column$7, $DummyLocation_last_line$8;

          
          
          Opal.def(self, '$node=', $DummyLocation_node$eq$1 = function($a) {
            var $post_args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            ;
            return nil;
          }, $DummyLocation_node$eq$1.$$arity = -1);
          
          Opal.def(self, '$expression', $DummyLocation_expression$2 = function $$expression() {
            var self = this;

            return self
          }, $DummyLocation_expression$2.$$arity = 0);
          
          Opal.def(self, '$begin_pos', $DummyLocation_begin_pos$3 = function $$begin_pos() {
            var self = this;

            return 0
          }, $DummyLocation_begin_pos$3.$$arity = 0);
          
          Opal.def(self, '$end_pos', $DummyLocation_end_pos$4 = function $$end_pos() {
            var self = this;

            return 0
          }, $DummyLocation_end_pos$4.$$arity = 0);
          
          Opal.def(self, '$source', $DummyLocation_source$5 = function $$source() {
            var self = this;

            return ""
          }, $DummyLocation_source$5.$$arity = 0);
          
          Opal.def(self, '$line', $DummyLocation_line$6 = function $$line() {
            var self = this;

            return 0
          }, $DummyLocation_line$6.$$arity = 0);
          
          Opal.def(self, '$column', $DummyLocation_column$7 = function $$column() {
            var self = this;

            return 0
          }, $DummyLocation_column$7.$$arity = 0);
          return (Opal.def(self, '$last_line', $DummyLocation_last_line$8 = function $$last_line() {
            var self = this;

            return $$$($$($nesting, 'Float'), 'INFINITY')
          }, $DummyLocation_last_line$8.$$arity = 0), nil) && 'last_line';
        })($nesting[0], null, $nesting);
        Opal.const_set($nesting[0], 'DUMMY_LOCATION', $$($nesting, 'DummyLocation').$new());
        
        Opal.def(self, '$s', $Base_s$9 = function $$s(type, $a) {
          var $post_args, children, self = this, loc = nil;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          loc = (function() {if ($truthy(self.$current_node())) {
            return self.$current_node().$loc()
          } else {
            return $$($nesting, 'DUMMY_LOCATION')
          }; return nil; })();
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": loc}));
        }, $Base_s$9.$$arity = -2);
        Opal.defs(self, '$s', $Base_s$10 = function $$s(type, $a) {
          var $post_args, children, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          children = $post_args;;
          return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children, $hash2(["location"], {"location": $$($nesting, 'DUMMY_LOCATION')}));
        }, $Base_s$10.$$arity = -2);
        Opal.alias(self, "on_iter", "process_regular_node");
        Opal.alias(self, "on_top", "process_regular_node");
        Opal.alias(self, "on_zsuper", "process_regular_node");
        Opal.alias(self, "on_jscall", "on_send");
        Opal.alias(self, "on_jsattr", "process_regular_node");
        Opal.alias(self, "on_jsattrasgn", "process_regular_node");
        Opal.alias(self, "on_kwsplat", "process_regular_node");
        
        Opal.def(self, '$prepend_to_body', $Base_prepend_to_body$11 = function $$prepend_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(node), self.$stmts_of(body));
          return self.$begin_with_stmts(stmts);
        }, $Base_prepend_to_body$11.$$arity = 2);
        
        Opal.def(self, '$append_to_body', $Base_append_to_body$12 = function $$append_to_body(body, node) {
          var self = this, stmts = nil;

          
          stmts = $rb_plus(self.$stmts_of(body), self.$stmts_of(node));
          return self.$begin_with_stmts(stmts);
        }, $Base_append_to_body$12.$$arity = 2);
        
        Opal.def(self, '$stmts_of', $Base_stmts_of$13 = function $$stmts_of(node) {
          var self = this;

          if ($truthy(node['$nil?']())) {
            return []
          } else if ($truthy(["begin", "kwbegin"]['$include?'](node.$type()))) {
            return node.$children()
          } else {
            return [node]
          }
        }, $Base_stmts_of$13.$$arity = 1);
        
        Opal.def(self, '$begin_with_stmts', $Base_begin_with_stmts$14 = function $$begin_with_stmts(stmts) {
          var self = this, $case = nil;

          return (function() {$case = stmts.$length();
          if ((0)['$===']($case)) {return nil}
          else if ((1)['$===']($case)) {return stmts['$[]'](0)}
          else {return $send(self, 's', ["begin"].concat(Opal.to_a(stmts)))}})()
        }, $Base_begin_with_stmts$14.$$arity = 1);
        self.$attr_accessor("current_node");
        
        Opal.def(self, '$process', $Base_process$15 = function $$process(node) {
          var $iter = $Base_process$15.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Base_process$15.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return (function() { try {
          
          
          $writer = [node];
          $send(self, 'current_node=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return $send2(self, Opal.find_super_dispatcher(self, 'process', $Base_process$15, false, true), 'process', $zuper, $iter);
          } finally {
            (($writer = [nil]), $send(self, 'current_node=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
          }; })()
        }, $Base_process$15.$$arity = 1);
        return (Opal.def(self, '$error', $Base_error$16 = function $$error(msg) {
          var self = this, error = nil, $writer = nil;

          
          error = $$$($$$('::', 'Opal'), 'RewritingError').$new(msg);
          if ($truthy(self.$current_node())) {
            
            $writer = [self.$current_node().$loc()];
            $send(error, 'location=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return self.$raise(error);
        }, $Base_error$16.$$arity = 1), nil) && 'error';
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'AST'), 'Processor'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
