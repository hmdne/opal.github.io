/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$in_while?', '$push', '$iter?', '$scope', '$expr_or_nil', '$value', '$error', '$size', '$children', '$===', '$s', '$first', '$compile_while', '$compile_iter', '$[]', '$while_loop', '$stmt?', '$line', '$break_val', '$nil?', '$expr', '$[]=', '$-', '$helper', '$identity', '$==', '$empty_splat?', '$recv', '$>', '$find_parent_def', '$expr?', '$def?', '$return_in_iter?', '$return_expr_in_def?', '$scope_to_catch_return', '$catch_return=', '$return_val', '$to_s']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NextNode');

        var $nesting = [self].concat($parent_nesting), $NextNode_compile$1, $NextNode_value$2;

        
        self.$handle("next");
        
        Opal.def(self, '$compile', $NextNode_compile$1 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$push("continue;")
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$push("return ", self.$expr_or_nil(self.$value()), ";")
          } else {
            return self.$error("Invalid next")
          }
        }, $NextNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$value', $NextNode_value$2 = function $$value() {
          var self = this, $case = nil;

          return (function() {$case = self.$children().$size();
          if ((0)['$===']($case)) {return self.$s("nil")}
          else if ((1)['$===']($case)) {return self.$children().$first()}
          else {return $send(self, 's', ["array"].concat(Opal.to_a(self.$children())))}})()
        }, $NextNode_value$2.$$arity = 0), nil) && 'value';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BreakNode');

        var $nesting = [self].concat($parent_nesting), $BreakNode_compile$3, $BreakNode_compile_while$4, $BreakNode_compile_iter$5, $BreakNode_break_val$6;

        
        self.$handle("break");
        self.$children("value");
        
        Opal.def(self, '$compile', $BreakNode_compile$3 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$error("void value expression: cannot use break outside of iter/while")
          }
        }, $BreakNode_compile$3.$$arity = 0);
        
        Opal.def(self, '$compile_while', $BreakNode_compile_while$4 = function $$compile_while() {
          var self = this;

          if ($truthy(self.$while_loop()['$[]']("closure"))) {
            return self.$push("return ", self.$expr_or_nil(self.$value()))
          } else {
            return self.$push("break;")
          }
        }, $BreakNode_compile_while$4.$$arity = 0);
        
        Opal.def(self, '$compile_iter', $BreakNode_compile_iter$5 = function $$compile_iter() {
          var self = this;

          
          if ($truthy(self['$stmt?']())) {
          } else {
            self.$error("break must be used as a statement")
          };
          return self.$line("Opal.brk(", self.$break_val(), ", $brk)");
        }, $BreakNode_compile_iter$5.$$arity = 0);
        return (Opal.def(self, '$break_val', $BreakNode_break_val$6 = function $$break_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else {
            return self.$expr(self.$value())
          }
        }, $BreakNode_break_val$6.$$arity = 0), nil) && 'break_val';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RedoNode');

        var $nesting = [self].concat($parent_nesting), $RedoNode_compile$7, $RedoNode_compile_while$8, $RedoNode_compile_iter$9;

        
        self.$handle("redo");
        
        Opal.def(self, '$compile', $RedoNode_compile$7 = function $$compile() {
          var self = this;

          if ($truthy(self['$in_while?']())) {
            return self.$compile_while()
          } else if ($truthy(self.$scope()['$iter?']())) {
            return self.$compile_iter()
          } else {
            return self.$push("REDO()")
          }
        }, $RedoNode_compile$7.$$arity = 0);
        
        Opal.def(self, '$compile_while', $RedoNode_compile_while$8 = function $$compile_while() {
          var self = this, $writer = nil;

          
          
          $writer = ["use_redo", true];
          $send(self.$while_loop(), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return self.$push("" + (self.$while_loop()['$[]']("redo_var")) + " = true; continue;");
        }, $RedoNode_compile_while$8.$$arity = 0);
        return (Opal.def(self, '$compile_iter', $RedoNode_compile_iter$9 = function $$compile_iter() {
          var self = this;

          
          self.$helper("slice");
          return self.$push("" + "return " + (self.$scope().$identity()) + ".apply(null, $slice.call(arguments))");
        }, $RedoNode_compile_iter$9.$$arity = 0), nil) && 'compile_iter';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SplatNode');

        var $nesting = [self].concat($parent_nesting), $SplatNode_empty_splat$ques$10, $SplatNode_compile$11;

        
        self.$handle("splat");
        self.$children("value");
        
        Opal.def(self, '$empty_splat?', $SplatNode_empty_splat$ques$10 = function() {
          var self = this;

          return self.$value()['$=='](self.$s("array"))
        }, $SplatNode_empty_splat$ques$10.$$arity = 0);
        return (Opal.def(self, '$compile', $SplatNode_compile$11 = function $$compile() {
          var self = this;

          if ($truthy(self['$empty_splat?']())) {
            return self.$push("[]")
          } else {
            return self.$push("Opal.to_a(", self.$recv(self.$value()), ")")
          }
        }, $SplatNode_compile$11.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnNode');

        var $nesting = [self].concat($parent_nesting), $ReturnNode_return_val$12, $ReturnNode_return_in_iter$ques$13, $ReturnNode_return_expr_in_def$ques$14, $ReturnNode_scope_to_catch_return$15, $ReturnNode_compile$16;

        
        self.$handle("return");
        self.$children("value");
        
        Opal.def(self, '$return_val', $ReturnNode_return_val$12 = function $$return_val() {
          var self = this;

          if ($truthy(self.$value()['$nil?']())) {
            return self.$expr(self.$s("nil"))
          } else if ($truthy($rb_gt(self.$children().$size(), 1))) {
            return self.$expr($send(self, 's', ["array"].concat(Opal.to_a(self.$children()))))
          } else {
            return self.$expr(self.$value())
          }
        }, $ReturnNode_return_val$12.$$arity = 0);
        
        Opal.def(self, '$return_in_iter?', $ReturnNode_return_in_iter$ques$13 = function() {
          var self = this, $ret_or_1 = nil, parent_def = nil;

          if ($truthy((function() {if ($truthy(($ret_or_1 = self.$scope()['$iter?']()))) {
            return (parent_def = self.$scope().$find_parent_def())
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return parent_def
          } else {
            return nil
          }
        }, $ReturnNode_return_in_iter$ques$13.$$arity = 0);
        
        Opal.def(self, '$return_expr_in_def?', $ReturnNode_return_expr_in_def$ques$14 = function() {
          var self = this, $ret_or_2 = nil;

          if ($truthy((function() {if ($truthy(($ret_or_2 = self['$expr?']()))) {
            return self.$scope()['$def?']()
          } else {
            return $ret_or_2
          }; return nil; })())) {
            return self.$scope()
          } else {
            return nil
          }
        }, $ReturnNode_return_expr_in_def$ques$14.$$arity = 0);
        
        Opal.def(self, '$scope_to_catch_return', $ReturnNode_scope_to_catch_return$15 = function $$scope_to_catch_return() {
          var self = this, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = self['$return_in_iter?']()))) {
            return $ret_or_3
          } else {
            return self['$return_expr_in_def?']()
          }
        }, $ReturnNode_scope_to_catch_return$15.$$arity = 0);
        return (Opal.def(self, '$compile', $ReturnNode_compile$16 = function $$compile() {
          var self = this, def_scope = nil, $writer = nil;

          if ($truthy((def_scope = self.$scope_to_catch_return()))) {
            
            
            $writer = [true];
            $send(def_scope, 'catch_return=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$push("Opal.ret(", self.$return_val(), ")");
          } else if ($truthy(self['$stmt?']())) {
            return self.$push("return ", self.$return_val())
          } else {
            return self.$error("void value expression: cannot return as an expression")
          }
        }, $ReturnNode_compile$16.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JSReturnNode');

        var $nesting = [self].concat($parent_nesting), $JSReturnNode_compile$17;

        
        self.$handle("js_return");
        self.$children("value");
        return (Opal.def(self, '$compile', $JSReturnNode_compile$17 = function $$compile() {
          var self = this;

          
          self.$push("return ");
          return self.$push(self.$expr(self.$value()));
        }, $JSReturnNode_compile$17.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JSTempNode');

        var $nesting = [self].concat($parent_nesting), $JSTempNode_compile$18;

        
        self.$handle("js_tmp");
        self.$children("value");
        return (Opal.def(self, '$compile', $JSTempNode_compile$18 = function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s())
        }, $JSTempNode_compile$18.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BlockPassNode');

        var $nesting = [self].concat($parent_nesting), $BlockPassNode_compile$19;

        
        self.$handle("block_pass");
        self.$children("value");
        return (Opal.def(self, '$compile', $BlockPassNode_compile$19 = function $$compile() {
          var self = this;

          return self.$push(self.$expr(self.$s("send", self.$value(), "to_proc", self.$s("arglist"))))
        }, $BlockPassNode_compile$19.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
