/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$handle', '$children', '$each', '$line', '$expr', '$push', '$new_name', '$old_name', '$empty?', '$stmt?', '$compile_children', '$simple_children?', '$compile_inline_children', '$>', '$size', '$wrap', '$==', '$returned_children', '$+', '$returns', '$compiler', '$s', '$process', '$freeze', '$none?', '$include?', '$type', '$map', '$each_with_index', '$reject', '$to_proc']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UndefNode');

        var $nesting = [self].concat($parent_nesting), $UndefNode_compile$1;

        
        self.$handle("undef");
        self.$children("value");
        return (Opal.def(self, '$compile', $UndefNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$line("Opal.udef(self, '$' + ", self.$expr(child), ");");}, $$2.$$s = self, $$2.$$arity = 1, $$2))
        }, $UndefNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AliasNode');

        var $nesting = [self].concat($parent_nesting), $AliasNode_compile$3;

        
        self.$handle("alias");
        self.$children("new_name", "old_name");
        return (Opal.def(self, '$compile', $AliasNode_compile$3 = function $$compile() {
          var self = this;

          return self.$push("Opal.alias(self, ", self.$expr(self.$new_name()), ", ", self.$expr(self.$old_name()), ")")
        }, $AliasNode_compile$3.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeginNode');

        var $nesting = [self].concat($parent_nesting), $BeginNode_compile$4, $BeginNode_returned_children$5, $BeginNode_compile_children$6, $BeginNode_simple_children$ques$8, $BeginNode_compile_inline_children$10;

        self.$$prototype.level = self.$$prototype.returned_children = nil;
        
        self.$handle("begin");
        
        Opal.def(self, '$compile', $BeginNode_compile$4 = function $$compile() {
          var self = this;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("nil")};
          if ($truthy(self['$stmt?']())) {
            return self.$compile_children(self.$children(), self.level)
          } else if ($truthy(self['$simple_children?']())) {
            
            self.$compile_inline_children(self.$children(), self.level);
            if ($truthy($rb_gt(self.$children().$size(), 1))) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };
          } else if (self.$children().$size()['$=='](1)) {
            return self.$compile_inline_children(self.$returned_children(), self.level)
          } else {
            
            self.$compile_children(self.$returned_children(), self.level);
            return self.$wrap("(function() {", "})()");
          };
        }, $BeginNode_compile$4.$$arity = 0);
        
        Opal.def(self, '$returned_children', $BeginNode_returned_children$5 = function $$returned_children() {
          var $a, $b, self = this, $ret_or_1 = nil, rest = nil, last_child = nil;

          return (self.returned_children = (function() {if ($truthy(($ret_or_1 = self.returned_children))) {
            return $ret_or_1
          } else {
            
            $a = [].concat(Opal.to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice.call($a, 0, $b)), (last_child = ($a[$b] == null ? nil : $a[$b])), $a;
            if ($truthy(last_child)) {
              return $rb_plus(rest, [self.$compiler().$returns(last_child)])
            } else {
              return [self.$s("nil")]
            };
          }; return nil; })())
        }, $BeginNode_returned_children$5.$$arity = 0);
        
        Opal.def(self, '$compile_children', $BeginNode_compile_children$6 = function $$compile_children(children, level) {
          var $$7, self = this;

          return $send(children, 'each', [], ($$7 = function(child){var self = $$7.$$s == null ? this : $$7.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$line(self.$process(child, level), ";");}, $$7.$$s = self, $$7.$$arity = 1, $$7))
        }, $BeginNode_compile_children$6.$$arity = 2);
        Opal.const_set($nesting[0], 'COMPLEX_CHILDREN', ["while", "while_post", "until", "until_post", "js_return"].$freeze());
        
        Opal.def(self, '$simple_children?', $BeginNode_simple_children$ques$8 = function() {
          var $$9, self = this;

          return $send(self.$children(), 'none?', [], ($$9 = function(child){var self = $$9.$$s == null ? this : $$9.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return $$($nesting, 'COMPLEX_CHILDREN')['$include?'](child.$type());}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        }, $BeginNode_simple_children$ques$8.$$arity = 0);
        return (Opal.def(self, '$compile_inline_children', $BeginNode_compile_inline_children$10 = function $$compile_inline_children(children, level) {
          var $$11, $$12, self = this, processed_children = nil;

          
          processed_children = $send(children, 'map', [], ($$11 = function(child){var self = $$11.$$s == null ? this : $$11.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return self.$process(child, level);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          return $send($send(processed_children, 'reject', [], "empty?".$to_proc()), 'each_with_index', [], ($$12 = function(child, idx){var self = $$12.$$s == null ? this : $$12.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            return self.$push(child);}, $$12.$$s = self, $$12.$$arity = 2, $$12));
        }, $BeginNode_compile_inline_children$10.$$arity = 2), nil) && 'compile_inline_children';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KwBeginNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("kwbegin")
      })($nesting[0], $$($nesting, 'BeginNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
