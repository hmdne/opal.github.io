/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $lambda = Opal.lambda, $send2 = Opal.send2, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$handle', '$push', '$to_s', '$type', '$children', '$value', '$recv?', '$wrap', '$freeze', '$join', '$keys', '$gsub', '$even?', '$length', '$last_match', '$+', '$chop', '$[]', '$inspect', '$to_i', '$to_utf16', '$translate_escape_chars', '$!=', '$upcase', '$<=', '$call', '$-', '$>>', '$&', '$attr_accessor', '$extract_flags_and_value', '$select!', '$flags', '$=~', '$warning', '$compiler', '$==', '$compile_static_regexp', '$compile_dynamic_regexp', '$each_with_index', '$zero?', '$expr', '$any?', '$===', '$new', '$map', '$to_proc', '$flags=', '$s', '$value=', '$include?', '$is_a?', '$updated', '$delete', '$source', '$expression', '$loc', '$regexp', '$each', '$compile_inline?', '$helper', '$compile_inline', '$compile_range_initialize', '$start', '$finish', '$raise', '$numerator', '$denominator', '$real', '$imag']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ValueNode');

        var $nesting = [self].concat($parent_nesting), $ValueNode_compile$1, $ValueNode_truthy_optimize$ques$2;

        
        self.$handle("true", "false", "self", "nil");
        
        Opal.def(self, '$compile', $ValueNode_compile$1 = function $$compile() {
          var self = this;

          return self.$push(self.$type().$to_s())
        }, $ValueNode_compile$1.$$arity = 0);
        return (Opal.defs(self, '$truthy_optimize?', $ValueNode_truthy_optimize$ques$2 = function() {
          var self = this;

          return true
        }, $ValueNode_truthy_optimize$ques$2.$$arity = 0), nil) && 'truthy_optimize?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NumericNode');

        var $nesting = [self].concat($parent_nesting), $NumericNode_compile$3, $NumericNode_truthy_optimize$ques$4;

        
        self.$handle("int", "float");
        self.$children("value");
        
        Opal.def(self, '$compile', $NumericNode_compile$3 = function $$compile() {
          var self = this;

          
          self.$push(self.$value().$to_s());
          if ($truthy(self['$recv?']())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $NumericNode_compile$3.$$arity = 0);
        return (Opal.defs(self, '$truthy_optimize?', $NumericNode_truthy_optimize$ques$4 = function() {
          var self = this;

          return true
        }, $NumericNode_truthy_optimize$ques$4.$$arity = 0), nil) && 'truthy_optimize?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StringNode');

        var $nesting = [self].concat($parent_nesting), $StringNode_translate_escape_chars$5, $StringNode_compile$7, $StringNode_to_utf16$9;

        
        self.$handle("str");
        self.$children("value");
        Opal.const_set($nesting[0], 'ESCAPE_CHARS', $hash2(["a", "e"], {"a": "\\u0007", "e": "\\u001b"}).$freeze());
        Opal.const_set($nesting[0], 'ESCAPE_REGEX', Opal.regexp(["(\\\\+)([", $$($nesting, 'ESCAPE_CHARS').$keys().$join(""), "])"]).$freeze());
        
        Opal.def(self, '$translate_escape_chars', $StringNode_translate_escape_chars$5 = function $$translate_escape_chars(inspect_string) {
          var $$6, self = this;

          return $send(inspect_string, 'gsub', [$$($nesting, 'ESCAPE_REGEX')], ($$6 = function(original){var self = $$6.$$s == null ? this : $$6.$$s;

          
            
            if (original == null) {
              original = nil;
            };
            if ($truthy($$($nesting, 'Regexp').$last_match(1).$length()['$even?']())) {
              return original
            } else {
              return $rb_plus($$($nesting, 'Regexp').$last_match(1).$chop(), $$($nesting, 'ESCAPE_CHARS')['$[]']($$($nesting, 'Regexp').$last_match(2)))
            };}, $$6.$$s = self, $$6.$$arity = 1, $$6))
        }, $StringNode_translate_escape_chars$5.$$arity = 1);
        
        Opal.def(self, '$compile', $StringNode_compile$7 = function $$compile() {
          var $$8, self = this, string_value = nil, sanitized_value = nil;

          
          string_value = self.$value();
          sanitized_value = $send(string_value.$inspect(), 'gsub', [/\\u\{([0-9a-f]+)\}/], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s, code_point = nil;

          
            code_point = $$($nesting, 'Regexp').$last_match(1).$to_i(16);
            return self.$to_utf16(code_point);}, $$8.$$s = self, $$8.$$arity = 0, $$8));
          self.$push(self.$translate_escape_chars(sanitized_value));
          if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
            return nil
          } else {
            return nil
          };
        }, $StringNode_compile$7.$$arity = 0);
        return (Opal.def(self, '$to_utf16', $StringNode_to_utf16$9 = function $$to_utf16(code_point) {
          var $$10, self = this, ten_bits = nil, u = nil, lead_surrogate = nil, tail_surrogate = nil;

          
          ten_bits = 1023;
          u = $lambda(($$10 = function(code_unit){var self = $$10.$$s == null ? this : $$10.$$s;

          
            
            if (code_unit == null) {
              code_unit = nil;
            };
            return $rb_plus("\\u", code_unit.$to_s(16).$upcase());}, $$10.$$s = self, $$10.$$arity = 1, $$10));
          if ($truthy($rb_le(code_point, 65535))) {
            return u.$call(code_point)};
          code_point = $rb_minus(code_point, 65536);
          lead_surrogate = $rb_plus(55296, code_point['$>>'](10));
          tail_surrogate = $rb_plus(56320, code_point['$&'](ten_bits));
          return $rb_plus(u.$call(lead_surrogate), u.$call(tail_surrogate));
        }, $StringNode_to_utf16$9.$$arity = 1), nil) && 'to_utf16';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SymbolNode');

        var $nesting = [self].concat($parent_nesting), $SymbolNode_compile$11;

        
        self.$handle("sym");
        self.$children("value");
        return (Opal.def(self, '$compile', $SymbolNode_compile$11 = function $$compile() {
          var self = this;

          return self.$push(self.$value().$to_s().$inspect())
        }, $SymbolNode_compile$11.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RegexpNode');

        var $nesting = [self].concat($parent_nesting), $RegexpNode_initialize$12, $RegexpNode_compile$13, $RegexpNode_compile_dynamic_regexp$15, $RegexpNode_compile_static_regexp$17, $RegexpNode_extract_flags_and_value$18, $RegexpNode_raw_value$20;

        self.$$prototype.sexp = nil;
        
        self.$handle("regexp");
        self.$attr_accessor("value", "flags");
        Opal.const_set($nesting[0], 'SUPPORTED_FLAGS', /[gimuy]/.$freeze());
        
        Opal.def(self, '$initialize', $RegexpNode_initialize$12 = function $$initialize($a) {
          var $post_args, $iter = $RegexpNode_initialize$12.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $RegexpNode_initialize$12.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $RegexpNode_initialize$12, false, true), 'initialize', $zuper, $iter);
          return self.$extract_flags_and_value();
        }, $RegexpNode_initialize$12.$$arity = -1);
        
        Opal.def(self, '$compile', $RegexpNode_compile$13 = function $$compile() {
          var $$14, self = this;

          
          $send(self.$flags(), 'select!', [], ($$14 = function(flag){var self = $$14.$$s == null ? this : $$14.$$s;

          
            
            if (flag == null) {
              flag = nil;
            };
            if ($truthy($$($nesting, 'SUPPORTED_FLAGS')['$=~'](flag))) {
              return true
            } else {
              
              self.$compiler().$warning("" + "Skipping the '" + (flag) + "' Regexp flag as it's not widely supported by JavaScript vendors.");
              return false;
            };}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          if (self.$value().$type()['$==']("str")) {
            return self.$compile_static_regexp()
          } else {
            return self.$compile_dynamic_regexp()
          };
        }, $RegexpNode_compile$13.$$arity = 0);
        
        Opal.def(self, '$compile_dynamic_regexp', $RegexpNode_compile_dynamic_regexp$15 = function $$compile_dynamic_regexp() {
          var $$16, self = this;

          
          self.$push("Opal.regexp([");
          $send(self.$value().$children(), 'each_with_index', [], ($$16 = function(v, index){var self = $$16.$$s == null ? this : $$16.$$s;

          
            
            if (v == null) {
              v = nil;
            };
            
            if (index == null) {
              index = nil;
            };
            if ($truthy(index['$zero?']())) {
            } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(v));}, $$16.$$s = self, $$16.$$arity = 2, $$16));
          self.$push("]");
          if ($truthy(self.$flags()['$any?']())) {
            self.$push("" + ", '" + (self.$flags().$join()) + "'")};
          return self.$push(")");
        }, $RegexpNode_compile_dynamic_regexp$15.$$arity = 0);
        
        Opal.def(self, '$compile_static_regexp', $RegexpNode_compile_static_regexp$17 = function $$compile_static_regexp() {
          var self = this, value = nil, $case = nil, message = nil;

          
          value = self.$value().$children()['$[]'](0);
          return (function() {$case = value;
          if (""['$===']($case)) {return self.$push("/(?:)/")}
          else if (/\?<\w+\>/['$===']($case)) {
          message = "" + "named captures are not supported in javascript: " + (value.$inspect());
          return self.$push("" + "self.$raise(new SyntaxError('" + (message) + "'))");}
          else {return self.$push("" + ($$($nesting, 'Regexp').$new(value).$inspect()) + (self.$flags().$join()))}})();
        }, $RegexpNode_compile_static_regexp$17.$$arity = 0);
        
        Opal.def(self, '$extract_flags_and_value', $RegexpNode_extract_flags_and_value$18 = function $$extract_flags_and_value() {
          var $a, $b, $$19, self = this, values = nil, flags_sexp = nil, $writer = nil, $case = nil, parts = nil;

          
          $a = [].concat(Opal.to_a(self.$children())), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (values = $slice.call($a, 0, $b)), (flags_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
          
          $writer = [$send(flags_sexp.$children(), 'map', [], "to_s".$to_proc())];
          $send(self, 'flags=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [(function() {$case = values.$length();
          if ((0)['$===']($case)) {return self.$s("str", "")}
          else if ((1)['$===']($case)) {return values['$[]'](0)}
          else {return $send(self, 's', ["dstr"].concat(Opal.to_a(values)))}})()];
          $send(self, 'value=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$flags()['$include?']("x"))) {
            
            parts = $send(self.$value().$children(), 'map', [], ($$19 = function(part){var self = $$19.$$s == null ? this : $$19.$$s, $ret_or_1 = nil, trimmed_value = nil;

            
              
              if (part == null) {
                part = nil;
              };
              if ($truthy((function() {if ($truthy(($ret_or_1 = part['$is_a?']($$$($$$($$$('::', 'Opal'), 'AST'), 'Node'))))) {
                return part.$type()['$==']("str")
              } else {
                return $ret_or_1
              }; return nil; })())) {
                
                trimmed_value = part.$children()['$[]'](0).$gsub(/^\s*\#.*/, "").$gsub(/\s/, "");
                return self.$s("str", trimmed_value);
              } else {
                return part
              };}, $$19.$$s = self, $$19.$$arity = 1, $$19));
            
            $writer = [self.$value().$updated(nil, parts)];
            $send(self, 'value=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$flags().$delete("x");};
          if (self.$value().$type()['$==']("str")) {
            
            $writer = [self.$s("str", self.$value().$children()['$[]'](0).$gsub("\\A", "^").$gsub("\\z", "$"))];
            $send(self, 'value=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          } else {
            return nil
          };
        }, $RegexpNode_extract_flags_and_value$18.$$arity = 0);
        return (Opal.def(self, '$raw_value', $RegexpNode_raw_value$20 = function $$raw_value() {
          var self = this, $writer = nil;

          
          $writer = [self.sexp.$loc().$expression().$source()];
          $send(self, 'value=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $RegexpNode_raw_value$20.$$arity = 0), nil) && 'raw_value';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MatchCurrentLineNode');

        var $nesting = [self].concat($parent_nesting), $MatchCurrentLineNode_compile$21;

        
        self.$handle("match_current_line");
        self.$children("regexp");
        return (Opal.def(self, '$compile', $MatchCurrentLineNode_compile$21 = function $$compile() {
          var self = this, gvar_sexp = nil, send_node = nil;

          
          gvar_sexp = self.$s("gvar", "$_");
          send_node = self.$s("send", gvar_sexp, "=~", self.$regexp());
          return self.$push(self.$expr(send_node));
        }, $MatchCurrentLineNode_compile$21.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DynamicStringNode');

        var $nesting = [self].concat($parent_nesting), $DynamicStringNode_compile$22;

        
        self.$handle("dstr");
        return (Opal.def(self, '$compile', $DynamicStringNode_compile$22 = function $$compile() {
          var $$23, self = this;

          
          self.$push("\"\"");
          return $send(self.$children(), 'each', [], ($$23 = function(part){var self = $$23.$$s == null ? this : $$23.$$s;

          
            
            if (part == null) {
              part = nil;
            };
            self.$push(" + ");
            if (part.$type()['$==']("str")) {
              self.$push(part.$children()['$[]'](0).$inspect())
            } else {
              self.$push("(", self.$expr(part), ")")
            };
            if ($truthy(self['$recv?']())) {
              return self.$wrap("(", ")")
            } else {
              return nil
            };}, $$23.$$s = self, $$23.$$arity = 1, $$23));
        }, $DynamicStringNode_compile$22.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DynamicSymbolNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("dsym")
      })($nesting[0], $$($nesting, 'DynamicStringNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RangeNode');

        var $nesting = [self].concat($parent_nesting), $RangeNode_compile$24, $RangeNode_compile_inline$ques$25, $RangeNode_compile_inline$26, $RangeNode_compile_range_initialize$27;

        
        self.$children("start", "finish");
        Opal.const_set($nesting[0], 'SIMPLE_CHILDREN_TYPES', ["int", "float", "str", "sym"].$freeze());
        
        Opal.def(self, '$compile', $RangeNode_compile$24 = function $$compile() {
          var self = this;

          if ($truthy(self['$compile_inline?']())) {
            
            self.$helper("range");
            return self.$compile_inline();
          } else {
            return self.$compile_range_initialize()
          }
        }, $RangeNode_compile$24.$$arity = 0);
        
        Opal.def(self, '$compile_inline?', $RangeNode_compile_inline$ques$25 = function() {
          var self = this, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self.$start().$type()['$=='](self.$finish().$type())))) {
            return $$($nesting, 'SIMPLE_CHILDREN_TYPES')['$include?'](self.$start().$type())
          } else {
            return $ret_or_3
          }; return nil; })()))) {
            return $$($nesting, 'SIMPLE_CHILDREN_TYPES')['$include?'](self.$finish().$type())
          } else {
            return $ret_or_2
          }
        }, $RangeNode_compile_inline$ques$25.$$arity = 0);
        
        Opal.def(self, '$compile_inline', $RangeNode_compile_inline$26 = function $$compile_inline() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $RangeNode_compile_inline$26.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $RangeNode_compile_range_initialize$27 = function $$compile_range_initialize() {
          var self = this;

          return self.$raise($$($nesting, 'NotImplementedError'))
        }, $RangeNode_compile_range_initialize$27.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InclusiveRangeNode');

        var $nesting = [self].concat($parent_nesting), $InclusiveRangeNode_compile_inline$28, $InclusiveRangeNode_compile_range_initialize$29;

        
        self.$handle("irange");
        
        Opal.def(self, '$compile_inline', $InclusiveRangeNode_compile_inline$28 = function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", false)")
        }, $InclusiveRangeNode_compile_inline$28.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $InclusiveRangeNode_compile_range_initialize$29 = function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", false)")
        }, $InclusiveRangeNode_compile_range_initialize$29.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'RangeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ExclusiveRangeNode');

        var $nesting = [self].concat($parent_nesting), $ExclusiveRangeNode_compile_inline$30, $ExclusiveRangeNode_compile_range_initialize$31;

        
        self.$handle("erange");
        
        Opal.def(self, '$compile_inline', $ExclusiveRangeNode_compile_inline$30 = function $$compile_inline() {
          var self = this;

          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", true)")
        }, $ExclusiveRangeNode_compile_inline$30.$$arity = 0);
        return (Opal.def(self, '$compile_range_initialize', $ExclusiveRangeNode_compile_range_initialize$31 = function $$compile_range_initialize() {
          var self = this;

          return self.$push("Opal.Range.$new(", self.$expr(self.$start()), ",", self.$expr(self.$finish()), ", true)")
        }, $ExclusiveRangeNode_compile_range_initialize$31.$$arity = 0), nil) && 'compile_range_initialize';
      })($nesting[0], $$($nesting, 'RangeNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RationalNode');

        var $nesting = [self].concat($parent_nesting), $RationalNode_compile$32;

        
        self.$handle("rational");
        self.$children("value");
        return (Opal.def(self, '$compile', $RationalNode_compile$32 = function $$compile() {
          var self = this;

          return self.$push("" + "Opal.Rational.$new(" + (self.$value().$numerator()) + ", " + (self.$value().$denominator()) + ")")
        }, $RationalNode_compile$32.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ComplexNode');

        var $nesting = [self].concat($parent_nesting), $ComplexNode_compile$33;

        
        self.$handle("complex");
        self.$children("value");
        return (Opal.def(self, '$compile', $ComplexNode_compile$33 = function $$compile() {
          var self = this;

          return self.$push("" + "Opal.Complex.$new(" + (self.$value().$real()) + ", " + (self.$value().$imag()) + ")")
        }, $ComplexNode_compile$33.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
