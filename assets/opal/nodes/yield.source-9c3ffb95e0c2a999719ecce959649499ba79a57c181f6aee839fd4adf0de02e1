/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$find_yielding_scope', '$uses_block!', '$block_name', '$block_name=', '$-', '$yields_single_arg?', '$children', '$push', '$expr', '$first', '$wrap', '$s', '$uses_splat?', '$scope', '$def?', '$parent', '$!', '$==', '$size', '$any?', '$type', '$handle', '$compile_call']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BaseYieldNode');

        var $nesting = [self].concat($parent_nesting), $BaseYieldNode_compile_call$1, $BaseYieldNode_find_yielding_scope$2, $BaseYieldNode_yields_single_arg$ques$3, $BaseYieldNode_uses_splat$ques$4;

        
        
        Opal.def(self, '$compile_call', $BaseYieldNode_compile_call$1 = function $$compile_call() {
          var self = this, yielding_scope = nil, $ret_or_1 = nil, $writer = nil, block_name = nil;

          
          yielding_scope = self.$find_yielding_scope();
          yielding_scope['$uses_block!']();
          if ($truthy(($ret_or_1 = yielding_scope.$block_name()))) {
            $ret_or_1
          } else {
            
            $writer = ["$yield"];
            $send(yielding_scope, 'block_name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          block_name = yielding_scope.$block_name();
          if ($truthy(self['$yields_single_arg?'](self.$children()))) {
            
            self.$push(self.$expr(self.$children().$first()));
            return self.$wrap("" + "Opal.yield1(" + (block_name) + ", ", ")");
          } else {
            
            self.$push(self.$expr($send(self, 's', ["arglist"].concat(Opal.to_a(self.$children())))));
            if ($truthy(self['$uses_splat?'](self.$children()))) {
              return self.$wrap("" + "Opal.yieldX(" + (block_name) + ", ", ")")
            } else {
              return self.$wrap("" + "Opal.yieldX(" + (block_name) + ", [", "])")
            };
          };
        }, $BaseYieldNode_compile_call$1.$$arity = 0);
        
        Opal.def(self, '$find_yielding_scope', $BaseYieldNode_find_yielding_scope$2 = function $$find_yielding_scope() {
          var $a, self = this, working = nil, $ret_or_2 = nil;

          
          working = self.$scope();
          while ($truthy(working)) {
            
            if ($truthy((function() {if ($truthy(($ret_or_2 = working.$block_name()))) {
              return $ret_or_2
            } else {
              return working['$def?']()
            }; return nil; })())) {
              break;};
            working = working.$parent();
          };
          return working;
        }, $BaseYieldNode_find_yielding_scope$2.$$arity = 0);
        
        Opal.def(self, '$yields_single_arg?', $BaseYieldNode_yields_single_arg$ques$3 = function(children) {
          var self = this, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = self['$uses_splat?'](children)['$!']()))) {
            return children.$size()['$=='](1)
          } else {
            return $ret_or_3
          }
        }, $BaseYieldNode_yields_single_arg$ques$3.$$arity = 1);
        return (Opal.def(self, '$uses_splat?', $BaseYieldNode_uses_splat$ques$4 = function(children) {
          var $$5, self = this;

          return $send(children, 'any?', [], ($$5 = function(child){var self = $$5.$$s == null ? this : $$5.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            return child.$type()['$==']("splat");}, $$5.$$s = self, $$5.$$arity = 1, $$5))
        }, $BaseYieldNode_uses_splat$ques$4.$$arity = 1), nil) && 'uses_splat?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'YieldNode');

        var $nesting = [self].concat($parent_nesting), $YieldNode_compile$6;

        
        self.$handle("yield");
        return (Opal.def(self, '$compile', $YieldNode_compile$6 = function $$compile() {
          var self = this;

          return self.$compile_call()
        }, $YieldNode_compile$6.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseYieldNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ReturnableYieldNode');

        var $nesting = [self].concat($parent_nesting), $ReturnableYieldNode_compile$7;

        
        self.$handle("returnable_yield");
        return (Opal.def(self, '$compile', $ReturnableYieldNode_compile$7 = function $$compile() {
          var self = this;

          
          self.$compile_call();
          return self.$wrap("return ", ";");
        }, $ReturnableYieldNode_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'BaseYieldNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
