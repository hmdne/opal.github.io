/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$handle', '$attr_accessor', '$each', '$children', '$type', '$===', '$<<', '$[]', '$all?', '$keys', '$include?', '$has_kwsplat', '$compile_merge', '$simple_keys?', '$compile_hash2', '$compile_hash', '$helper', '$==', '$empty?', '$expr', '$s', '$each_with_index', '$push', '$wrap', '$times', '$size', '$inspect', '$to_s', '$values', '$[]=', '$-', '$join', '$value']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'HashNode');

        var $nesting = [self].concat($parent_nesting), $HashNode_initialize$1, $HashNode_simple_keys$ques$3, $HashNode_compile$5, $HashNode_compile_merge$6, $HashNode_compile_hash$9, $HashNode_compile_hash2$11;

        
        self.$handle("hash");
        self.$attr_accessor("has_kwsplat", "keys", "values");
        
        Opal.def(self, '$initialize', $HashNode_initialize$1 = function $$initialize($a) {
          var $post_args, $$2, $iter = $HashNode_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $HashNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $HashNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.has_kwsplat = false;
          self.keys = [];
          self.values = [];
          return $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s, $case = nil;
            if (self.keys == null) self.keys = nil;
            if (self.values == null) self.values = nil;

          
            
            if (child == null) {
              child = nil;
            };
            return (function() {$case = child.$type();
            if ("kwsplat"['$===']($case)) {return (self.has_kwsplat = true)}
            else if ("pair"['$===']($case)) {
            self.keys['$<<'](child.$children()['$[]'](0));
            return self.values['$<<'](child.$children()['$[]'](1));}
            else { return nil }})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $HashNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$simple_keys?', $HashNode_simple_keys$ques$3 = function() {
          var $$4, self = this;

          return $send(self.$keys(), 'all?', [], ($$4 = function(key){var self = $$4.$$s == null ? this : $$4.$$s;

          
            
            if (key == null) {
              key = nil;
            };
            return ["sym", "str"]['$include?'](key.$type());}, $$4.$$s = self, $$4.$$arity = 1, $$4))
        }, $HashNode_simple_keys$ques$3.$$arity = 0);
        
        Opal.def(self, '$compile', $HashNode_compile$5 = function $$compile() {
          var self = this;

          if ($truthy(self.$has_kwsplat())) {
            return self.$compile_merge()
          } else if ($truthy(self['$simple_keys?']())) {
            return self.$compile_hash2()
          } else {
            return self.$compile_hash()
          }
        }, $HashNode_compile$5.$$arity = 0);
        
        Opal.def(self, '$compile_merge', $HashNode_compile_merge$6 = function $$compile_merge() {
          var $a, $$7, $$8, self = this, result = nil, seq = nil;

          
          self.$helper("hash");
          $a = [[], []], (result = $a[0]), (seq = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$7 = function(child){var self = $$7.$$s == null ? this : $$7.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            if (child.$type()['$==']("kwsplat")) {
              
              if ($truthy(seq['$empty?']())) {
              } else {
                result['$<<'](self.$expr($send(self, 's', ["hash"].concat(Opal.to_a(seq)))))
              };
              result['$<<'](self.$expr(child));
              return (seq = []);
            } else {
              return seq['$<<'](child)
            };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
          if ($truthy(seq['$empty?']())) {
          } else {
            result['$<<'](self.$expr($send(self, 's', ["hash"].concat(Opal.to_a(seq)))))
          };
          return $send(result, 'each_with_index', [], ($$8 = function(fragment, idx){var self = $$8.$$s == null ? this : $$8.$$s;

          
            
            if (fragment == null) {
              fragment = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
              return self.$push(fragment)
            } else {
              return self.$push(".$merge(", fragment, ")")
            };}, $$8.$$s = self, $$8.$$arity = 2, $$8));
        }, $HashNode_compile_merge$6.$$arity = 0);
        
        Opal.def(self, '$compile_hash', $HashNode_compile_hash$9 = function $$compile_hash() {
          var $$10, self = this;

          
          self.$helper("hash");
          $send(self.$children(), 'each_with_index', [], ($$10 = function(pair, idx){var self = $$10.$$s == null ? this : $$10.$$s, $a, $b, key = nil, value = nil;

          
            
            if (pair == null) {
              pair = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            $b = pair.$children(), $a = Opal.to_ary($b), (key = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(key), ", ", self.$expr(value));}, $$10.$$s = self, $$10.$$arity = 2, $$10));
          return self.$wrap("$hash(", ")");
        }, $HashNode_compile_hash$9.$$arity = 0);
        return (Opal.def(self, '$compile_hash2', $HashNode_compile_hash2$11 = function $$compile_hash2() {
          var $a, $$12, $$13, self = this, hash_obj = nil, hash_keys = nil;

          
          $a = [$hash2([], {}), []], (hash_obj = $a[0]), (hash_keys = $a[1]), $a;
          self.$helper("hash2");
          $send(self.$keys().$size(), 'times', [], ($$12 = function(idx){var self = $$12.$$s == null ? this : $$12.$$s, key = nil, $writer = nil;

          
            
            if (idx == null) {
              idx = nil;
            };
            key = self.$keys()['$[]'](idx).$children()['$[]'](0).$to_s().$inspect();
            if ($truthy(hash_obj['$include?'](key))) {
            } else {
              hash_keys['$<<'](key)
            };
            
            $writer = [key, self.$expr(self.$values()['$[]'](idx))];
            $send(hash_obj, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$12.$$s = self, $$12.$$arity = 1, $$12));
          $send(hash_keys, 'each_with_index', [], ($$13 = function(key, idx){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (key == null) {
              key = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(", ")
            };
            self.$push("" + (key) + ": ");
            return self.$push(hash_obj['$[]'](key));}, $$13.$$s = self, $$13.$$arity = 2, $$13));
          return self.$wrap("" + "$hash2([" + (hash_keys.$join(", ")) + "], {", "})");
        }, $HashNode_compile_hash2$11.$$arity = 0), nil) && 'compile_hash2';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'KwSplatNode');

        var $nesting = [self].concat($parent_nesting), $KwSplatNode_compile$14;

        
        self.$handle("kwsplat");
        self.$children("value");
        return (Opal.def(self, '$compile', $KwSplatNode_compile$14 = function $$compile() {
          var self = this;

          return self.$push("Opal.to_hash(", self.$expr(self.$value()), ")")
        }, $KwSplatNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
