/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_case', '$compiler', '$compile_code', '$needs_closure?', '$wrap', '$condition', '$[]=', '$case_stmt', '$-', '$add_local', '$push', '$expr', '$each_with_index', '$case_parts', '$line', '$type', '$===', '$returns', '$==', '$stmt', '$!', '$stmt?', '$[]', '$when_checks', '$js_truthy', '$s', '$process', '$body_code', '$last']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CaseNode');

        var $nesting = [self].concat($parent_nesting), $CaseNode_compile$1, $CaseNode_compile_code$3, $CaseNode_needs_closure$ques$5, $CaseNode_case_parts$6, $CaseNode_case_stmt$7;

        
        self.$handle("case");
        self.$children("condition");
        
        Opal.def(self, '$compile', $CaseNode_compile$1 = function $$compile() {
          var $$2, self = this;

          return $send(self.$compiler(), 'in_case', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

          
            self.$compile_code();
            if ($truthy(self['$needs_closure?']())) {
              return self.$wrap("(function() {", "})()")
            } else {
              return nil
            };}, $$2.$$s = self, $$2.$$arity = 0, $$2))
        }, $CaseNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_code', $CaseNode_compile_code$3 = function $$compile_code() {
          var $$4, self = this, handled_else = nil, $writer = nil, $ret_or_1 = nil;

          
          handled_else = false;
          if ($truthy(self.$condition())) {
            
            
            $writer = ["cond", true];
            $send(self.$case_stmt(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_local("$case");
            self.$push("$case = ", self.$expr(self.$condition()), ";");};
          $send(self.$case_parts(), 'each_with_index', [], ($$4 = function(wen, idx){var self = $$4.$$s == null ? this : $$4.$$s, $case = nil;

          
            
            if (wen == null) {
              wen = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if ($truthy(wen)) {
            } else {
              return nil;
            };
            self.$line();
            return (function() {$case = wen.$type();
            if ("when"['$===']($case)) {
            if ($truthy(self['$needs_closure?']())) {
              wen = self.$compiler().$returns(wen)};
            if (idx['$=='](0)) {
            } else {
              self.$push("else ")
            };
            return self.$push(self.$stmt(wen));}
            else {
            handled_else = true;
            if ($truthy(self['$needs_closure?']())) {
              wen = self.$compiler().$returns(wen)};
            return self.$push("else {", self.$stmt(wen), "}");}})();}, $$4.$$s = self, $$4.$$arity = 2, $$4));
          if ($truthy((function() {if ($truthy(($ret_or_1 = self['$needs_closure?']()))) {
            return handled_else['$!']()
          } else {
            return $ret_or_1
          }; return nil; })())) {
            
            self.$line();
            return self.$push("else { return nil }");
          } else {
            return nil
          };
        }, $CaseNode_compile_code$3.$$arity = 0);
        
        Opal.def(self, '$needs_closure?', $CaseNode_needs_closure$ques$5 = function() {
          var self = this;

          return self['$stmt?']()['$!']()
        }, $CaseNode_needs_closure$ques$5.$$arity = 0);
        
        Opal.def(self, '$case_parts', $CaseNode_case_parts$6 = function $$case_parts() {
          var self = this;

          return self.$children()['$[]']($range(1, -1, false))
        }, $CaseNode_case_parts$6.$$arity = 0);
        return (Opal.def(self, '$case_stmt', $CaseNode_case_stmt$7 = function $$case_stmt() {
          var self = this;

          return self.$compiler().$case_stmt()
        }, $CaseNode_case_stmt$7.$$arity = 0), nil) && 'case_stmt';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhenNode');

        var $nesting = [self].concat($parent_nesting), $WhenNode_compile$8, $WhenNode_when_checks$10, $WhenNode_case_stmt$11, $WhenNode_body_code$12;

        self.$$prototype.level = nil;
        
        self.$handle("when");
        self.$children("whens", "body");
        
        Opal.def(self, '$compile', $WhenNode_compile$8 = function $$compile() {
          var $$9, self = this;

          
          self.$push("if (");
          $send(self.$when_checks(), 'each_with_index', [], ($$9 = function(check, idx){var self = $$9.$$s == null ? this : $$9.$$s, call = nil;

          
            
            if (check == null) {
              check = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(" || ")
            };
            if (check.$type()['$==']("splat")) {
              
              self.$push("(function($splt) { for (var i = 0, ii = $splt.length; i < ii; i++) {");
              if ($truthy(self.$case_stmt()['$[]']("cond"))) {
                self.$push("if ($splt[i]['$===']($case)) { return true; }")
              } else {
                self.$push("if (", self.$js_truthy(check), ")) { return true; }")
              };
              return self.$push("} return false; })(", self.$expr(check.$children()['$[]'](0)), ")");
            } else if ($truthy(self.$case_stmt()['$[]']("cond"))) {
              
              call = self.$s("send", check, "===", self.$s("arglist", self.$s("js_tmp", "$case")));
              return self.$push(self.$expr(call));
            } else {
              return self.$push(self.$js_truthy(check))
            };}, $$9.$$s = self, $$9.$$arity = 2, $$9));
          return self.$push(") {", self.$process(self.$body_code(), self.level), "}");
        }, $WhenNode_compile$8.$$arity = 0);
        
        Opal.def(self, '$when_checks', $WhenNode_when_checks$10 = function $$when_checks() {
          var self = this;

          return self.$children()['$[]']($range(0, -2, false))
        }, $WhenNode_when_checks$10.$$arity = 0);
        
        Opal.def(self, '$case_stmt', $WhenNode_case_stmt$11 = function $$case_stmt() {
          var self = this;

          return self.$compiler().$case_stmt()
        }, $WhenNode_case_stmt$11.$$arity = 0);
        return (Opal.def(self, '$body_code', $WhenNode_body_code$12 = function $$body_code() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = self.$children().$last()))) {
            return $ret_or_2
          } else {
            return self.$s("nil")
          }
        }, $WhenNode_body_code$12.$$arity = 0), nil) && 'body_code';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
