/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$attr_reader', '$attr_accessor', '$[]', '$meta', '$s', '$original_args', '$push', '$process', '$arity_check_node', '$uses_block?', '$scope', '$identity', '$block_name', '$add_temp', '$line', '$to_code', '$new']);
  
  self.$require("opal/nodes/scope");
  self.$require("opal/nodes/args/parameters");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NodeWithArgs');

        var $nesting = [self].concat($parent_nesting), $NodeWithArgs_initialize$1, $NodeWithArgs_arity_check_node$2, $NodeWithArgs_compile_arity_check$3, $NodeWithArgs_compile_block_arg$4, $NodeWithArgs_parameters_code$5;

        self.$$prototype.sexp = nil;
        
        self.$attr_reader("used_kwargs");
        self.$attr_accessor("arity");
        self.$attr_reader("original_args");
        
        Opal.def(self, '$initialize', $NodeWithArgs_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $NodeWithArgs_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $NodeWithArgs_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $NodeWithArgs_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.original_args = self.sexp.$meta()['$[]']("original_args");
          self.used_kwargs = [];
          return (self.arity = 0);
        }, $NodeWithArgs_initialize$1.$$arity = -1);
        
        Opal.def(self, '$arity_check_node', $NodeWithArgs_arity_check_node$2 = function $$arity_check_node() {
          var self = this;

          return self.$s("arity_check", self.$original_args())
        }, $NodeWithArgs_arity_check_node$2.$$arity = 0);
        
        Opal.def(self, '$compile_arity_check', $NodeWithArgs_compile_arity_check$3 = function $$compile_arity_check() {
          var self = this;

          return self.$push(self.$process(self.$arity_check_node()))
        }, $NodeWithArgs_compile_arity_check$3.$$arity = 0);
        
        Opal.def(self, '$compile_block_arg', $NodeWithArgs_compile_block_arg$4 = function $$compile_block_arg() {
          var self = this, scope_name = nil, yielder = nil, $ret_or_1 = nil;

          if ($truthy(self.$scope()['$uses_block?']())) {
            
            scope_name = self.$scope().$identity();
            yielder = (function() {if ($truthy(($ret_or_1 = self.$scope().$block_name()))) {
              return $ret_or_1
            } else {
              return "$yield"
            }; return nil; })();
            self.$add_temp("" + "$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + "if ($iter) " + (scope_name) + ".$$p = null;");
          } else {
            return nil
          }
        }, $NodeWithArgs_compile_block_arg$4.$$arity = 0);
        return (Opal.def(self, '$parameters_code', $NodeWithArgs_parameters_code$5 = function $$parameters_code() {
          var self = this;

          return $$$($$($nesting, 'Args'), 'Parameters').$new(self.$original_args()).$to_code()
        }, $NodeWithArgs_parameters_code$5.$$arity = 0), nil) && 'parameters_code';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
