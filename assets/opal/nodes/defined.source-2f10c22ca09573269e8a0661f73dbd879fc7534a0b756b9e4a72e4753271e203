/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $slice = Opal.slice, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$type', '$value', '$===', '$push', '$inspect', '$to_s', '$==', '$size', '$[]', '$compile_defined_send', '$wrap', '$compile_defined_ivar', '$compile_defined_super', '$compile_defined_yield', '$compile_defined_xstr', '$compile_defined_const', '$compile_defined_cvar', '$compile_defined_gvar', '$compile_defined_back_ref', '$compile_defined_nth_ref', '$compile_defined_array', '$respond_to?', '$__send__', '$new_temp', '$scope', '$expr', '$wrap_with_try_catch', '$mid_to_jsid', '$compile_defined', '$compile_send_recv_doesnt_raise', '$each', '$s', '$uses_block!', '$block_name', '$find_parent_def', '$nil?', '$class_variable_owner', '$helper', '$include?', '$each_with_index']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefinedNode');

        var $nesting = [self].concat($parent_nesting), $DefinedNode_compile$1, $DefinedNode_compile_defined$2, $DefinedNode_wrap_with_try_catch$3, $DefinedNode_compile_send_recv_doesnt_raise$4, $DefinedNode_compile_defined_send$5, $DefinedNode_compile_defined_ivar$7, $DefinedNode_compile_defined_super$8, $DefinedNode_compile_defined_yield$9, $DefinedNode_compile_defined_xstr$10, $DefinedNode_compile_defined_const$11, $DefinedNode_compile_defined_cvar$12, $DefinedNode_compile_defined_gvar$13, $DefinedNode_compile_defined_back_ref$14, $DefinedNode_compile_defined_nth_ref$15, $DefinedNode_compile_defined_array$16;

        
        self.$handle("defined?");
        self.$children("value");
        
        Opal.def(self, '$compile', $DefinedNode_compile$1 = function $$compile() {
          var self = this, $case = nil, $ret_or_1 = nil;

          return (function() {$case = self.$value().$type();
          if ("self"['$===']($case) || "nil"['$===']($case) || "false"['$===']($case) || "true"['$===']($case)) {return self.$push(self.$value().$type().$to_s().$inspect())}
          else if ("lvasgn"['$===']($case) || "ivasgn"['$===']($case) || "gvasgn"['$===']($case) || "cvasgn"['$===']($case) || "casgn"['$===']($case) || "op_asgn"['$===']($case) || "or_asgn"['$===']($case) || "and_asgn"['$===']($case)) {return self.$push("'assignment'")}
          else if ("lvar"['$===']($case)) {return self.$push("'local-variable'")}
          else if ("begin"['$===']($case)) {if ($truthy((function() {if ($truthy(($ret_or_1 = self.$value().$children().$size()['$=='](1)))) {
            return self.$value().$children()['$[]'](0).$type()['$==']("masgn")
          } else {
            return $ret_or_1
          }; return nil; })())) {
            return self.$push("'assignment'")
          } else {
            return self.$push("'expression'")
          }}
          else if ("send"['$===']($case)) {
          self.$compile_defined_send(self.$value());
          return self.$wrap("(", " ? 'method' : nil)");}
          else if ("ivar"['$===']($case)) {
          self.$compile_defined_ivar(self.$value());
          return self.$wrap("(", " ? 'instance-variable' : nil)");}
          else if ("zsuper"['$===']($case) || "super"['$===']($case)) {return self.$compile_defined_super()}
          else if ("yield"['$===']($case)) {
          self.$compile_defined_yield();
          return self.$wrap("(", " ? 'yield' : nil)");}
          else if ("xstr"['$===']($case)) {return self.$compile_defined_xstr(self.$value())}
          else if ("const"['$===']($case)) {
          self.$compile_defined_const(self.$value());
          return self.$wrap("(", " ? 'constant' : nil)");}
          else if ("cvar"['$===']($case)) {
          self.$compile_defined_cvar(self.$value());
          return self.$wrap("(", " ? 'class variable' : nil)");}
          else if ("gvar"['$===']($case)) {
          self.$compile_defined_gvar(self.$value());
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("back_ref"['$===']($case)) {
          self.$compile_defined_back_ref();
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("nth_ref"['$===']($case)) {
          self.$compile_defined_nth_ref();
          return self.$wrap("(", " ? 'global-variable' : nil)");}
          else if ("array"['$===']($case)) {
          self.$compile_defined_array(self.$value());
          return self.$wrap("(", " ? 'expression' : nil)");}
          else {return self.$push("'expression'")}})()
        }, $DefinedNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$compile_defined', $DefinedNode_compile_defined$2 = function $$compile_defined(node) {
          var self = this, type = nil, node_tmp = nil;

          
          type = node.$type();
          if ($truthy(self['$respond_to?']("" + "compile_defined_" + (type)))) {
            return self.$__send__("" + "compile_defined_" + (type), node)
          } else {
            
            node_tmp = self.$scope().$new_temp();
            self.$push("" + "(" + (node_tmp) + " = ", self.$expr(node), ")");
            return node_tmp;
          };
        }, $DefinedNode_compile_defined$2.$$arity = 1);
        
        Opal.def(self, '$wrap_with_try_catch', $DefinedNode_wrap_with_try_catch$3 = function $$wrap_with_try_catch(code) {
          var self = this, returning_tmp = nil;

          
          returning_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (returning_tmp) + " = (function() { try {");
          self.$push("" + "  return " + (code) + ";");
          self.$push("} catch ($err) {");
          self.$push("  if (Opal.rescue($err, [Opal.Exception])) {");
          self.$push("    try {");
          self.$push("      return false;");
          self.$push("    } finally { Opal.pop_exception() }");
          self.$push("  } else { throw $err; }");
          self.$push("}})())");
          return returning_tmp;
        }, $DefinedNode_wrap_with_try_catch$3.$$arity = 1);
        
        Opal.def(self, '$compile_send_recv_doesnt_raise', $DefinedNode_compile_send_recv_doesnt_raise$4 = function $$compile_send_recv_doesnt_raise(recv_code) {
          var self = this;

          return self.$wrap_with_try_catch(recv_code)
        }, $DefinedNode_compile_send_recv_doesnt_raise$4.$$arity = 1);
        
        Opal.def(self, '$compile_defined_send', $DefinedNode_compile_defined_send$5 = function $$compile_defined_send(node) {
          var $a, $$6, self = this, recv = nil, method_name = nil, args = nil, mid = nil, recv_code = nil, recv_tmp = nil, recv_value_tmp = nil, meth_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (recv = ($a[0] == null ? nil : $a[0])), (method_name = ($a[1] == null ? nil : $a[1])), (args = $slice.call($a, 2)), $a;
          mid = self.$mid_to_jsid(method_name.$to_s());
          if ($truthy(recv)) {
            
            recv_code = self.$compile_defined(recv);
            self.$push(" && ");
            if (recv.$type()['$==']("send")) {
              
              recv_code = self.$compile_send_recv_doesnt_raise(recv_code);
              self.$push(" && ");};
            recv_tmp = self.$scope().$new_temp();
            self.$push("" + "(" + (recv_tmp) + " = ", recv_code, "" + ", " + (recv_tmp) + ") && ");
          } else {
            recv_tmp = "self"
          };
          recv_value_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (recv_value_tmp) + " = " + (recv_tmp) + ") && ");
          meth_tmp = self.$scope().$new_temp();
          self.$push("" + "(((" + (meth_tmp) + " = " + (recv_value_tmp) + (mid) + ") && !" + (meth_tmp) + ".$$stub)");
          self.$push("" + " || " + (recv_value_tmp) + "['$respond_to_missing?']('" + (method_name) + "'))");
          $send(args, 'each', [], ($$6 = function(arg){var self = $$6.$$s == null ? this : $$6.$$s, $case = nil;

          
            
            if (arg == null) {
              arg = nil;
            };
            return (function() {$case = arg.$type();
            if ("block_pass"['$===']($case)) {return nil}
            else {
            self.$push(" && ");
            return self.$compile_defined(arg);}})();}, $$6.$$s = self, $$6.$$arity = 1, $$6));
          self.$wrap("(", ")");
          return "" + (meth_tmp) + "()";
        }, $DefinedNode_compile_defined_send$5.$$arity = 1);
        
        Opal.def(self, '$compile_defined_ivar', $DefinedNode_compile_defined_ivar$7 = function $$compile_defined_ivar(node) {
          var self = this, name = nil, tmp = nil;

          
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (tmp) + " = self['" + (name) + "'], " + (tmp) + " != null && " + (tmp) + " !== nil)");
          return tmp;
        }, $DefinedNode_compile_defined_ivar$7.$$arity = 1);
        
        Opal.def(self, '$compile_defined_super', $DefinedNode_compile_defined_super$8 = function $$compile_defined_super() {
          var self = this;

          return self.$push(self.$expr(self.$s("defined_super")))
        }, $DefinedNode_compile_defined_super$8.$$arity = 0);
        
        Opal.def(self, '$compile_defined_yield', $DefinedNode_compile_defined_yield$9 = function $$compile_defined_yield() {
          var self = this, block_name = nil, $ret_or_2 = nil;

          
          self.$scope()['$uses_block!']();
          block_name = (function() {if ($truthy(($ret_or_2 = self.$scope().$block_name()))) {
            return $ret_or_2
          } else {
            return self.$scope().$find_parent_def().$block_name()
          }; return nil; })();
          self.$push("" + "(" + (block_name) + " != null && " + (block_name) + " !== nil)");
          return block_name;
        }, $DefinedNode_compile_defined_yield$9.$$arity = 0);
        
        Opal.def(self, '$compile_defined_xstr', $DefinedNode_compile_defined_xstr$10 = function $$compile_defined_xstr(node) {
          var self = this;

          return self.$push("(typeof(", self.$expr(node), ") !== \"undefined\")")
        }, $DefinedNode_compile_defined_xstr$10.$$arity = 1);
        
        Opal.def(self, '$compile_defined_const', $DefinedNode_compile_defined_const$11 = function $$compile_defined_const(node) {
          var $a, self = this, const_scope = nil, const_name = nil, const_tmp = nil, const_scope_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (const_scope = ($a[0] == null ? nil : $a[0])), (const_name = ($a[1] == null ? nil : $a[1])), $a;
          const_tmp = self.$scope().$new_temp();
          if ($truthy(const_scope['$nil?']())) {
            self.$push("" + "(" + (const_tmp) + " = $$($nesting, '" + (const_name) + "', 'skip_raise'))")
          } else if (const_scope['$=='](self.$s("cbase"))) {
            self.$push("" + "(" + (const_tmp) + " = $$$('::', '" + (const_name) + "', 'skip_raise'))")
          } else {
            
            const_scope_tmp = self.$compile_defined(const_scope);
            self.$push("" + " && (" + (const_tmp) + " = $$$(" + (const_scope_tmp) + ", '" + (const_name) + "', 'skip_raise'))");
          };
          return const_tmp;
        }, $DefinedNode_compile_defined_const$11.$$arity = 1);
        
        Opal.def(self, '$compile_defined_cvar', $DefinedNode_compile_defined_cvar$12 = function $$compile_defined_cvar(node) {
          var $a, self = this, cvar_name = nil, _ = nil, cvar_tmp = nil;

          
          $a = [].concat(Opal.to_a(node)), (cvar_name = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $a;
          cvar_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (cvar_tmp) + " = " + (self.$class_variable_owner()) + ".$$cvars['" + (cvar_name) + "'], " + (cvar_tmp) + " != null)");
          return cvar_tmp;
        }, $DefinedNode_compile_defined_cvar$12.$$arity = 1);
        
        Opal.def(self, '$compile_defined_gvar', $DefinedNode_compile_defined_gvar$13 = function $$compile_defined_gvar(node) {
          var self = this, name = nil, gvar_temp = nil;

          
          self.$helper("gvars");
          name = node.$children()['$[]'](0).$to_s()['$[]']($range(1, -1, false));
          gvar_temp = self.$scope().$new_temp();
          if ($truthy(["~", "!"]['$include?'](name))) {
            self.$push("" + "(" + (gvar_temp) + " = ", self.$expr(node), " || true)")
          } else {
            self.$push("" + "(" + (gvar_temp) + " = $gvars[" + (name.$inspect()) + "], " + (gvar_temp) + " != null)")
          };
          return gvar_temp;
        }, $DefinedNode_compile_defined_gvar$13.$$arity = 1);
        
        Opal.def(self, '$compile_defined_back_ref', $DefinedNode_compile_defined_back_ref$14 = function $$compile_defined_back_ref() {
          var self = this, back_ref_temp = nil;

          
          self.$helper("gvars");
          back_ref_temp = self.$scope().$new_temp();
          self.$push("" + "(" + (back_ref_temp) + " = $gvars['~'], " + (back_ref_temp) + " != null && " + (back_ref_temp) + " !== nil)");
          return back_ref_temp;
        }, $DefinedNode_compile_defined_back_ref$14.$$arity = 0);
        
        Opal.def(self, '$compile_defined_nth_ref', $DefinedNode_compile_defined_nth_ref$15 = function $$compile_defined_nth_ref() {
          var self = this, nth_ref_tmp = nil;

          
          self.$helper("gvars");
          nth_ref_tmp = self.$scope().$new_temp();
          self.$push("" + "(" + (nth_ref_tmp) + " = $gvars['~'], " + (nth_ref_tmp) + " != null && " + (nth_ref_tmp) + " != nil)");
          return nth_ref_tmp;
        }, $DefinedNode_compile_defined_nth_ref$15.$$arity = 0);
        return (Opal.def(self, '$compile_defined_array', $DefinedNode_compile_defined_array$16 = function $$compile_defined_array(node) {
          var $$17, self = this;

          return $send(node.$children(), 'each_with_index', [], ($$17 = function(child, idx){var self = $$17.$$s == null ? this : $$17.$$s;

          
            
            if (child == null) {
              child = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            if (idx['$=='](0)) {
            } else {
              self.$push(" && ")
            };
            return self.$compile_defined(child);}, $$17.$$s = self, $$17.$$arity = 2, $$17))
        }, $DefinedNode_compile_defined_array$16.$$arity = 1), nil) && 'compile_defined_array';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
