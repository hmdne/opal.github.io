/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_scope', '$add_temp', '$stmt', '$returns', '$compiler', '$body', '$line', '$to_vars', '$scope', '$recv', '$object']);
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SingletonClassNode');

        var $nesting = [self].concat($parent_nesting), $SingletonClassNode_compile$1;

        
        self.$handle("sclass");
        self.$children("object", "body");
        return (Opal.def(self, '$compile', $SingletonClassNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$push("(function(self, $parent_nesting) {");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, body_stmt = nil;

          
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_stmt = self.$stmt(self.$compiler().$returns(self.$body()));
            self.$line(self.$scope().$to_vars());
            return self.$line(body_stmt);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(Opal.get_singleton_class(", self.$recv(self.$object()), "), $nesting)");
        }, $SingletonClassNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
