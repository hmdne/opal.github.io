/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$children', '$map', '$public_send', '$type', '$join', '$compact']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'Parameters');

          var $nesting = [self].concat($parent_nesting), $Parameters_initialize$1, $Parameters_to_code$2, $Parameters_on_arg$4, $Parameters_on_mlhs$5, $Parameters_on_optarg$6, $Parameters_on_restarg$7, $Parameters_on_kwarg$8, $Parameters_on_kwoptarg$9, $Parameters_on_kwrestarg$10, $Parameters_on_blockarg$11, $Parameters_on_shadowarg$12;

          self.$$prototype.args = nil;
          
          
          Opal.def(self, '$initialize', $Parameters_initialize$1 = function $$initialize(args) {
            var self = this;

            return (self.args = args.$children())
          }, $Parameters_initialize$1.$$arity = 1);
          
          Opal.def(self, '$to_code', $Parameters_to_code$2 = function $$to_code() {
            var $$3, self = this, stringified_parameters = nil;

            
            stringified_parameters = $send(self.args, 'map', [], ($$3 = function(arg){var self = $$3.$$s == null ? this : $$3.$$s;

            
              
              if (arg == null) {
                arg = nil;
              };
              return $send(self, 'public_send', ["" + "on_" + (arg.$type())].concat(Opal.to_a(arg)));}, $$3.$$s = self, $$3.$$arity = 1, $$3));
            return "" + "[" + (stringified_parameters.$compact().$join(", ")) + "]";
          }, $Parameters_to_code$2.$$arity = 0);
          
          Opal.def(self, '$on_arg', $Parameters_on_arg$4 = function $$on_arg(arg_name) {
            var self = this;

            return "" + "['req', '" + (arg_name) + "']"
          }, $Parameters_on_arg$4.$$arity = 1);
          
          Opal.def(self, '$on_mlhs', $Parameters_on_mlhs$5 = function $$on_mlhs($a) {
            var $post_args, self = this;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            ;
            return "['req']";
          }, $Parameters_on_mlhs$5.$$arity = -1);
          
          Opal.def(self, '$on_optarg', $Parameters_on_optarg$6 = function $$on_optarg(arg_name, _default_value) {
            var self = this;

            return "" + "['opt', '" + (arg_name) + "']"
          }, $Parameters_on_optarg$6.$$arity = 2);
          
          Opal.def(self, '$on_restarg', $Parameters_on_restarg$7 = function $$on_restarg(arg_name) {
            var self = this;

            
            
            if (arg_name == null) {
              arg_name = nil;
            };
            if ($truthy(arg_name)) {
              return "" + "['rest', '" + (arg_name) + "']"
            } else {
              return "['rest']"
            };
          }, $Parameters_on_restarg$7.$$arity = -1);
          
          Opal.def(self, '$on_kwarg', $Parameters_on_kwarg$8 = function $$on_kwarg(arg_name) {
            var self = this;

            return "" + "['keyreq', '" + (arg_name) + "']"
          }, $Parameters_on_kwarg$8.$$arity = 1);
          
          Opal.def(self, '$on_kwoptarg', $Parameters_on_kwoptarg$9 = function $$on_kwoptarg(arg_name, _default_value) {
            var self = this;

            return "" + "['key', '" + (arg_name) + "']"
          }, $Parameters_on_kwoptarg$9.$$arity = 2);
          
          Opal.def(self, '$on_kwrestarg', $Parameters_on_kwrestarg$10 = function $$on_kwrestarg(arg_name) {
            var self = this;

            
            
            if (arg_name == null) {
              arg_name = nil;
            };
            if ($truthy(arg_name)) {
              return "" + "['keyrest', '" + (arg_name) + "']"
            } else {
              return "['keyrest']"
            };
          }, $Parameters_on_kwrestarg$10.$$arity = -1);
          
          Opal.def(self, '$on_blockarg', $Parameters_on_blockarg$11 = function $$on_blockarg(arg_name) {
            var self = this;

            return "" + "['block', '" + (arg_name) + "']"
          }, $Parameters_on_blockarg$11.$$arity = 1);
          return (Opal.def(self, '$on_shadowarg', $Parameters_on_shadowarg$12 = function $$on_shadowarg(_arg_name) {
            var self = this;

            return nil
          }, $Parameters_on_shadowarg$12.$$arity = 1), nil) && 'on_shadowarg';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
