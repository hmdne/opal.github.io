/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$new', '$args_node', '$args', '$optargs', '$restarg', '$postargs', '$kwargs', '$kwoptargs', '$kwrestarg', '$arity', '$arity=', '$scope', '$-', '$arity_check?', '$compiler', '$empty?', '$arity_checks', '$helper', '$inspect', '$to_s', '$mid', '$line', '$push', '$join', '$compact', '$size', '$all_args', '$!', '$-@', '$<', '$+', '$>', '$<<', '$any?', '$has_only_optional_kwargs?', '$negative_arity', '$positive_arity', '$select', '$include?', '$type', '$has_required_kwargs?', '$all?', '$==', '$def?', '$class_scope?', '$top?', '$parent', '$class?', '$name', '$module?', '$identity']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/rewriters/arguments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $ArityCheckNode_initialize$1, $ArityCheckNode_compile$2, $ArityCheckNode_kwargs$3, $ArityCheckNode_all_args$4, $ArityCheckNode_arity_checks$5, $ArityCheckNode_arity$6, $ArityCheckNode_negative_arity$7, $ArityCheckNode_positive_arity$9, $ArityCheckNode_has_only_optional_kwargs$ques$10, $ArityCheckNode_has_required_kwargs$ques$12;

        self.$$prototype.kwargs = self.$$prototype.kwoptargs = self.$$prototype.kwrestarg = self.$$prototype.all_args = self.$$prototype.args = self.$$prototype.optargs = self.$$prototype.restarg = self.$$prototype.postargs = self.$$prototype.arity_checks = nil;
        
        self.$handle("arity_check");
        self.$children("args_node");
        
        Opal.def(self, '$initialize', $ArityCheckNode_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $ArityCheckNode_initialize$1.$$p, $yield = $iter || nil, self = this, arguments$ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ArityCheckNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ArityCheckNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          arguments$ = $$$($$($nesting, 'Rewriters'), 'Arguments').$new(self.$args_node().$children());
          self.args = arguments$.$args();
          self.optargs = arguments$.$optargs();
          self.restarg = arguments$.$restarg();
          self.postargs = arguments$.$postargs();
          self.kwargs = arguments$.$kwargs();
          self.kwoptargs = arguments$.$kwoptargs();
          return (self.kwrestarg = arguments$.$kwrestarg());
        }, $ArityCheckNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$compile', $ArityCheckNode_compile$2 = function $$compile() {
          var self = this, $writer = nil, meth = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$compiler()['$arity_check?']())) {
          } else {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            self.$helper("ac");
            meth = self.$scope().$mid().$to_s().$inspect();
            self.$line("var $arity = arguments.length;");
            return self.$push("" + " if (" + (self.$arity_checks().$join(" || ")) + ") { $ac($arity, " + (self.$arity()) + ", this, " + (meth) + "); }");
          };
        }, $ArityCheckNode_compile$2.$$arity = 0);
        
        Opal.def(self, '$kwargs', $ArityCheckNode_kwargs$3 = function $$kwargs() {
          var self = this;

          return [].concat(Opal.to_a(self.kwargs)).concat(Opal.to_a(self.kwoptargs)).concat([self.kwrestarg]).$compact()
        }, $ArityCheckNode_kwargs$3.$$arity = 0);
        
        Opal.def(self, '$all_args', $ArityCheckNode_all_args$4 = function $$all_args() {
          var self = this, $ret_or_1 = nil;

          return (self.all_args = (function() {if ($truthy(($ret_or_1 = self.all_args))) {
            return $ret_or_1
          } else {
            return [].concat(Opal.to_a(self.args)).concat(Opal.to_a(self.optargs)).concat([self.restarg]).concat(Opal.to_a(self.postargs)).concat(Opal.to_a(self.$kwargs())).$compact()
          }; return nil; })())
        }, $ArityCheckNode_all_args$4.$$arity = 0);
        
        Opal.def(self, '$arity_checks', $ArityCheckNode_arity_checks$5 = function $$arity_checks() {
          var $a, self = this, arity = nil, $ret_or_2 = nil, $ret_or_3 = nil, min_arity = nil, max_arity = nil;

          
          if ($truthy((($a = self['arity_checks'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.arity_checks};
          arity = self.$all_args().$size();
          arity = $rb_minus(arity, self.optargs.$size());
          if ($truthy(self.restarg)) {
            arity = $rb_minus(arity, 1)};
          arity = $rb_minus(arity, self.$kwargs().$size());
          if ($truthy((function() {if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self.optargs['$empty?']()['$!']()))) {
            return $ret_or_3
          } else {
            return self.$kwargs()['$empty?']()['$!']()
          }; return nil; })()))) {
            return $ret_or_2
          } else {
            return self.restarg
          }; return nil; })())) {
            arity = $rb_minus(arity['$-@'](), 1)};
          self.arity_checks = [];
          if ($truthy($rb_lt(arity, 0))) {
            
            min_arity = $rb_plus(arity, 1)['$-@']();
            max_arity = self.$all_args().$size();
            if ($truthy($rb_gt(min_arity, 0))) {
              self.arity_checks['$<<']("" + "$arity < " + (min_arity))};
            if ($truthy(self.restarg)) {
            } else {
              self.arity_checks['$<<']("" + "$arity > " + (max_arity))
            };
          } else {
            self.arity_checks['$<<']("" + "$arity !== " + (arity))
          };
          return self.arity_checks;
        }, $ArityCheckNode_arity_checks$5.$$arity = 0);
        
        Opal.def(self, '$arity', $ArityCheckNode_arity$6 = function $$arity() {
          var self = this, $ret_or_4 = nil, $ret_or_5 = nil;

          if ($truthy((function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = self.restarg))) {
            return $ret_or_5
          } else {
            return self.optargs['$any?']()
          }; return nil; })()))) {
            return $ret_or_4
          } else {
            return self['$has_only_optional_kwargs?']()
          }; return nil; })())) {
            return self.$negative_arity()
          } else {
            return self.$positive_arity()
          }
        }, $ArityCheckNode_arity$6.$$arity = 0);
        
        Opal.def(self, '$negative_arity', $ArityCheckNode_negative_arity$7 = function $$negative_arity() {
          var $$8, self = this, required_plain_args = nil, result = nil;

          
          required_plain_args = $send(self.$all_args(), 'select', [], ($$8 = function(arg){var self = $$8.$$s == null ? this : $$8.$$s;

          
            
            if (arg == null) {
              arg = nil;
            };
            return ["arg", "mlhs"]['$include?'](arg.$type());}, $$8.$$s = self, $$8.$$arity = 1, $$8));
          result = required_plain_args.$size();
          if ($truthy(self['$has_required_kwargs?']())) {
            result = $rb_plus(result, 1)};
          result = $rb_minus(result['$-@'](), 1);
          return result;
        }, $ArityCheckNode_negative_arity$7.$$arity = 0);
        
        Opal.def(self, '$positive_arity', $ArityCheckNode_positive_arity$9 = function $$positive_arity() {
          var self = this, result = nil;

          
          result = self.$all_args().$size();
          result = $rb_minus(result, self.$kwargs().$size());
          if ($truthy(self.$kwargs()['$any?']())) {
            result = $rb_plus(result, 1)};
          return result;
        }, $ArityCheckNode_positive_arity$9.$$arity = 0);
        
        Opal.def(self, '$has_only_optional_kwargs?', $ArityCheckNode_has_only_optional_kwargs$ques$10 = function() {
          var $$11, self = this, $ret_or_6 = nil;

          if ($truthy(($ret_or_6 = self.$kwargs()['$any?']()))) {
            return $send(self.$kwargs(), 'all?', [], ($$11 = function(arg){var self = $$11.$$s == null ? this : $$11.$$s;

            
              
              if (arg == null) {
                arg = nil;
              };
              return ["kwoptarg", "kwrestarg"]['$include?'](arg.$type());}, $$11.$$s = self, $$11.$$arity = 1, $$11))
          } else {
            return $ret_or_6
          }
        }, $ArityCheckNode_has_only_optional_kwargs$ques$10.$$arity = 0);
        return (Opal.def(self, '$has_required_kwargs?', $ArityCheckNode_has_required_kwargs$ques$12 = function() {
          var $$13, self = this;

          return $send(self.$kwargs(), 'any?', [], ($$13 = function(arg){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (arg == null) {
              arg = nil;
            };
            return arg.$type()['$==']("kwarg");}, $$13.$$s = self, $$13.$$arity = 1, $$13))
        }, $ArityCheckNode_has_required_kwargs$ques$12.$$arity = 0), nil) && 'has_required_kwargs?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IterArityCheckNode');

        var $nesting = [self].concat($parent_nesting), $IterArityCheckNode_compile$14;

        
        self.$handle("iter_arity_check");
        return (Opal.def(self, '$compile', $IterArityCheckNode_compile$14 = function $$compile() {
          var $a, self = this, $writer = nil, parent_scope = nil, $ret_or_7 = nil, $ret_or_8 = nil, context = nil, identity = nil;

          
          
          $writer = [self.$arity()];
          $send(self.$scope(), 'arity=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.$compiler()['$arity_check?']())) {
          } else {
            return nil
          };
          if ($truthy(self.$arity_checks()['$empty?']())) {
            return nil
          } else {
            
            parent_scope = self.$scope();
            while (!($truthy((function() {if ($truthy(($ret_or_7 = (function() {if ($truthy(($ret_or_8 = parent_scope['$def?']()))) {
              return $ret_or_8
            } else {
              return parent_scope['$class_scope?']()
            }; return nil; })()))) {
              return $ret_or_7
            } else {
              return parent_scope['$top?']()
            }; return nil; })()))) {
              parent_scope = parent_scope.$parent()
            };
            context = (function() {if ($truthy(parent_scope['$top?']())) {
              return "'<main>'"
            } else if ($truthy(parent_scope['$def?']())) {
              return "" + "'" + (parent_scope.$mid()) + "'"
            } else if ($truthy(parent_scope['$class?']())) {
              return "" + "'<class:" + (parent_scope.$name()) + ">'"
            } else if ($truthy(parent_scope['$module?']())) {
              return "" + "'<module:" + (parent_scope.$name()) + ">'"
            } else {
              return nil
            }; return nil; })();
            identity = self.$scope().$identity();
            self.$line("" + "if (" + (identity) + ".$$is_lambda || " + (identity) + ".$$define_meth) {");
            self.$line("  var $arity = arguments.length;");
            self.$line("" + "  if (" + (self.$arity_checks().$join(" || ")) + ") { Opal.block_ac($arity, " + (self.$arity()) + ", " + (context) + "); }");
            return self.$line("}");
          };
        }, $IterArityCheckNode_compile$14.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'ArityCheckNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
