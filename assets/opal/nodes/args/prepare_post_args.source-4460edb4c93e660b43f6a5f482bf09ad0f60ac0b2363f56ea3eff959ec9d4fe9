/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$line', '$offset']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'PreparePostArgs');

          var $nesting = [self].concat($parent_nesting), $PreparePostArgs_compile$1;

          
          self.$handle("prepare_post_args");
          self.$children("offset");
          return (Opal.def(self, '$compile', $PreparePostArgs_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp("$post_args");
            return self.$line("" + "$post_args = Opal.slice.call(arguments, " + (self.$offset()) + ", arguments.length)");
          }, $PreparePostArgs_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
