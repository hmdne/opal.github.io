/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$add_temp', '$name', '$line', '$args_to_keep', '$==', '$[]', '$default_value', '$expr']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'Args');

        var $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          var self = $klass($base, $super, 'ExtractPostOptarg');

          var $nesting = [self].concat($parent_nesting), $ExtractPostOptarg_compile$1;

          
          self.$handle("extract_post_optarg");
          self.$children("name", "default_value", "args_to_keep");
          return (Opal.def(self, '$compile', $ExtractPostOptarg_compile$1 = function $$compile() {
            var self = this;

            
            self.$add_temp(self.$name());
            self.$line("" + "if ($post_args.length > " + (self.$args_to_keep()) + ") {");
            self.$line("" + "  " + (self.$name()) + " = $post_args[0];");
            self.$line("  $post_args.splice(0, 1);");
            self.$line("}");
            if (self.$default_value().$children()['$[]'](1)['$==']("undefined")) {
              return nil};
            self.$line("" + "if (" + (self.$name()) + " == null) {");
            self.$line("" + "  " + (self.$name()) + " = ", self.$expr(self.$default_value()), ";");
            return self.$line("}");
          }, $ExtractPostOptarg_compile$1.$$arity = 0), nil) && 'compile';
        })($nesting[0], $$($nesting, 'Base'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
