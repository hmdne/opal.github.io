/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$with_temp', '$js_truthy', '$test', '$in_while', '$compiler', '$wrap_in_closure?', '$[]=', '$while_loop', '$-', '$stmt', '$body', '$uses_redo?', '$push', '$while_open', '$while_close', '$line', '$wrap', '$[]', '$expr?', '$recv?']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhileNode');

        var $nesting = [self].concat($parent_nesting), $WhileNode_compile$1, $WhileNode_while_open$4, $WhileNode_while_close$5, $WhileNode_uses_redo$ques$6, $WhileNode_wrap_in_closure$ques$7;

        
        self.$handle("while");
        self.$children("test", "body");
        
        Opal.def(self, '$compile', $WhileNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          $send(self, 'with_temp', [], ($$2 = function(redo_var){var self = $$2.$$s == null ? this : $$2.$$s, $$3, test_code = nil;

          
            
            if (redo_var == null) {
              redo_var = nil;
            };
            test_code = self.$js_truthy(self.$test());
            $send(self.$compiler(), 'in_while', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil, body_code = nil;

            
              if ($truthy(self['$wrap_in_closure?']())) {
                
                $writer = ["closure", true];
                $send(self.$while_loop(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              
              $writer = ["redo_var", redo_var];
              $send(self.$while_loop(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              body_code = self.$stmt(self.$body());
              if ($truthy(self['$uses_redo?']())) {
                
                self.$push("" + (redo_var) + " = false; " + (self.$while_open()) + (redo_var) + " || ");
                self.$push(test_code);
                self.$push(self.$while_close());
              } else {
                self.$push(self.$while_open(), test_code, self.$while_close())
              };
              if ($truthy(self['$uses_redo?']())) {
                self.$push("" + (redo_var) + " = false;")};
              return self.$line(body_code);}, $$3.$$s = self, $$3.$$arity = 0, $$3));
            return self.$line("}");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$wrap("(function() {", "; return nil; })()")
          } else {
            return nil
          };
        }, $WhileNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$while_open', $WhileNode_while_open$4 = function $$while_open() {
          var self = this;

          return "while ("
        }, $WhileNode_while_open$4.$$arity = 0);
        
        Opal.def(self, '$while_close', $WhileNode_while_close$5 = function $$while_close() {
          var self = this;

          return ") {"
        }, $WhileNode_while_close$5.$$arity = 0);
        
        Opal.def(self, '$uses_redo?', $WhileNode_uses_redo$ques$6 = function() {
          var self = this;

          return self.$while_loop()['$[]']("use_redo")
        }, $WhileNode_uses_redo$ques$6.$$arity = 0);
        return (Opal.def(self, '$wrap_in_closure?', $WhileNode_wrap_in_closure$ques$7 = function() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self['$expr?']()))) {
            return $ret_or_1
          } else {
            return self['$recv?']()
          }
        }, $WhileNode_wrap_in_closure$ques$7.$$arity = 0), nil) && 'wrap_in_closure?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'WhilePostNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("while_post")
      })($nesting[0], $$($nesting, 'WhileNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UntilNode');

        var $nesting = [self].concat($parent_nesting), $UntilNode_while_open$8, $UntilNode_while_close$9;

        
        self.$handle("until");
        
        Opal.def(self, '$while_open', $UntilNode_while_open$8 = function $$while_open() {
          var self = this;

          return "while (!("
        }, $UntilNode_while_open$8.$$arity = 0);
        return (Opal.def(self, '$while_close', $UntilNode_while_close$9 = function $$while_close() {
          var self = this;

          return ")) {"
        }, $UntilNode_while_close$9.$$arity = 0), nil) && 'while_close';
      })($nesting[0], $$($nesting, 'WhileNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UntilPostNode');

        var $nesting = [self].concat($parent_nesting);

        return self.$handle("until_post")
      })($nesting[0], $$($nesting, 'UntilNode'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
