/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$helper', '$conditional_send', '$recv', '$receiver_sexp', '$push', '$compile_method_name', '$compile_arguments', '$compile_block_pass']);
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CSendNode');

        var $nesting = [self].concat($parent_nesting), $CSendNode_default_compile$1;

        
        self.$handle("csend");
        return (Opal.def(self, '$default_compile', $CSendNode_default_compile$1 = function $$default_compile() {
          var $$2, self = this;

          
          self.$helper("send");
          return $send(self, 'conditional_send', [self.$recv(self.$receiver_sexp())], ($$2 = function(receiver_temp){var self = $$2.$$s == null ? this : $$2.$$s;

          
            
            if (receiver_temp == null) {
              receiver_temp = nil;
            };
            self.$push("$send(", receiver_temp);
            self.$compile_method_name();
            self.$compile_arguments();
            self.$compile_block_pass();
            return self.$push(")");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        }, $CSendNode_default_compile$1.$$arity = 0), nil) && 'default_compile';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
