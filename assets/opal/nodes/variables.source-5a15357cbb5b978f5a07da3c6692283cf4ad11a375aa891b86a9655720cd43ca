/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $send2 = Opal.send2;

  Opal.add_stubs(['$require', '$handle', '$children', '$irb?', '$compiler', '$top?', '$scope', '$using_irb?', '$push', '$to_s', '$var_name', '$with_temp', '$property', '$wrap', '$add_local', '$expr', '$value', '$recv?', '$expr?', '$[]', '$name', '$add_ivar', '$helper', '$add_gvar', '$===', '$handle_global_match', '$handle_post_match', '$handle_pre_match', '$raise', '$index', '$class_variable_owner']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalVariableNode');

        var $nesting = [self].concat($parent_nesting), $LocalVariableNode_using_irb$ques$1, $LocalVariableNode_compile$2;

        
        self.$handle("lvar");
        self.$children("var_name");
        
        Opal.def(self, '$using_irb?', $LocalVariableNode_using_irb$ques$1 = function() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$compiler()['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_1
          }
        }, $LocalVariableNode_using_irb$ques$1.$$arity = 0);
        return (Opal.def(self, '$compile', $LocalVariableNode_compile$2 = function $$compile() {
          var $$3, self = this;

          
          if ($truthy(self['$using_irb?']())) {
          } else {
            return self.$push(self.$var_name().$to_s())
          };
          return $send(self, 'with_temp', [], ($$3 = function(tmp){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            self.$push(self.$property(self.$var_name().$to_s()));
            return self.$wrap("" + "((" + (tmp) + " = Opal.irb_vars", "" + ") == null ? nil : " + (tmp) + ")");}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        }, $LocalVariableNode_compile$2.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalAssignNode');

        var $nesting = [self].concat($parent_nesting), $LocalAssignNode_using_irb$ques$4, $LocalAssignNode_compile$5;

        
        self.$handle("lvasgn");
        self.$children("var_name", "value");
        
        Opal.def(self, '$using_irb?', $LocalAssignNode_using_irb$ques$4 = function() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = self.$compiler()['$irb?']()))) {
            return self.$scope()['$top?']()
          } else {
            return $ret_or_2
          }
        }, $LocalAssignNode_using_irb$ques$4.$$arity = 0);
        return (Opal.def(self, '$compile', $LocalAssignNode_compile$5 = function $$compile() {
          var self = this, $ret_or_3 = nil, $ret_or_4 = nil;

          
          if ($truthy(self['$using_irb?']())) {
            self.$push("" + "Opal.irb_vars" + (self.$property(self.$var_name().$to_s())) + " = ")
          } else {
            
            self.$add_local(self.$var_name().$to_s());
            self.$push("" + (self.$var_name()) + " = ");
          };
          self.$push(self.$expr(self.$value()));
          if ($truthy((function() {if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = self['$recv?']()))) {
            return $ret_or_4
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return self.$value()
          } else {
            return $ret_or_3
          }; return nil; })())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $LocalAssignNode_compile$5.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LocalDeclareNode');

        var $nesting = [self].concat($parent_nesting), $LocalDeclareNode_compile$6;

        
        self.$handle("lvdeclare");
        self.$children("var_name");
        return (Opal.def(self, '$compile', $LocalDeclareNode_compile$6 = function $$compile() {
          var self = this;

          
          self.$add_local(self.$var_name().$to_s());
          return nil;
        }, $LocalDeclareNode_compile$6.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InstanceVariableNode');

        var $nesting = [self].concat($parent_nesting), $InstanceVariableNode_var_name$7, $InstanceVariableNode_compile$8;

        
        self.$handle("ivar");
        self.$children("name");
        
        Opal.def(self, '$var_name', $InstanceVariableNode_var_name$7 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $InstanceVariableNode_var_name$7.$$arity = 0);
        return (Opal.def(self, '$compile', $InstanceVariableNode_compile$8 = function $$compile() {
          var self = this, name = nil;

          
          name = self.$property(self.$var_name());
          self.$add_ivar(name);
          return self.$push("" + "self" + (name));
        }, $InstanceVariableNode_compile$8.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'InstanceAssignNode');

        var $nesting = [self].concat($parent_nesting), $InstanceAssignNode_var_name$9, $InstanceAssignNode_compile$10;

        
        self.$handle("ivasgn");
        self.$children("name", "value");
        
        Opal.def(self, '$var_name', $InstanceAssignNode_var_name$9 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $InstanceAssignNode_var_name$9.$$arity = 0);
        return (Opal.def(self, '$compile', $InstanceAssignNode_compile$10 = function $$compile() {
          var self = this, name = nil, $ret_or_5 = nil, $ret_or_6 = nil;

          
          name = self.$property(self.$var_name());
          self.$push("" + "self" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ($truthy((function() {if ($truthy(($ret_or_5 = (function() {if ($truthy(($ret_or_6 = self['$recv?']()))) {
            return $ret_or_6
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return self.$value()
          } else {
            return $ret_or_5
          }; return nil; })())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $InstanceAssignNode_compile$10.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GlobalVariableNode');

        var $nesting = [self].concat($parent_nesting), $GlobalVariableNode_var_name$11, $GlobalVariableNode_compile$12;

        
        self.$handle("gvar");
        self.$children("name");
        
        Opal.def(self, '$var_name', $GlobalVariableNode_var_name$11 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $GlobalVariableNode_var_name$11.$$arity = 0);
        return (Opal.def(self, '$compile', $GlobalVariableNode_compile$12 = function $$compile() {
          var self = this, name = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$add_gvar(name);
          return self.$push("" + "$gvars" + (name));
        }, $GlobalVariableNode_compile$12.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BackRefNode');

        var $nesting = [self].concat($parent_nesting), $BackRefNode_compile$13, $BackRefNode_handle_global_match$14, $BackRefNode_handle_pre_match$16, $BackRefNode_handle_post_match$18;

        
        self.$handle("back_ref");
        
        Opal.def(self, '$compile', $BackRefNode_compile$13 = function $$compile() {
          var $iter = $BackRefNode_compile$13.$$p, $yield = $iter || nil, self = this, $case = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $BackRefNode_compile$13.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.$helper("gvars");
          return (function() {$case = self.$var_name();
          if ("&"['$===']($case)) {return self.$handle_global_match()}
          else if ("'"['$===']($case)) {return self.$handle_post_match()}
          else if ("`"['$===']($case)) {return self.$handle_pre_match()}
          else if ("+"['$===']($case)) {return $send2(self, Opal.find_super_dispatcher(self, 'compile', $BackRefNode_compile$13, false, true), 'compile', $zuper, $iter)}
          else {return self.$raise($$($nesting, 'NotImplementedError'))}})();
        }, $BackRefNode_compile$13.$$arity = 0);
        
        Opal.def(self, '$handle_global_match', $BackRefNode_handle_global_match$14 = function $$handle_global_match() {
          var $$15, self = this;

          return $send(self, 'with_temp', [], ($$15 = function(tmp){var self = $$15.$$s == null ? this : $$15.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](0))");}, $$15.$$s = self, $$15.$$arity = 1, $$15))
        }, $BackRefNode_handle_global_match$14.$$arity = 0);
        
        Opal.def(self, '$handle_pre_match', $BackRefNode_handle_pre_match$16 = function $$handle_pre_match() {
          var $$17, self = this;

          return $send(self, 'with_temp', [], ($$17 = function(tmp){var self = $$17.$$s == null ? this : $$17.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$pre_match())");}, $$17.$$s = self, $$17.$$arity = 1, $$17))
        }, $BackRefNode_handle_pre_match$16.$$arity = 0);
        return (Opal.def(self, '$handle_post_match', $BackRefNode_handle_post_match$18 = function $$handle_post_match() {
          var $$19, self = this;

          return $send(self, 'with_temp', [], ($$19 = function(tmp){var self = $$19.$$s == null ? this : $$19.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$post_match())");}, $$19.$$s = self, $$19.$$arity = 1, $$19))
        }, $BackRefNode_handle_post_match$18.$$arity = 0), nil) && 'handle_post_match';
      })($nesting[0], $$($nesting, 'GlobalVariableNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'GlobalAssignNode');

        var $nesting = [self].concat($parent_nesting), $GlobalAssignNode_var_name$20, $GlobalAssignNode_compile$21;

        
        self.$handle("gvasgn");
        self.$children("name", "value");
        
        Opal.def(self, '$var_name', $GlobalAssignNode_var_name$20 = function $$var_name() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false))
        }, $GlobalAssignNode_var_name$20.$$arity = 0);
        return (Opal.def(self, '$compile', $GlobalAssignNode_compile$21 = function $$compile() {
          var self = this, name = nil, $ret_or_7 = nil, $ret_or_8 = nil;

          
          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$push("" + "$gvars" + (name) + " = ");
          self.$push(self.$expr(self.$value()));
          if ($truthy((function() {if ($truthy(($ret_or_7 = (function() {if ($truthy(($ret_or_8 = self['$recv?']()))) {
            return $ret_or_8
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return self.$value()
          } else {
            return $ret_or_7
          }; return nil; })())) {
            return self.$wrap("(", ")")
          } else {
            return nil
          };
        }, $GlobalAssignNode_compile$21.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NthrefNode');

        var $nesting = [self].concat($parent_nesting), $NthrefNode_compile$22;

        
        self.$handle("nth_ref");
        self.$children("index");
        return (Opal.def(self, '$compile', $NthrefNode_compile$22 = function $$compile() {
          var $$23, self = this;

          
          self.$helper("gvars");
          return $send(self, 'with_temp', [], ($$23 = function(tmp){var self = $$23.$$s == null ? this : $$23.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](" + (self.$index()) + "))");}, $$23.$$s = self, $$23.$$arity = 1, $$23));
        }, $NthrefNode_compile$22.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassVariableNode');

        var $nesting = [self].concat($parent_nesting), $ClassVariableNode_compile$24;

        
        self.$handle("cvar");
        self.$children("name");
        return (Opal.def(self, '$compile', $ClassVariableNode_compile$24 = function $$compile() {
          var $$25, self = this;

          return $send(self, 'with_temp', [], ($$25 = function(tmp){var self = $$25.$$s == null ? this : $$25.$$s;

          
            
            if (tmp == null) {
              tmp = nil;
            };
            return self.$push("" + "((" + (tmp) + " = " + (self.$class_variable_owner()) + ".$$cvars['" + (self.$name()) + "']) == null ? nil : " + (tmp) + ")");}, $$25.$$s = self, $$25.$$arity = 1, $$25))
        }, $ClassVariableNode_compile$24.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassVarAssignNode');

        var $nesting = [self].concat($parent_nesting), $ClassVarAssignNode_compile$26;

        
        self.$handle("cvasgn");
        self.$children("name", "value");
        return (Opal.def(self, '$compile', $ClassVarAssignNode_compile$26 = function $$compile() {
          var self = this;

          return self.$push("" + "(Opal.class_variable_set(" + (self.$class_variable_owner()) + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), "))")
        }, $ClassVarAssignNode_compile$26.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
