/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$-', '$add_temp', '$stmt', '$body', '$s', '$empty_line', '$to_vars', '$cid', '$nil?', '$expr']);
  
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ModuleNode');

        var $nesting = [self].concat($parent_nesting), $ModuleNode_compile$1, $ModuleNode_name_and_base$3;

        
        self.$handle("module");
        self.$children("cid", "body");
        
        Opal.def(self, '$compile', $ModuleNode_compile$1 = function $$compile() {
          var $a, $b, $$2, self = this, name = nil, base = nil;

          
          $b = self.$name_and_base(), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("module");
          self.$push("(function($base, $parent_nesting) {");
          self.$line("" + "  var self = $module($base, '" + (name) + "');");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil, body_code = nil, $ret_or_1 = nil;

          
            
            $writer = [name];
            $send(self.$scope(), 'name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_code = self.$stmt((function() {if ($truthy(($ret_or_1 = self.$body()))) {
              return $ret_or_1
            } else {
              return self.$s("nil")
            }; return nil; })());
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(", base, ", $nesting)");
        }, $ModuleNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$name_and_base', $ModuleNode_name_and_base$3 = function $$name_and_base() {
          var $a, $b, self = this, base = nil, name = nil;

          
          $b = self.$cid().$children(), $a = Opal.to_ary($b), (base = ($a[0] == null ? nil : $a[0])), (name = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(base['$nil?']())) {
            return [name, "$nesting[0]"]
          } else {
            return [name, self.$expr(base)]
          };
        }, $ModuleNode_name_and_base$3.$$arity = 0), nil) && 'name_and_base';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
