/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$each', '$[]=', '$handlers', '$-', '$each_with_index', '$define_method', '$[]', '$children', '$attr_reader', '$type', '$compile', '$raise', '$is_a?', '$fragment', '$<<', '$reverse_each', '$unshift', '$push', '$new', '$scope', '$error', '$s', '$==', '$process', '$expr', '$add_scope_local', '$to_sym', '$add_scope_ivar', '$add_scope_gvar', '$add_scope_temp', '$helper', '$with_temp', '$to_proc', '$in_while?', '$instance_variable_get', '$has_rescue_else?', '$in_ensure', '$in_ensure?', '$!', '$class_scope?', '$sclass?', '$+', '$parent', '$class_variable_owner_nesting_level', '$comments', '$compiler', '$loc']);
  
  self.$require("opal/nodes/helpers");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Base');

        var $nesting = [self].concat($parent_nesting), $Base_handlers$1, $Base_handle$2, $Base_children$4, $Base_truthy_optimize$ques$7, $Base_initialize$8, $Base_children$9, $Base_compile_to_fragments$10, $Base_compile$11, $Base_push$12, $Base_unshift$14, $Base_wrap$16, $Base_fragment$17, $Base_error$18, $Base_scope$19, $Base_s$20, $Base_expr$ques$21, $Base_recv$ques$22, $Base_stmt$ques$23, $Base_process$24, $Base_expr$25, $Base_recv$26, $Base_stmt$27, $Base_expr_or_nil$28, $Base_add_local$29, $Base_add_ivar$30, $Base_add_gvar$31, $Base_add_temp$32, $Base_helper$33, $Base_with_temp$34, $Base_in_while$ques$35, $Base_while_loop$36, $Base_has_rescue_else$ques$37, $Base_in_ensure$38, $Base_in_ensure$ques$39, $Base_class_variable_owner_nesting_level$40, $Base_class_variable_owner$41, $Base_comments$42;

        self.$$prototype.sexp = self.$$prototype.fragments = self.$$prototype.compiler = self.$$prototype.level = nil;
        
        self.$include($$($nesting, 'Helpers'));
        Opal.defs(self, '$handlers', $Base_handlers$1 = function $$handlers() {
          var self = this, $ret_or_1 = nil;
          if (self.handlers == null) self.handlers = nil;

          return (self.handlers = (function() {if ($truthy(($ret_or_1 = self.handlers))) {
            return $ret_or_1
          } else {
            return $hash2([], {})
          }; return nil; })())
        }, $Base_handlers$1.$$arity = 0);
        Opal.defs(self, '$handle', $Base_handle$2 = function $$handle($a) {
          var $post_args, types, $$3, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          types = $post_args;;
          return $send(types, 'each', [], ($$3 = function(type){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;

          
            
            if (type == null) {
              type = nil;
            };
            $writer = [type, self];
            $send($$($nesting, 'Base').$handlers(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        }, $Base_handle$2.$$arity = -1);
        Opal.defs(self, '$children', $Base_children$4 = function $$children($a) {
          var $post_args, names, $$5, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          names = $post_args;;
          return $send(names, 'each_with_index', [], ($$5 = function(name, idx){var self = $$5.$$s == null ? this : $$5.$$s, $$6;

          
            
            if (name == null) {
              name = nil;
            };
            
            if (idx == null) {
              idx = nil;
            };
            return $send(self, 'define_method', [name], ($$6 = function(){var self = $$6.$$s == null ? this : $$6.$$s;
              if (self.sexp == null) self.sexp = nil;

            return self.sexp.$children()['$[]'](idx)}, $$6.$$s = self, $$6.$$arity = 0, $$6));}, $$5.$$s = self, $$5.$$arity = 2, $$5));
        }, $Base_children$4.$$arity = -1);
        Opal.defs(self, '$truthy_optimize?', $Base_truthy_optimize$ques$7 = function() {
          var self = this;

          return false
        }, $Base_truthy_optimize$ques$7.$$arity = 0);
        self.$attr_reader("compiler", "type");
        
        Opal.def(self, '$initialize', $Base_initialize$8 = function $$initialize(sexp, level, compiler) {
          var self = this;

          
          self.sexp = sexp;
          self.type = sexp.$type();
          self.level = level;
          return (self.compiler = compiler);
        }, $Base_initialize$8.$$arity = 3);
        
        Opal.def(self, '$children', $Base_children$9 = function $$children() {
          var self = this;

          return self.sexp.$children()
        }, $Base_children$9.$$arity = 0);
        
        Opal.def(self, '$compile_to_fragments', $Base_compile_to_fragments$10 = function $$compile_to_fragments() {
          var $a, self = this;

          
          if ($truthy((($a = self['fragments'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.fragments};
          self.fragments = [];
          self.$compile();
          return self.fragments;
        }, $Base_compile_to_fragments$10.$$arity = 0);
        
        Opal.def(self, '$compile', $Base_compile$11 = function $$compile() {
          var self = this;

          return self.$raise("Not Implemented")
        }, $Base_compile$11.$$arity = 0);
        
        Opal.def(self, '$push', $Base_push$12 = function $$push($a) {
          var $post_args, strs, $$13, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          return $send(strs, 'each', [], ($$13 = function(str){var self = $$13.$$s == null ? this : $$13.$$s;
            if (self.fragments == null) self.fragments = nil;

          
            
            if (str == null) {
              str = nil;
            };
            if ($truthy(str['$is_a?']($$($nesting, 'String')))) {
              str = self.$fragment(str)};
            return self.fragments['$<<'](str);}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        }, $Base_push$12.$$arity = -1);
        
        Opal.def(self, '$unshift', $Base_unshift$14 = function $$unshift($a) {
          var $post_args, strs, $$15, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          strs = $post_args;;
          return $send(strs, 'reverse_each', [], ($$15 = function(str){var self = $$15.$$s == null ? this : $$15.$$s;
            if (self.fragments == null) self.fragments = nil;

          
            
            if (str == null) {
              str = nil;
            };
            if ($truthy(str['$is_a?']($$($nesting, 'String')))) {
              str = self.$fragment(str)};
            return self.fragments.$unshift(str);}, $$15.$$s = self, $$15.$$arity = 1, $$15));
        }, $Base_unshift$14.$$arity = -1);
        
        Opal.def(self, '$wrap', $Base_wrap$16 = function $$wrap(pre, post) {
          var self = this;

          
          self.$unshift(pre);
          return self.$push(post);
        }, $Base_wrap$16.$$arity = 2);
        
        Opal.def(self, '$fragment', $Base_fragment$17 = function $$fragment(str) {
          var self = this;

          return $$$($$($nesting, 'Opal'), 'Fragment').$new(str, self.$scope(), self.sexp)
        }, $Base_fragment$17.$$arity = 1);
        
        Opal.def(self, '$error', $Base_error$18 = function $$error(msg) {
          var self = this;

          return self.compiler.$error(msg)
        }, $Base_error$18.$$arity = 1);
        
        Opal.def(self, '$scope', $Base_scope$19 = function $$scope() {
          var self = this;

          return self.compiler.$scope()
        }, $Base_scope$19.$$arity = 0);
        
        Opal.def(self, '$s', $Base_s$20 = function $$s($a) {
          var $post_args, args, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $send(self.compiler, 's', Opal.to_a(args));
        }, $Base_s$20.$$arity = -1);
        
        Opal.def(self, '$expr?', $Base_expr$ques$21 = function() {
          var self = this;

          return self.level['$==']("expr")
        }, $Base_expr$ques$21.$$arity = 0);
        
        Opal.def(self, '$recv?', $Base_recv$ques$22 = function() {
          var self = this;

          return self.level['$==']("recv")
        }, $Base_recv$ques$22.$$arity = 0);
        
        Opal.def(self, '$stmt?', $Base_stmt$ques$23 = function() {
          var self = this;

          return self.level['$==']("stmt")
        }, $Base_stmt$ques$23.$$arity = 0);
        
        Opal.def(self, '$process', $Base_process$24 = function $$process(sexp, level) {
          var self = this;

          
          
          if (level == null) {
            level = "expr";
          };
          return self.compiler.$process(sexp, level);
        }, $Base_process$24.$$arity = -2);
        
        Opal.def(self, '$expr', $Base_expr$25 = function $$expr(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "expr")
        }, $Base_expr$25.$$arity = 1);
        
        Opal.def(self, '$recv', $Base_recv$26 = function $$recv(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "recv")
        }, $Base_recv$26.$$arity = 1);
        
        Opal.def(self, '$stmt', $Base_stmt$27 = function $$stmt(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "stmt")
        }, $Base_stmt$27.$$arity = 1);
        
        Opal.def(self, '$expr_or_nil', $Base_expr_or_nil$28 = function $$expr_or_nil(sexp) {
          var self = this;

          if ($truthy(sexp)) {
            return self.$expr(sexp)
          } else {
            return "nil"
          }
        }, $Base_expr_or_nil$28.$$arity = 1);
        
        Opal.def(self, '$add_local', $Base_add_local$29 = function $$add_local(name) {
          var self = this;

          return self.$scope().$add_scope_local(name.$to_sym())
        }, $Base_add_local$29.$$arity = 1);
        
        Opal.def(self, '$add_ivar', $Base_add_ivar$30 = function $$add_ivar(name) {
          var self = this;

          return self.$scope().$add_scope_ivar(name)
        }, $Base_add_ivar$30.$$arity = 1);
        
        Opal.def(self, '$add_gvar', $Base_add_gvar$31 = function $$add_gvar(name) {
          var self = this;

          return self.$scope().$add_scope_gvar(name)
        }, $Base_add_gvar$31.$$arity = 1);
        
        Opal.def(self, '$add_temp', $Base_add_temp$32 = function $$add_temp(temp) {
          var self = this;

          return self.$scope().$add_scope_temp(temp)
        }, $Base_add_temp$32.$$arity = 1);
        
        Opal.def(self, '$helper', $Base_helper$33 = function $$helper(name) {
          var self = this;

          return self.compiler.$helper(name)
        }, $Base_helper$33.$$arity = 1);
        
        Opal.def(self, '$with_temp', $Base_with_temp$34 = function $$with_temp() {
          var $iter = $Base_with_temp$34.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_with_temp$34.$$p = null;
          
          
          if ($iter) $Base_with_temp$34.$$p = null;;
          return $send(self.compiler, 'with_temp', [], block.$to_proc());
        }, $Base_with_temp$34.$$arity = 0);
        
        Opal.def(self, '$in_while?', $Base_in_while$ques$35 = function() {
          var self = this;

          return self.compiler['$in_while?']()
        }, $Base_in_while$ques$35.$$arity = 0);
        
        Opal.def(self, '$while_loop', $Base_while_loop$36 = function $$while_loop() {
          var self = this;

          return self.compiler.$instance_variable_get("@while_loop")
        }, $Base_while_loop$36.$$arity = 0);
        
        Opal.def(self, '$has_rescue_else?', $Base_has_rescue_else$ques$37 = function() {
          var self = this;

          return self.$scope()['$has_rescue_else?']()
        }, $Base_has_rescue_else$ques$37.$$arity = 0);
        
        Opal.def(self, '$in_ensure', $Base_in_ensure$38 = function $$in_ensure() {
          var $iter = $Base_in_ensure$38.$$p, block = $iter || nil, self = this;

          if ($iter) $Base_in_ensure$38.$$p = null;
          
          
          if ($iter) $Base_in_ensure$38.$$p = null;;
          return $send(self.$scope(), 'in_ensure', [], block.$to_proc());
        }, $Base_in_ensure$38.$$arity = 0);
        
        Opal.def(self, '$in_ensure?', $Base_in_ensure$ques$39 = function() {
          var self = this;

          return self.$scope()['$in_ensure?']()
        }, $Base_in_ensure$ques$39.$$arity = 0);
        
        Opal.def(self, '$class_variable_owner_nesting_level', $Base_class_variable_owner_nesting_level$40 = function $$class_variable_owner_nesting_level() {
          var $a, self = this, cvar_scope = nil, nesting_level = nil, $ret_or_2 = nil;

          
          cvar_scope = self.$scope();
          nesting_level = 0;
          while ($truthy((function() {if ($truthy(($ret_or_2 = cvar_scope))) {
            return cvar_scope['$class_scope?']()['$!']()
          } else {
            return $ret_or_2
          }; return nil; })())) {
            
            if ($truthy(cvar_scope['$sclass?']())) {
              nesting_level = $rb_plus(nesting_level, 1)};
            cvar_scope = cvar_scope.$parent();
          };
          return nesting_level;
        }, $Base_class_variable_owner_nesting_level$40.$$arity = 0);
        
        Opal.def(self, '$class_variable_owner', $Base_class_variable_owner$41 = function $$class_variable_owner() {
          var self = this;

          if ($truthy(self.$scope())) {
            return "" + "$nesting[" + (self.$class_variable_owner_nesting_level()) + "]"
          } else {
            return "Opal.Object"
          }
        }, $Base_class_variable_owner$41.$$arity = 0);
        return (Opal.def(self, '$comments', $Base_comments$42 = function $$comments() {
          var self = this;

          return self.$compiler().$comments()['$[]'](self.sexp.$loc())
        }, $Base_comments$42.$$arity = 0), nil) && 'comments';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
