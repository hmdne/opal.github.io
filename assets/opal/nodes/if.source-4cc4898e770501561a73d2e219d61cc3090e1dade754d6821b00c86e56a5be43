/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$children', '$truthy', '$falsy', '$push', '$js_truthy', '$test', '$indent', '$line', '$stmt', '$==', '$type', '$needs_wrapper?', '$wrap', '$returns', '$compiler', '$true_body', '$s', '$false_body', '$expr?', '$recv?']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IfNode');

        var $nesting = [self].concat($parent_nesting), $IfNode_compile$1, $IfNode_truthy$4, $IfNode_falsy$5, $IfNode_needs_wrapper$ques$6;

        
        self.$handle("if");
        self.$children("test", "true_body", "false_body");
        
        Opal.def(self, '$compile', $IfNode_compile$1 = function $$compile() {
          var $$2, $$3, self = this, truthy = nil, falsy = nil;

          
          truthy = self.$truthy();
          falsy = self.$falsy();
          self.$push("if (", self.$js_truthy(self.$test()), ") {");
          if ($truthy(truthy)) {
            $send(self, 'indent', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

            return self.$line(self.$stmt(truthy))}, $$2.$$s = self, $$2.$$arity = 0, $$2))};
          if ($truthy(falsy)) {
            if (falsy.$type()['$==']("if")) {
              self.$line("} else ", self.$stmt(falsy))
            } else {
              
              self.$line("} else {");
              $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s;

              return self.$line(self.$stmt(falsy))}, $$3.$$s = self, $$3.$$arity = 0, $$3));
              self.$line("}");
            }
          } else {
            self.$push("}")
          };
          if ($truthy(self['$needs_wrapper?']())) {
            return self.$wrap("(function() {", "; return nil; })()")
          } else {
            return nil
          };
        }, $IfNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$truthy', $IfNode_truthy$4 = function $$truthy() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(self['$needs_wrapper?']())) {
            return self.$compiler().$returns((function() {if ($truthy(($ret_or_1 = self.$true_body()))) {
              return $ret_or_1
            } else {
              return self.$s("nil")
            }; return nil; })())
          } else {
            return self.$true_body()
          }
        }, $IfNode_truthy$4.$$arity = 0);
        
        Opal.def(self, '$falsy', $IfNode_falsy$5 = function $$falsy() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(self['$needs_wrapper?']())) {
            return self.$compiler().$returns((function() {if ($truthy(($ret_or_2 = self.$false_body()))) {
              return $ret_or_2
            } else {
              return self.$s("nil")
            }; return nil; })())
          } else {
            return self.$false_body()
          }
        }, $IfNode_falsy$5.$$arity = 0);
        return (Opal.def(self, '$needs_wrapper?', $IfNode_needs_wrapper$ques$6 = function() {
          var self = this, $ret_or_3 = nil;

          if ($truthy(($ret_or_3 = self['$expr?']()))) {
            return $ret_or_3
          } else {
            return self['$recv?']()
          }
        }, $IfNode_needs_wrapper$ques$6.$$arity = 0), nil) && 'needs_wrapper?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'IFlipFlop');

        var $nesting = [self].concat($parent_nesting), $IFlipFlop_compile$7;

        
        self.$handle("iflipflop");
        return (Opal.def(self, '$compile', $IFlipFlop_compile$7 = function $$compile() {
          var self = this;

          return self.$push("true")
        }, $IFlipFlop_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EFlipFlop');

        var $nesting = [self].concat($parent_nesting), $EFlipFlop_compile$8;

        
        self.$handle("eflipflop");
        return (Opal.def(self, '$compile', $EFlipFlop_compile$8 = function $$compile() {
          var self = this;

          return self.$push("true")
        }, $EFlipFlop_compile$8.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
