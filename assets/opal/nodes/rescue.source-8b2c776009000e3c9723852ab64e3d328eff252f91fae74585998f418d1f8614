/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_ensure', '$line', '$stmt', '$body_sexp', '$indent', '$has_rescue_else?', '$unshift', '$rescue_else_code', '$process', '$compiler', '$ensr_sexp', '$wrap_in_closure?', '$wrap', '$returns', '$begn', '$ensr', '$s', '$recv?', '$expr?', '$rescue_else_sexp', '$scope', '$stmt?', '$detect', '$[]', '$!=', '$type', '$rescue_else_sexp=', '$-', '$handle_rescue_else_manually?', '$body_code', '$each_with_index', '$==', '$nil?', '$body', '$!', '$in_ensure?', '$expr', '$klasses', '$lvar', '$updated', '$rescue_body', '$klasses_sexp']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'EnsureNode');

        var $nesting = [self].concat($parent_nesting), $EnsureNode_compile$1, $EnsureNode_body_sexp$6, $EnsureNode_ensr_sexp$7, $EnsureNode_wrap_in_closure$ques$8, $EnsureNode_rescue_else_code$9;

        
        self.$handle("ensure");
        self.$children("begn", "ensr");
        
        Opal.def(self, '$compile', $EnsureNode_compile$1 = function $$compile() {
          var $$2, $$3, self = this;

          
          self.$push("try {");
          $send(self, 'in_ensure', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s;

          return self.$line(self.$stmt(self.$body_sexp()))}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          self.$line("} finally {");
          $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $$4;
            if (self.level == null) self.level = nil;

          if ($truthy(self['$has_rescue_else?']())) {
              
              self.$unshift("var $no_errors = true; ");
              self.$line("var $rescue_else_result;");
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s, $$5;

              
                self.$line("$rescue_else_result = (function() {");
                $send(self, 'indent', [], ($$5 = function(){var self = $$5.$$s == null ? this : $$5.$$s;

                return self.$line(self.$stmt(self.$rescue_else_code()))}, $$5.$$s = self, $$5.$$arity = 0, $$5));
                return self.$line("})();");}, $$4.$$s = self, $$4.$$arity = 0, $$4));
              self.$line("}");
              self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level));
              return self.$line("if ($no_errors) { return $rescue_else_result; }");
            } else {
              return self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level))
            }}, $$3.$$s = self, $$3.$$arity = 0, $$3));
          self.$line("}");
          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$wrap("(function() { ", "; })()")
          } else {
            return nil
          };
        }, $EnsureNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$body_sexp', $EnsureNode_body_sexp$6 = function $$body_sexp() {
          var self = this;

          if ($truthy(self['$wrap_in_closure?']())) {
            return self.$compiler().$returns(self.$begn())
          } else {
            return self.$begn()
          }
        }, $EnsureNode_body_sexp$6.$$arity = 0);
        
        Opal.def(self, '$ensr_sexp', $EnsureNode_ensr_sexp$7 = function $$ensr_sexp() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.$ensr()))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }
        }, $EnsureNode_ensr_sexp$7.$$arity = 0);
        
        Opal.def(self, '$wrap_in_closure?', $EnsureNode_wrap_in_closure$ques$8 = function() {
          var self = this, $ret_or_2 = nil, $ret_or_3 = nil;

          if ($truthy(($ret_or_2 = (function() {if ($truthy(($ret_or_3 = self['$recv?']()))) {
            return $ret_or_3
          } else {
            return self['$expr?']()
          }; return nil; })()))) {
            return $ret_or_2
          } else {
            return self['$has_rescue_else?']()
          }
        }, $EnsureNode_wrap_in_closure$ques$8.$$arity = 0);
        return (Opal.def(self, '$rescue_else_code', $EnsureNode_rescue_else_code$9 = function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if ($truthy(self['$stmt?']())) {
          } else {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, $EnsureNode_rescue_else_code$9.$$arity = 0), nil) && 'rescue_else_code';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RescueNode');

        var $nesting = [self].concat($parent_nesting), $RescueNode_compile$10, $RescueNode_body_code$17, $RescueNode_rescue_else_code$18, $RescueNode_handle_rescue_else_manually$ques$19;

        
        self.$handle("rescue");
        self.$children("body");
        
        Opal.def(self, '$compile', $RescueNode_compile$10 = function $$compile() {
          var $$11, $$12, $$13, $$15, self = this, $writer = nil, _has_rescue_handlers = nil, $ret_or_6 = nil;

          
          
          $writer = [$send(self.$children()['$[]']($range(1, -1, false)), 'detect', [], ($$11 = function(sexp){var self = $$11.$$s == null ? this : $$11.$$s, $ret_or_4 = nil;

          
            
            if (sexp == null) {
              sexp = nil;
            };
            if ($truthy(($ret_or_4 = sexp))) {
              return sexp.$type()['$!=']("resbody")
            } else {
              return $ret_or_4
            };}, $$11.$$s = self, $$11.$$arity = 1, $$11))];
          $send(self.$scope(), 'rescue_else_sexp=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _has_rescue_handlers = false;
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            self.$line("var $no_errors = true;")};
          self.$push("try {");
          $send(self, 'indent', [], ($$12 = function(){var self = $$12.$$s == null ? this : $$12.$$s;

          return self.$line(self.$stmt(self.$body_code()))}, $$12.$$s = self, $$12.$$arity = 0, $$12));
          self.$line("} catch ($err) {");
          $send(self, 'indent', [], ($$13 = function(){var self = $$13.$$s == null ? this : $$13.$$s, $$14;

          
            if ($truthy(self['$has_rescue_else?']())) {
              self.$line("$no_errors = false;")};
            $send(self.$children()['$[]']($range(1, -1, false)), 'each_with_index', [], ($$14 = function(child, idx){var self = $$14.$$s == null ? this : $$14.$$s, $ret_or_5 = nil;
              if (self.level == null) self.level = nil;

            
              
              if (child == null) {
                child = nil;
              };
              
              if (idx == null) {
                idx = nil;
              };
              if ($truthy((function() {if ($truthy(($ret_or_5 = child))) {
                return child.$type()['$==']("resbody")
              } else {
                return $ret_or_5
              }; return nil; })())) {
              } else {
                return nil;
              };
              _has_rescue_handlers = true;
              if (idx['$=='](0)) {
              } else {
                self.$push(" else ")
              };
              return self.$line(self.$process(child, self.level));}, $$14.$$s = self, $$14.$$arity = 2, $$14));
            return self.$push(" else { throw $err; }");}, $$13.$$s = self, $$13.$$arity = 0, $$13));
          self.$line("}");
          if ($truthy(self['$handle_rescue_else_manually?']())) {
            
            self.$push("finally {");
            $send(self, 'indent', [], ($$15 = function(){var self = $$15.$$s == null ? this : $$15.$$s, $$16;

            
              self.$line("if ($no_errors) { ");
              $send(self, 'indent', [], ($$16 = function(){var self = $$16.$$s == null ? this : $$16.$$s;

              return self.$line(self.$stmt(self.$rescue_else_code()))}, $$16.$$s = self, $$16.$$arity = 0, $$16));
              return self.$line("}");}, $$15.$$s = self, $$15.$$arity = 0, $$15));
            self.$push("}");};
          if ($truthy((function() {if ($truthy(($ret_or_6 = self['$expr?']()))) {
            return $ret_or_6
          } else {
            return self['$recv?']()
          }; return nil; })())) {
            return self.$wrap("(function() { ", "})()")
          } else {
            return nil
          };
        }, $RescueNode_compile$10.$$arity = 0);
        
        Opal.def(self, '$body_code', $RescueNode_body_code$17 = function $$body_code() {
          var self = this, body_code = nil, $ret_or_7 = nil;

          
          body_code = (function() {if ($truthy((function() {if ($truthy(($ret_or_7 = self.$body()['$nil?']()))) {
            return $ret_or_7
          } else {
            return self.$body().$type()['$==']("resbody")
          }; return nil; })())) {
            return self.$s("nil")
          } else {
            return self.$body()
          }; return nil; })();
          if ($truthy(self['$stmt?']())) {
          } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, $RescueNode_body_code$17.$$arity = 0);
        
        Opal.def(self, '$rescue_else_code', $RescueNode_rescue_else_code$18 = function $$rescue_else_code() {
          var self = this, rescue_else_code = nil;

          
          rescue_else_code = self.$scope().$rescue_else_sexp();
          if ($truthy(self['$stmt?']())) {
          } else {
            rescue_else_code = self.$compiler().$returns(rescue_else_code)
          };
          return rescue_else_code;
        }, $RescueNode_rescue_else_code$18.$$arity = 0);
        return (Opal.def(self, '$handle_rescue_else_manually?', $RescueNode_handle_rescue_else_manually$ques$19 = function() {
          var self = this, $ret_or_8 = nil;

          if ($truthy(($ret_or_8 = self.$scope()['$in_ensure?']()['$!']()))) {
            return self.$scope()['$has_rescue_else?']()
          } else {
            return $ret_or_8
          }
        }, $RescueNode_handle_rescue_else_manually$ques$19.$$arity = 0), nil) && 'handle_rescue_else_manually?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ResBodyNode');

        var $nesting = [self].concat($parent_nesting), $ResBodyNode_compile$20, $ResBodyNode_klasses$23, $ResBodyNode_rescue_body$24;

        
        self.$handle("resbody");
        self.$children("klasses_sexp", "lvar", "body");
        
        Opal.def(self, '$compile', $ResBodyNode_compile$20 = function $$compile() {
          var $$21, self = this;

          
          self.$push("if (Opal.rescue($err, ", self.$expr(self.$klasses()), ")) {");
          $send(self, 'indent', [], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s, $$22;

          
            if ($truthy(self.$lvar())) {
              self.$push(self.$expr(self.$lvar().$updated(nil, [].concat(Opal.to_a(self.$lvar().$children())).concat([self.$s("js_tmp", "$err")]))))};
            self.$line("try {");
            $send(self, 'indent', [], ($$22 = function(){var self = $$22.$$s == null ? this : $$22.$$s;

            return self.$line(self.$stmt(self.$rescue_body()))}, $$22.$$s = self, $$22.$$arity = 0, $$22));
            return self.$line("} finally { Opal.pop_exception() }");}, $$21.$$s = self, $$21.$$arity = 0, $$21));
          return self.$line("}");
        }, $ResBodyNode_compile$20.$$arity = 0);
        
        Opal.def(self, '$klasses', $ResBodyNode_klasses$23 = function $$klasses() {
          var self = this, $ret_or_9 = nil;

          if ($truthy(($ret_or_9 = self.$klasses_sexp()))) {
            return $ret_or_9
          } else {
            return self.$s("array", self.$s("const", nil, "StandardError"))
          }
        }, $ResBodyNode_klasses$23.$$arity = 0);
        return (Opal.def(self, '$rescue_body', $ResBodyNode_rescue_body$24 = function $$rescue_body() {
          var self = this, body_code = nil, $ret_or_10 = nil;

          
          body_code = (function() {if ($truthy(($ret_or_10 = self.$body()))) {
            return $ret_or_10
          } else {
            return self.$s("nil")
          }; return nil; })();
          if ($truthy(self['$stmt?']())) {
          } else {
            body_code = self.$compiler().$returns(body_code)
          };
          return body_code;
        }, $ResBodyNode_rescue_body$24.$$arity = 0), nil) && 'rescue_body';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'RetryNode');

        var $nesting = [self].concat($parent_nesting), $RetryNode_compile$25;

        
        self.$handle("retry");
        return (Opal.def(self, '$compile', $RetryNode_compile$25 = function $$compile() {
          var self = this;

          return self.$push(self.$stmt(self.$s("send", nil, "retry")))
        }, $RetryNode_compile$25.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
