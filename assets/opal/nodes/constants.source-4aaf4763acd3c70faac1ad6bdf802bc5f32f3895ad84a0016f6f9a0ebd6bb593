/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$magical_data_const?', '$push', '$const_scope', '$recv', '$name', '$eval?', '$compiler', '$nil?', '$==', '$eof_content', '$base', '$expr', '$value']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstNode');

        var $nesting = [self].concat($parent_nesting), $ConstNode_compile$1, $ConstNode_magical_data_const$ques$2;

        
        self.$handle("const");
        self.$children("const_scope", "name");
        
        Opal.def(self, '$compile', $ConstNode_compile$1 = function $$compile() {
          var self = this;

          if ($truthy(self['$magical_data_const?']())) {
            return self.$push("$__END__")
          } else if ($truthy(self.$const_scope())) {
            return self.$push("$$$(", self.$recv(self.$const_scope()), "" + ", '" + (self.$name()) + "')")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$push("" + "$$($nesting, '" + (self.$name()) + "')")
          } else {
            return self.$push("" + "$$($nesting, '" + (self.$name()) + "')")
          }
        }, $ConstNode_compile$1.$$arity = 0);
        return (Opal.def(self, '$magical_data_const?', $ConstNode_magical_data_const$ques$2 = function() {
          var self = this, $ret_or_1 = nil, $ret_or_2 = nil;

          if ($truthy(($ret_or_1 = (function() {if ($truthy(($ret_or_2 = self.$const_scope()['$nil?']()))) {
            return self.$name()['$==']("DATA")
          } else {
            return $ret_or_2
          }; return nil; })()))) {
            return self.$compiler().$eof_content()
          } else {
            return $ret_or_1
          }
        }, $ConstNode_magical_data_const$ques$2.$$arity = 0), nil) && 'magical_data_const?';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CbaseNode');

        var $nesting = [self].concat($parent_nesting), $CbaseNode_compile$3;

        
        self.$handle("cbase");
        return (Opal.def(self, '$compile', $CbaseNode_compile$3 = function $$compile() {
          var self = this;

          return self.$push("'::'")
        }, $CbaseNode_compile$3.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ConstAssignNode');

        var $nesting = [self].concat($parent_nesting), $ConstAssignNode_compile$4;

        
        self.$handle("casgn");
        self.$children("base", "name", "value");
        return (Opal.def(self, '$compile', $ConstAssignNode_compile$4 = function $$compile() {
          var self = this;

          if ($truthy(self.$base())) {
            return self.$push("Opal.const_set(", self.$expr(self.$base()), "" + ", '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          } else {
            return self.$push("" + "Opal.const_set($nesting[0], '" + (self.$name()) + "', ", self.$expr(self.$value()), ")")
          }
        }, $ConstAssignNode_compile$4.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
