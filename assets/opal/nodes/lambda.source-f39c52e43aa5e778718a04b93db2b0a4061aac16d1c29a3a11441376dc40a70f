/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$helper', '$push', '$expr', '$iter']);
  
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'LambdaNode');

        var $nesting = [self].concat($parent_nesting), $LambdaNode_compile$1;

        
        self.$handle("lambda");
        self.$children("iter");
        return (Opal.def(self, '$compile', $LambdaNode_compile$1 = function $$compile() {
          var self = this;

          
          self.$helper("lambda");
          return self.$push("$lambda(", self.$expr(self.$iter()), ")");
        }, $LambdaNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
