/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$handle', '$empty?', '$children', '$push', '$each', '$==', '$type', '$expr', '$<<', '$fragment']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ArrayNode');

        var $nesting = [self].concat($parent_nesting), $ArrayNode_compile$1;

        
        self.$handle("array");
        return (Opal.def(self, '$compile', $ArrayNode_compile$1 = function $$compile() {
          var $a, $$2, self = this, code = nil, work = nil, join = nil;

          
          if ($truthy(self.$children()['$empty?']())) {
            return self.$push("[]")};
          $a = [[], []], (code = $a[0]), (work = $a[1]), $a;
          $send(self.$children(), 'each', [], ($$2 = function(child){var self = $$2.$$s == null ? this : $$2.$$s, splat = nil, part = nil;

          
            
            if (child == null) {
              child = nil;
            };
            splat = child.$type()['$==']("splat");
            part = self.$expr(child);
            if ($truthy(splat)) {
              
              if ($truthy(work['$empty?']())) {
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("[].concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                }
              } else {
                
                if ($truthy(code['$empty?']())) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"));
              };
              return (work = []);
            } else {
              
              if ($truthy(work['$empty?']())) {
              } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](part);
            };}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy(work['$empty?']())) {
          } else {
            
            join = [self.$fragment("["), work, self.$fragment("]")];
            if ($truthy(code['$empty?']())) {
              code = join
            } else {
              code.$push([self.$fragment(".concat("), join, self.$fragment(")")])
            };
          };
          return self.$push(code);
        }, $ArrayNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
