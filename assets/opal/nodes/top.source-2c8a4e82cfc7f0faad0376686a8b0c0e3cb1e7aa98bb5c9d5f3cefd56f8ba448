/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$version_comment', '$opening', '$in_scope', '$use_strict?', '$compiler', '$line', '$stmt', '$stmts', '$is_a?', '$eval?', '$add_temp', '$add_used_helpers', '$add_used_operators', '$to_vars', '$scope', '$compile_method_stubs', '$compile_irb_vars', '$compile_end_construct', '$closing', '$requirable?', '$inspect', '$module_name', '$file', '$returns', '$body', '$irb?', '$each', '$to_a', '$helpers', '$operator_helpers', '$[]', '$method_missing?', '$method_calls', '$join', '$map', '$empty?', '$eof_content']);
  
  self.$require("pathname");
  self.$require("opal/version");
  self.$require("opal/nodes/scope");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'TopNode');

        var $nesting = [self].concat($parent_nesting), $TopNode_compile$1, $TopNode_opening$3, $TopNode_closing$4, $TopNode_stmts$5, $TopNode_compile_irb_vars$6, $TopNode_add_used_helpers$7, $TopNode_add_used_operators$9, $TopNode_compile_method_stubs$11, $TopNode_compile_end_construct$13, $TopNode_version_comment$14;

        
        self.$handle("top");
        self.$children("body");
        
        Opal.def(self, '$compile', $TopNode_compile$1 = function $$compile() {
          var $$2, self = this;

          
          self.$push(self.$version_comment());
          self.$opening();
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, body_code = nil;

          
            if ($truthy(self.$compiler()['$use_strict?']())) {
              self.$line("\"use strict\";")};
            body_code = self.$stmt(self.$stmts());
            if ($truthy(body_code['$is_a?']($$($nesting, 'Array')))) {
            } else {
              body_code = [body_code]
            };
            if ($truthy(self.$compiler()['$eval?']())) {
              self.$add_temp("$nesting = self.$$is_a_module ? [self] : [self.$$class]")
            } else {
              
              self.$add_temp("self = Opal.top");
              self.$add_temp("$nesting = []");
            };
            self.$add_temp("nil = Opal.nil");
            self.$add_temp("$$$ = Opal.$$$");
            self.$add_temp("$$ = Opal.$$");
            self.$add_used_helpers();
            self.$add_used_operators();
            self.$line(self.$scope().$to_vars());
            self.$compile_method_stubs();
            self.$compile_irb_vars();
            self.$compile_end_construct();
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$closing();
        }, $TopNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$opening', $TopNode_opening$3 = function $$opening() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("" + "Opal.modules[" + ($$$($$($nesting, 'Opal'), 'Compiler').$module_name(self.$compiler().$file()).$inspect()) + "] = function(Opal) {")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("(function(Opal, self) {")
          } else {
            return self.$line("(function(Opal) {")
          }
        }, $TopNode_opening$3.$$arity = 0);
        
        Opal.def(self, '$closing', $TopNode_closing$4 = function $$closing() {
          var self = this;

          if ($truthy(self.$compiler()['$requirable?']())) {
            return self.$line("};\n")
          } else if ($truthy(self.$compiler()['$eval?']())) {
            return self.$line("})(Opal, self)")
          } else {
            return self.$line("})(Opal);\n")
          }
        }, $TopNode_closing$4.$$arity = 0);
        
        Opal.def(self, '$stmts', $TopNode_stmts$5 = function $$stmts() {
          var self = this;

          return self.$compiler().$returns(self.$body())
        }, $TopNode_stmts$5.$$arity = 0);
        
        Opal.def(self, '$compile_irb_vars', $TopNode_compile_irb_vars$6 = function $$compile_irb_vars() {
          var self = this;

          if ($truthy(self.$compiler()['$irb?']())) {
            return self.$line("if (!Opal.irb_vars) { Opal.irb_vars = {}; }")
          } else {
            return nil
          }
        }, $TopNode_compile_irb_vars$6.$$arity = 0);
        
        Opal.def(self, '$add_used_helpers', $TopNode_add_used_helpers$7 = function $$add_used_helpers() {
          var $$8, self = this;

          return $send(self.$compiler().$helpers().$to_a(), 'each', [], ($$8 = function(h){var self = $$8.$$s == null ? this : $$8.$$s;

          
            
            if (h == null) {
              h = nil;
            };
            return self.$add_temp("" + "$" + (h) + " = Opal." + (h));}, $$8.$$s = self, $$8.$$arity = 1, $$8))
        }, $TopNode_add_used_helpers$7.$$arity = 0);
        
        Opal.def(self, '$add_used_operators', $TopNode_add_used_operators$9 = function $$add_used_operators() {
          var $$10, self = this, operators = nil;

          
          operators = self.$compiler().$operator_helpers().$to_a();
          return $send(operators, 'each', [], ($$10 = function(op){var self = $$10.$$s == null ? this : $$10.$$s, name = nil;

          
            
            if (op == null) {
              op = nil;
            };
            name = $$$($$$($$($nesting, 'Nodes'), 'CallNode'), 'OPERATORS')['$[]'](op);
            self.$line("" + "function $rb_" + (name) + "(lhs, rhs) {");
            self.$line("" + "  return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs " + (op) + " rhs : lhs['$" + (op) + "'](rhs);");
            return self.$line("}");}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        }, $TopNode_add_used_operators$9.$$arity = 0);
        
        Opal.def(self, '$compile_method_stubs', $TopNode_compile_method_stubs$11 = function $$compile_method_stubs() {
          var $$12, self = this, calls = nil, stubs = nil;

          if ($truthy(self.$compiler()['$method_missing?']())) {
            
            calls = self.$compiler().$method_calls();
            stubs = $send(calls.$to_a(), 'map', [], ($$12 = function(k){var self = $$12.$$s == null ? this : $$12.$$s;

            
              
              if (k == null) {
                k = nil;
              };
              return "" + "'$" + (k) + "'";}, $$12.$$s = self, $$12.$$arity = 1, $$12)).$join(", ");
            if ($truthy(stubs['$empty?']())) {
              return nil
            } else {
              return self.$line("" + "Opal.add_stubs([" + (stubs) + "]);")
            };
          } else {
            return nil
          }
        }, $TopNode_compile_method_stubs$11.$$arity = 0);
        
        Opal.def(self, '$compile_end_construct', $TopNode_compile_end_construct$13 = function $$compile_end_construct() {
          var self = this, content = nil;

          if ($truthy((content = self.$compiler().$eof_content()))) {
            
            self.$line("var $__END__ = Opal.Object.$new();");
            return self.$line("" + "$__END__.$read = function() { return " + (content.$inspect()) + "; };");
          } else {
            return nil
          }
        }, $TopNode_compile_end_construct$13.$$arity = 0);
        return (Opal.def(self, '$version_comment', $TopNode_version_comment$14 = function $$version_comment() {
          var self = this;

          return "" + "/* Generated by Opal " + ($$$($$($nesting, 'Opal'), 'VERSION')) + " */"
        }, $TopNode_version_comment$14.$$arity = 0), nil) && 'version_comment';
      })($nesting[0], $$($nesting, 'ScopeNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
