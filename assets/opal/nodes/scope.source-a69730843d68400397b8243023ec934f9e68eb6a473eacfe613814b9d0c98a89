/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$attr_reader', '$indent', '$scope', '$compiler', '$scope=', '$-', '$==', '$!', '$class?', '$dup', '$push', '$map', '$ivars', '$gvars', '$parser_indent', '$empty?', '$join', '$+', '$fragment', '$def_in_class?', '$add_proto_ivar', '$include?', '$<<', '$has_local?', '$has_temp?', '$pop', '$next_temp', '$loop', '$succ', '$uses_block!', '$identify!', '$compact', '$parent', '$name', '$scope_name', '$mid', '$unique_temp', '$add_scope_temp', '$def?', '$type', '$nil?', '$rescue_else_sexp']);
  
  self.$require("opal/nodes/base");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ScopeNode');

        var $nesting = [self].concat($parent_nesting), $ScopeNode_initialize$1, $ScopeNode_in_scope$2, $ScopeNode_class_scope$ques$4, $ScopeNode_class$ques$5, $ScopeNode_module$ques$6, $ScopeNode_sclass$ques$7, $ScopeNode_top$ques$8, $ScopeNode_iter$ques$9, $ScopeNode_def$ques$10, $ScopeNode_def_in_class$ques$11, $ScopeNode_to_vars$12, $ScopeNode_add_scope_ivar$17, $ScopeNode_add_scope_gvar$18, $ScopeNode_add_proto_ivar$19, $ScopeNode_add_arg$20, $ScopeNode_add_scope_local$21, $ScopeNode_has_local$ques$22, $ScopeNode_add_scope_temp$23, $ScopeNode_has_temp$ques$24, $ScopeNode_new_temp$25, $ScopeNode_next_temp$26, $ScopeNode_queue_temp$28, $ScopeNode_push_while$29, $ScopeNode_pop_while$30, $ScopeNode_in_while$ques$31, $ScopeNode_uses_block$excl$32, $ScopeNode_identify$excl$33, $ScopeNode_find_parent_def$34, $ScopeNode_super_chain$35, $ScopeNode_uses_block$ques$36, $ScopeNode_has_rescue_else$ques$37, $ScopeNode_in_ensure$38, $ScopeNode_in_ensure$ques$39;

        self.$$prototype.type = self.$$prototype.defs = self.$$prototype.parent = self.$$prototype.temps = self.$$prototype.locals = self.$$prototype.compiler = self.$$prototype.proto_ivars = self.$$prototype.ivars = self.$$prototype.gvars = self.$$prototype.args = self.$$prototype.queue = self.$$prototype.while_stack = self.$$prototype.identity = self.$$prototype.uses_block = self.$$prototype.in_ensure = nil;
        
        self.$attr_accessor("parent");
        self.$attr_accessor("name");
        self.$attr_accessor("block_name");
        self.$attr_reader("scope_name");
        self.$attr_reader("locals");
        self.$attr_reader("ivars");
        self.$attr_reader("gvars");
        self.$attr_accessor("mid");
        self.$attr_accessor("defs");
        self.$attr_reader("methods");
        self.$attr_accessor("uses_super");
        self.$attr_accessor("uses_zuper");
        self.$attr_accessor("catch_return", "has_break");
        self.$attr_accessor("rescue_else_sexp");
        
        Opal.def(self, '$initialize', $ScopeNode_initialize$1 = function $$initialize($a) {
          var $post_args, $iter = $ScopeNode_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $ScopeNode_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $ScopeNode_initialize$1, false, true), 'initialize', $zuper, $iter);
          self.locals = [];
          self.temps = [];
          self.args = [];
          self.ivars = [];
          self.gvars = [];
          self.parent = nil;
          self.queue = [];
          self.unique = "a";
          self.while_stack = [];
          self.identity = nil;
          self.defs = nil;
          self.methods = [];
          self.uses_block = false;
          self.in_ensure = false;
          return (self.proto_ivars = []);
        }, $ScopeNode_initialize$1.$$arity = -1);
        
        Opal.def(self, '$in_scope', $ScopeNode_in_scope$2 = function $$in_scope() {
          var $$3, $iter = $ScopeNode_in_scope$2.$$p, $yield = $iter || nil, self = this;

          if ($iter) $ScopeNode_in_scope$2.$$p = null;
          return $send(self, 'indent', [], ($$3 = function(){var self = $$3.$$s == null ? this : $$3.$$s, $writer = nil;
            if (self.parent == null) self.parent = nil;

          
            self.parent = self.$compiler().$scope();
            
            $writer = [self];
            $send(self.$compiler(), 'scope=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            Opal.yield1($yield, self);
            
            $writer = [self.parent];
            $send(self.$compiler(), 'scope=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$3.$$s = self, $$3.$$arity = 0, $$3))
        }, $ScopeNode_in_scope$2.$$arity = 0);
        
        Opal.def(self, '$class_scope?', $ScopeNode_class_scope$ques$4 = function() {
          var self = this, $ret_or_1 = nil;

          if ($truthy(($ret_or_1 = self.type['$==']("class")))) {
            return $ret_or_1
          } else {
            return self.type['$==']("module")
          }
        }, $ScopeNode_class_scope$ques$4.$$arity = 0);
        
        Opal.def(self, '$class?', $ScopeNode_class$ques$5 = function() {
          var self = this;

          return self.type['$==']("class")
        }, $ScopeNode_class$ques$5.$$arity = 0);
        
        Opal.def(self, '$module?', $ScopeNode_module$ques$6 = function() {
          var self = this;

          return self.type['$==']("module")
        }, $ScopeNode_module$ques$6.$$arity = 0);
        
        Opal.def(self, '$sclass?', $ScopeNode_sclass$ques$7 = function() {
          var self = this;

          return self.type['$==']("sclass")
        }, $ScopeNode_sclass$ques$7.$$arity = 0);
        
        Opal.def(self, '$top?', $ScopeNode_top$ques$8 = function() {
          var self = this;

          return self.type['$==']("top")
        }, $ScopeNode_top$ques$8.$$arity = 0);
        
        Opal.def(self, '$iter?', $ScopeNode_iter$ques$9 = function() {
          var self = this;

          return self.type['$==']("iter")
        }, $ScopeNode_iter$ques$9.$$arity = 0);
        
        Opal.def(self, '$def?', $ScopeNode_def$ques$10 = function() {
          var self = this, $ret_or_2 = nil;

          if ($truthy(($ret_or_2 = self.type['$==']("def")))) {
            return $ret_or_2
          } else {
            return self.type['$==']("defs")
          }
        }, $ScopeNode_def$ques$10.$$arity = 0);
        
        Opal.def(self, '$def_in_class?', $ScopeNode_def_in_class$ques$11 = function() {
          var self = this, $ret_or_3 = nil, $ret_or_4 = nil, $ret_or_5 = nil;

          if ($truthy(($ret_or_3 = (function() {if ($truthy(($ret_or_4 = (function() {if ($truthy(($ret_or_5 = self.defs['$!']()))) {
            return self.type['$==']("def")
          } else {
            return $ret_or_5
          }; return nil; })()))) {
            return self.parent
          } else {
            return $ret_or_4
          }; return nil; })()))) {
            return self.parent['$class?']()
          } else {
            return $ret_or_3
          }
        }, $ScopeNode_def_in_class$ques$11.$$arity = 0);
        
        Opal.def(self, '$to_vars', $ScopeNode_to_vars$12 = function $$to_vars() {
          var $$13, $$14, $$15, $$16, self = this, vars = nil, iv = nil, gv = nil, indent = nil, str = nil, $ret_or_6 = nil, pvars = nil, result = nil;

          
          vars = self.temps.$dup();
          $send(vars, 'push', Opal.to_a($send(self.locals, 'map', [], ($$13 = function(l){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (l == null) {
              l = nil;
            };
            return "" + (l) + " = nil";}, $$13.$$s = self, $$13.$$arity = 1, $$13))));
          iv = $send(self.$ivars(), 'map', [], ($$14 = function(ivar){var self = $$14.$$s == null ? this : $$14.$$s;

          
            
            if (ivar == null) {
              ivar = nil;
            };
            return "" + "if (self" + (ivar) + " == null) self" + (ivar) + " = nil;\n";}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          gv = $send(self.$gvars(), 'map', [], ($$15 = function(gvar){var self = $$15.$$s == null ? this : $$15.$$s;

          
            
            if (gvar == null) {
              gvar = nil;
            };
            return "" + "if ($gvars" + (gvar) + " == null) $gvars" + (gvar) + " = nil;\n";}, $$15.$$s = self, $$15.$$arity = 1, $$15));
          indent = self.compiler.$parser_indent();
          str = (function() {if ($truthy(vars['$empty?']())) {
            return ""
          } else {
            return "" + "var " + (vars.$join(", ")) + ";\n"
          }; return nil; })();
          if ($truthy(self.$ivars()['$empty?']())) {
          } else {
            str = $rb_plus(str, "" + (indent) + (iv.$join(indent)))
          };
          if ($truthy(self.$gvars()['$empty?']())) {
          } else {
            str = $rb_plus(str, "" + (indent) + (gv.$join(indent)))
          };
          if ($truthy((function() {if ($truthy(($ret_or_6 = self['$class?']()))) {
            return self.proto_ivars['$empty?']()['$!']()
          } else {
            return $ret_or_6
          }; return nil; })())) {
            
            pvars = $send(self.proto_ivars, 'map', [], ($$16 = function(i){var self = $$16.$$s == null ? this : $$16.$$s;

            
              
              if (i == null) {
                i = nil;
              };
              return "" + "self.$$prototype" + (i);}, $$16.$$s = self, $$16.$$arity = 1, $$16)).$join(" = ");
            result = "" + (str) + "\n" + (indent) + (pvars) + " = nil;";
          } else {
            result = str
          };
          return self.$fragment(result);
        }, $ScopeNode_to_vars$12.$$arity = 0);
        
        Opal.def(self, '$add_scope_ivar', $ScopeNode_add_scope_ivar$17 = function $$add_scope_ivar(ivar) {
          var self = this;

          if ($truthy(self['$def_in_class?']())) {
            return self.parent.$add_proto_ivar(ivar)
          } else if ($truthy(self.ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.ivars['$<<'](ivar)
          }
        }, $ScopeNode_add_scope_ivar$17.$$arity = 1);
        
        Opal.def(self, '$add_scope_gvar', $ScopeNode_add_scope_gvar$18 = function $$add_scope_gvar(gvar) {
          var self = this;

          if ($truthy(self.gvars['$include?'](gvar))) {
            return nil
          } else {
            return self.gvars['$<<'](gvar)
          }
        }, $ScopeNode_add_scope_gvar$18.$$arity = 1);
        
        Opal.def(self, '$add_proto_ivar', $ScopeNode_add_proto_ivar$19 = function $$add_proto_ivar(ivar) {
          var self = this;

          if ($truthy(self.proto_ivars['$include?'](ivar))) {
            return nil
          } else {
            return self.proto_ivars['$<<'](ivar)
          }
        }, $ScopeNode_add_proto_ivar$19.$$arity = 1);
        
        Opal.def(self, '$add_arg', $ScopeNode_add_arg$20 = function $$add_arg(arg) {
          var self = this;

          
          if ($truthy(self.args['$include?'](arg))) {
          } else {
            self.args['$<<'](arg)
          };
          return arg;
        }, $ScopeNode_add_arg$20.$$arity = 1);
        
        Opal.def(self, '$add_scope_local', $ScopeNode_add_scope_local$21 = function $$add_scope_local(local) {
          var self = this;

          
          if ($truthy(self['$has_local?'](local))) {
            return nil};
          return self.locals['$<<'](local);
        }, $ScopeNode_add_scope_local$21.$$arity = 1);
        
        Opal.def(self, '$has_local?', $ScopeNode_has_local$ques$22 = function(local) {
          var self = this, $ret_or_7 = nil, $ret_or_8 = nil, $ret_or_9 = nil;

          
          if ($truthy((function() {if ($truthy(($ret_or_7 = (function() {if ($truthy(($ret_or_8 = self.locals['$include?'](local)))) {
            return $ret_or_8
          } else {
            return self.args['$include?'](local)
          }; return nil; })()))) {
            return $ret_or_7
          } else {
            return self.temps['$include?'](local)
          }; return nil; })())) {
            return true};
          if ($truthy((function() {if ($truthy(($ret_or_9 = self.parent))) {
            return self.type['$==']("iter")
          } else {
            return $ret_or_9
          }; return nil; })())) {
            return self.parent['$has_local?'](local)};
          return false;
        }, $ScopeNode_has_local$ques$22.$$arity = 1);
        
        Opal.def(self, '$add_scope_temp', $ScopeNode_add_scope_temp$23 = function $$add_scope_temp(tmp) {
          var self = this;

          
          if ($truthy(self['$has_temp?'](tmp))) {
            return nil};
          return self.temps.$push(tmp);
        }, $ScopeNode_add_scope_temp$23.$$arity = 1);
        
        Opal.def(self, '$has_temp?', $ScopeNode_has_temp$ques$24 = function(tmp) {
          var self = this;

          return self.temps['$include?'](tmp)
        }, $ScopeNode_has_temp$ques$24.$$arity = 1);
        
        Opal.def(self, '$new_temp', $ScopeNode_new_temp$25 = function $$new_temp() {
          var self = this, tmp = nil;

          
          if ($truthy(self.queue['$empty?']())) {
          } else {
            return self.queue.$pop()
          };
          tmp = self.$next_temp();
          self.temps['$<<'](tmp);
          return tmp;
        }, $ScopeNode_new_temp$25.$$arity = 0);
        
        Opal.def(self, '$next_temp', $ScopeNode_next_temp$26 = function $$next_temp() {
          var $$27, self = this, tmp = nil;

          
          tmp = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s;
            if (self.unique == null) self.unique = nil;

          
            tmp = "" + "$" + (self.unique);
            self.unique = self.unique.$succ();
            if ($truthy(self['$has_local?'](tmp))) {
              return nil
            } else {
              
              Opal.brk(nil, $brk)
            };}, $$27.$$s = self, $$27.$$brk = $brk, $$27.$$arity = 0, $$27))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return tmp;
        }, $ScopeNode_next_temp$26.$$arity = 0);
        
        Opal.def(self, '$queue_temp', $ScopeNode_queue_temp$28 = function $$queue_temp(name) {
          var self = this;

          return self.queue['$<<'](name)
        }, $ScopeNode_queue_temp$28.$$arity = 1);
        
        Opal.def(self, '$push_while', $ScopeNode_push_while$29 = function $$push_while() {
          var self = this, info = nil;

          
          info = $hash2([], {});
          self.while_stack.$push(info);
          return info;
        }, $ScopeNode_push_while$29.$$arity = 0);
        
        Opal.def(self, '$pop_while', $ScopeNode_pop_while$30 = function $$pop_while() {
          var self = this;

          return self.while_stack.$pop()
        }, $ScopeNode_pop_while$30.$$arity = 0);
        
        Opal.def(self, '$in_while?', $ScopeNode_in_while$ques$31 = function() {
          var self = this;

          return self.while_stack['$empty?']()['$!']()
        }, $ScopeNode_in_while$ques$31.$$arity = 0);
        
        Opal.def(self, '$uses_block!', $ScopeNode_uses_block$excl$32 = function() {
          var self = this, $ret_or_10 = nil;

          if ($truthy((function() {if ($truthy(($ret_or_10 = self.type['$==']("iter")))) {
            return self.parent
          } else {
            return $ret_or_10
          }; return nil; })())) {
            return self.parent['$uses_block!']()
          } else {
            
            self.uses_block = true;
            return self['$identify!']();
          }
        }, $ScopeNode_uses_block$excl$32.$$arity = 0);
        
        Opal.def(self, '$identify!', $ScopeNode_identify$excl$33 = function(name) {
          var self = this, $ret_or_11 = nil, $ret_or_12 = nil, $ret_or_13 = nil;

          
          
          if (name == null) {
            name = nil;
          };
          if ($truthy(self.identity)) {
            return self.identity};
          name = (function() {if ($truthy(($ret_or_11 = name))) {
            return $ret_or_11
          } else {
            return [(function() {if ($truthy(($ret_or_12 = self.$parent()))) {
              
              if ($truthy(($ret_or_13 = self.$parent().$name()))) {
                return $ret_or_13
              } else {
                return self.$parent().$scope_name()
              };
            } else {
              return $ret_or_12
            }; return nil; })(), self.$mid()].$compact().$join("_")
          }; return nil; })();
          self.identity = self.compiler.$unique_temp(name);
          if ($truthy(self.parent)) {
            self.parent.$add_scope_temp(self.identity)};
          return self.identity;
        }, $ScopeNode_identify$excl$33.$$arity = -1);
        self.$attr_reader("identity");
        
        Opal.def(self, '$find_parent_def', $ScopeNode_find_parent_def$34 = function $$find_parent_def() {
          var $a, self = this, scope = nil;

          
          scope = self;
          while ($truthy((scope = scope.$parent()))) {
            if ($truthy(scope['$def?']())) {
              return scope}
          };
          return nil;
        }, $ScopeNode_find_parent_def$34.$$arity = 0);
        
        Opal.def(self, '$super_chain', $ScopeNode_super_chain$35 = function $$super_chain() {
          var $a, self = this, chain = nil, scope = nil, defn = nil, mid = nil;

          
          $a = [[], self, "null", "null"], (chain = $a[0]), (scope = $a[1]), (defn = $a[2]), (mid = $a[3]), $a;
          while ($truthy(scope)) {
            if (scope.$type()['$==']("iter")) {
              
              chain['$<<'](scope['$identify!']());
              if ($truthy(scope.$parent())) {
                scope = scope.$parent()};
            } else if ($truthy(["def", "defs"]['$include?'](scope.$type()))) {
              
              defn = scope['$identify!']();
              mid = "" + "'" + (scope.$mid()) + "'";
              break;;
            } else {
              break;
            }
          };
          return [chain, defn, mid];
        }, $ScopeNode_super_chain$35.$$arity = 0);
        
        Opal.def(self, '$uses_block?', $ScopeNode_uses_block$ques$36 = function() {
          var self = this;

          return self.uses_block
        }, $ScopeNode_uses_block$ques$36.$$arity = 0);
        
        Opal.def(self, '$has_rescue_else?', $ScopeNode_has_rescue_else$ques$37 = function() {
          var self = this;

          return self.$rescue_else_sexp()['$nil?']()['$!']()
        }, $ScopeNode_has_rescue_else$ques$37.$$arity = 0);
        
        Opal.def(self, '$in_ensure', $ScopeNode_in_ensure$38 = function $$in_ensure() {
          var $iter = $ScopeNode_in_ensure$38.$$p, $yield = $iter || nil, self = this, result = nil;

          if ($iter) $ScopeNode_in_ensure$38.$$p = null;
          
          if (($yield !== nil)) {
          } else {
            return nil
          };
          self.in_ensure = true;
          result = Opal.yieldX($yield, []);
          self.in_ensure = false;
          return result;
        }, $ScopeNode_in_ensure$38.$$arity = 0);
        return (Opal.def(self, '$in_ensure?', $ScopeNode_in_ensure$ques$39 = function() {
          var self = this;

          return self.in_ensure
        }, $ScopeNode_in_ensure$ques$39.$$arity = 0), nil) && 'in_ensure?';
      })($nesting[0], $$($nesting, 'Base'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
