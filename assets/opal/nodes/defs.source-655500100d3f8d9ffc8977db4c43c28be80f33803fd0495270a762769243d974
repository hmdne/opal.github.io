/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$unshift', '$expr', '$recvr', '$mid', '$push', '$expr?', '$wrap']);
  
  self.$require("opal/nodes/def");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DefsNode');

        var $nesting = [self].concat($parent_nesting), $DefsNode_wrap_with_definition$1;

        
        self.$handle("defs");
        self.$children("recvr", "mid", "inline_args", "stmts");
        return (Opal.def(self, '$wrap_with_definition', $DefsNode_wrap_with_definition$1 = function $$wrap_with_definition() {
          var self = this;

          
          self.$unshift("Opal.defs(", self.$expr(self.$recvr()), "" + ", '$" + (self.$mid()) + "', ");
          self.$push(")");
          if ($truthy(self['$expr?']())) {
            return self.$wrap("(", "" + ", nil) && '" + (self.$mid()) + "'")
          } else {
            return nil
          };
        }, $DefsNode_wrap_with_definition$1.$$arity = 0), nil) && 'wrap_with_definition';
      })($nesting[0], $$($nesting, 'DefNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
