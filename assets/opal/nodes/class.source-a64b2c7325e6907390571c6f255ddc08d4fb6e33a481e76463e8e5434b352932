/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$-', '$add_temp', '$body_code', '$empty_line', '$to_vars', '$super_code', '$sup', '$expr', '$stmt', '$returns', '$compiler', '$body', '$s']);
  
  self.$require("opal/nodes/module");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ClassNode');

        var $nesting = [self].concat($parent_nesting), $ClassNode_compile$1, $ClassNode_super_code$3, $ClassNode_body_code$4;

        
        self.$handle("class");
        self.$children("cid", "sup", "body");
        
        Opal.def(self, '$compile', $ClassNode_compile$1 = function $$compile() {
          var $a, $b, $$2, self = this, name = nil, base = nil;

          
          $b = self.$name_and_base(), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (base = ($a[1] == null ? nil : $a[1])), $b;
          self.$helper("klass");
          self.$push("(function($base, $super, $parent_nesting) {");
          self.$line("" + "  var self = $klass($base, $super, '" + (name) + "');");
          $send(self, 'in_scope', [], ($$2 = function(){var self = $$2.$$s == null ? this : $$2.$$s, $writer = nil, body_code = nil;

          
            
            $writer = [name];
            $send(self.$scope(), 'name=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.$add_temp("$nesting = [self].concat($parent_nesting)");
            body_code = self.$body_code();
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, $$2.$$s = self, $$2.$$arity = 0, $$2));
          return self.$line("})(", base, ", ", self.$super_code(), ", $nesting)");
        }, $ClassNode_compile$1.$$arity = 0);
        
        Opal.def(self, '$super_code', $ClassNode_super_code$3 = function $$super_code() {
          var self = this;

          if ($truthy(self.$sup())) {
            return self.$expr(self.$sup())
          } else {
            return "null"
          }
        }, $ClassNode_super_code$3.$$arity = 0);
        return (Opal.def(self, '$body_code', $ClassNode_body_code$4 = function $$body_code() {
          var self = this, $ret_or_1 = nil;

          return self.$stmt(self.$compiler().$returns((function() {if ($truthy(($ret_or_1 = self.$body()))) {
            return $ret_or_1
          } else {
            return self.$s("nil")
          }; return nil; })()))
        }, $ClassNode_body_code$4.$$arity = 0), nil) && 'body_code';
      })($nesting[0], $$($nesting, 'ModuleNode'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
