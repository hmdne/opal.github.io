/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$recv', '$recvr', '$expr', '$property', '$value', '$<<', '$default_compile', '$meth', '$receiver_sexp', '$method_jsid', '$compile_arguments', '$iter', '$s', '$lhs', '$rhs', '$process']);
  
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/call");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Nodes');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsAttrNode');

        var $nesting = [self].concat($parent_nesting), $JsAttrNode_compile$1;

        
        self.$handle("jsattr");
        self.$children("recvr", "property");
        return (Opal.def(self, '$compile', $JsAttrNode_compile$1 = function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "]")
        }, $JsAttrNode_compile$1.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsAttrAsgnNode');

        var $nesting = [self].concat($parent_nesting), $JsAttrAsgnNode_compile$2;

        
        self.$handle("jsattrasgn");
        self.$children("recvr", "property", "value");
        return (Opal.def(self, '$compile', $JsAttrAsgnNode_compile$2 = function $$compile() {
          var self = this;

          return self.$push(self.$recv(self.$recvr()), "[", self.$expr(self.$property()), "] = ", self.$expr(self.$value()))
        }, $JsAttrAsgnNode_compile$2.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'JsCallNode');

        var $nesting = [self].concat($parent_nesting), $JsCallNode_initialize$3, $JsCallNode_compile$4, $JsCallNode_method_jsid$5, $JsCallNode_compile_using_send$6;

        self.$$prototype.iter = self.$$prototype.arglist = nil;
        
        self.$handle("jscall");
        
        Opal.def(self, '$initialize', $JsCallNode_initialize$3 = function $$initialize($a) {
          var $post_args, $iter = $JsCallNode_initialize$3.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $JsCallNode_initialize$3.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          $send2(self, Opal.find_super_dispatcher(self, 'initialize', $JsCallNode_initialize$3, false, true), 'initialize', $zuper, $iter);
          if ($truthy(self.iter)) {
            self.arglist = self.arglist['$<<'](self.iter)};
          return (self.iter = nil);
        }, $JsCallNode_initialize$3.$$arity = -1);
        
        Opal.def(self, '$compile', $JsCallNode_compile$4 = function $$compile() {
          var self = this;

          return self.$default_compile()
        }, $JsCallNode_compile$4.$$arity = 0);
        
        Opal.def(self, '$method_jsid', $JsCallNode_method_jsid$5 = function $$method_jsid() {
          var self = this;

          return "" + "." + (self.$meth())
        }, $JsCallNode_method_jsid$5.$$arity = 0);
        return (Opal.def(self, '$compile_using_send', $JsCallNode_compile_using_send$6 = function $$compile_using_send() {
          var self = this;

          
          self.$push(self.$recv(self.$receiver_sexp()), self.$method_jsid(), ".apply(null");
          self.$compile_arguments();
          if ($truthy(self.$iter())) {
            self.$push(".concat(", self.$expr(self.$iter()), ")")};
          return self.$push(")");
        }, $JsCallNode_compile_using_send$6.$$arity = 0), nil) && 'compile_using_send';
      })($nesting[0], $$($nesting, 'CallNode'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Match3Node');

        var $nesting = [self].concat($parent_nesting), $Match3Node_compile$7;

        self.$$prototype.level = nil;
        
        self.$handle("match_with_lvasgn");
        self.$children("lhs", "rhs");
        return (Opal.def(self, '$compile', $Match3Node_compile$7 = function $$compile() {
          var self = this, sexp = nil;

          
          sexp = self.$s("send", self.$lhs(), "=~", self.$rhs());
          return self.$push(self.$process(sexp, self.level));
        }, $Match3Node_compile$7.$$arity = 0), nil) && 'compile';
      })($nesting[0], $$($nesting, 'Base'), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
})(Opal);
