/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$<<', '$list', '$delete', '$use', '$disabled?', '$class', '$each', '$new', '$process']);
  
  self.$require("opal/rewriters/opal_engine_check");
  self.$require("opal/rewriters/for_rewriter");
  self.$require("opal/rewriters/explicit_writer_return");
  self.$require("opal/rewriters/js_reserved_words");
  self.$require("opal/rewriters/block_to_iter");
  self.$require("opal/rewriters/dot_js_syntax");
  self.$require("opal/rewriters/logical_operator_assignment");
  self.$require("opal/rewriters/binary_operator_assignment");
  self.$require("opal/rewriters/hashes/key_duplicates_rewriter");
  self.$require("opal/rewriters/dump_args");
  self.$require("opal/rewriters/mlhs_args");
  self.$require("opal/rewriters/inline_args");
  self.$require("opal/rewriters/numblocks");
  self.$require("opal/rewriters/returnable_logic");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Rewriter');

      var $nesting = [self].concat($parent_nesting), $Rewriter_initialize$6, $Rewriter_process$7;

      self.$$prototype.sexp = nil;
      
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $list$1, $use$2, $delete$3, $disable$4, $disabled$ques$5;

        
        
        Opal.def(self, '$list', $list$1 = function $$list() {
          var self = this, $ret_or_1 = nil;
          if (self.list == null) self.list = nil;

          return (self.list = (function() {if ($truthy(($ret_or_1 = self.list))) {
            return $ret_or_1
          } else {
            return []
          }; return nil; })())
        }, $list$1.$$arity = 0);
        
        Opal.def(self, '$use', $use$2 = function $$use(rewriter) {
          var self = this;

          return self.$list()['$<<'](rewriter)
        }, $use$2.$$arity = 1);
        
        Opal.def(self, '$delete', $delete$3 = function(rewriter) {
          var self = this;

          return self.$list().$delete(rewriter)
        }, $delete$3.$$arity = 1);
        
        Opal.def(self, '$disable', $disable$4 = function $$disable() {
          var $iter = $disable$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $disable$4.$$p = null;
          return (function() { try {
          
          self.disabled = true;
          return Opal.yieldX($yield, []);;
          } finally {
            (self.disabled = false)
          }; })()
        }, $disable$4.$$arity = 0);
        return (Opal.def(self, '$disabled?', $disabled$ques$5 = function() {
          var $a, self = this;
          if (self.disabled == null) self.disabled = nil;

          if ($truthy((($a = self['disabled'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
            return self.disabled
          } else {
            return nil
          }
        }, $disabled$ques$5.$$arity = 0), nil) && 'disabled?';
      })(Opal.get_singleton_class(self), $nesting);
      self.$use($$$($$($nesting, 'Rewriters'), 'OpalEngineCheck'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ForRewriter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'Numblocks'));
      self.$use($$$($$($nesting, 'Rewriters'), 'BlockToIter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'DotJsSyntax'));
      self.$use($$$($$($nesting, 'Rewriters'), 'JsReservedWords'));
      self.$use($$$($$($nesting, 'Rewriters'), 'LogicalOperatorAssignment'));
      self.$use($$$($$($nesting, 'Rewriters'), 'BinaryOperatorAssignment'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ExplicitWriterReturn'));
      self.$use($$$($$$($$($nesting, 'Rewriters'), 'Hashes'), 'KeyDuplicatesRewriter'));
      self.$use($$$($$($nesting, 'Rewriters'), 'ReturnableLogic'));
      self.$use($$$($$($nesting, 'Rewriters'), 'DumpArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'MlhsArgs'));
      self.$use($$$($$($nesting, 'Rewriters'), 'InlineArgs'));
      
      Opal.def(self, '$initialize', $Rewriter_initialize$6 = function $$initialize(sexp) {
        var self = this;

        return (self.sexp = sexp)
      }, $Rewriter_initialize$6.$$arity = 1);
      return (Opal.def(self, '$process', $Rewriter_process$7 = function $$process() {
        var $$8, self = this;

        
        if ($truthy(self.$class()['$disabled?']())) {
          return self.sexp};
        $send(self.$class().$list(), 'each', [], ($$8 = function(rewriter_class){var self = $$8.$$s == null ? this : $$8.$$s, rewriter = nil;
          if (self.sexp == null) self.sexp = nil;

        
          
          if (rewriter_class == null) {
            rewriter_class = nil;
          };
          rewriter = rewriter_class.$new();
          return (self.sexp = rewriter.$process(self.sexp));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        return self.sexp;
      }, $Rewriter_process$7.$$arity = 0), nil) && 'process';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
})(Opal);
