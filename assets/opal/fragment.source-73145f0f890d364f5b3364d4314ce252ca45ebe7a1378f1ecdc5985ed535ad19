/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$to_s', '$inspect', '$type', '$===', '$first', '$children', '$[]', '$line', '$column']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Fragment');

      var $nesting = [self].concat($parent_nesting), $Fragment_initialize$1, $Fragment_inspect$2, $Fragment_source_map_name$3, $Fragment_line$4, $Fragment_column$5;

      self.$$prototype.code = self.$$prototype.sexp = nil;
      
      self.$attr_reader("code");
      
      Opal.def(self, '$initialize', $Fragment_initialize$1 = function $$initialize(code, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) {
          sexp = nil;
        };
        self.code = code.$to_s();
        self.sexp = sexp;
        return (self.scope = scope);
      }, $Fragment_initialize$1.$$arity = -3);
      
      Opal.def(self, '$inspect', $Fragment_inspect$2 = function $$inspect() {
        var self = this;

        return "" + "f(" + (self.code.$inspect()) + ")"
      }, $Fragment_inspect$2.$$arity = 0);
      
      Opal.def(self, '$source_map_name', $Fragment_source_map_name$3 = function $$source_map_name() {
        var self = this, $case = nil;

        return (function() {$case = self.sexp.$type();
        if ("top"['$===']($case) || "begin"['$===']($case) || "newline"['$===']($case) || "js_return"['$===']($case)) {return nil}
        else if ("self"['$===']($case)) {return "self"}
        else if ("module"['$===']($case)) {return "module"}
        else if ("class"['$===']($case)) {return "class"}
        else if ("int"['$===']($case)) {return self.sexp.$children().$first()}
        else if ("def"['$===']($case)) {return self.sexp.$children().$first()}
        else if ("defs"['$===']($case)) {return self.sexp.$children()['$[]'](1)}
        else if ("send"['$===']($case)) {return self.sexp.$children()['$[]'](1)}
        else if ("lvar"['$===']($case) || "lvasgn"['$===']($case) || "lvdeclare"['$===']($case) || "ivar"['$===']($case) || "ivasgn"['$===']($case) || "gvar"['$===']($case) || "cvar"['$===']($case) || "cvasgn"['$===']($case) || "gvars"['$===']($case) || "gvasgn"['$===']($case)) {return self.sexp.$children().$first()}
        else { return nil }})()
      }, $Fragment_source_map_name$3.$$arity = 0);
      
      Opal.def(self, '$line', $Fragment_line$4 = function $$line() {
        var self = this;

        if ($truthy(self.sexp)) {
          return self.sexp.$line()
        } else {
          return nil
        }
      }, $Fragment_line$4.$$arity = 0);
      return (Opal.def(self, '$column', $Fragment_column$5 = function $$column() {
        var self = this;

        if ($truthy(self.sexp)) {
          return self.sexp.$column()
        } else {
          return nil
        }
      }, $Fragment_column$5.$$arity = 0), nil) && 'column';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
})(Opal);
