/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send2 = Opal.send2;

  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SourceBuffer');

        var $nesting = [self].concat($parent_nesting), $SourceBuffer_recognize_encoding$1;

        return (Opal.defs(self, '$recognize_encoding', $SourceBuffer_recognize_encoding$1 = function $$recognize_encoding(string) {
          var $iter = $SourceBuffer_recognize_encoding$1.$$p, $yield = $iter || nil, self = this, $ret_or_1 = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $SourceBuffer_recognize_encoding$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if ($truthy(($ret_or_1 = $send2(self, Opal.find_super_dispatcher(self, 'recognize_encoding', $SourceBuffer_recognize_encoding$1, false, true), 'recognize_encoding', $zuper, $iter)))) {
            return $ret_or_1
          } else {
            return $$$($$($nesting, 'Encoding'), 'UTF_8')
          }
        }, $SourceBuffer_recognize_encoding$1.$$arity = 1), nil) && 'recognize_encoding'
      })($nesting[0], $$$($$$($$$('::', 'Parser'), 'Source'), 'Buffer'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
