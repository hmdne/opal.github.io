/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $send2 = Opal.send2, $send = Opal.send, $lambda = Opal.lambda, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$all_errors_are_fatal=', '$diagnostics', '$-', '$ignore_warnings=', '$diagnostics_consumer', '$consumer=', '$extend', '$!=', '$diagnostics_consumer=', '$new', '$rewrite', '$process', '$default_parser', '$default_parser_class']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Parser');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $parent_nesting) {
        var self = $module($base, 'DefaultConfig');

        var $nesting = [self].concat($parent_nesting), $DefaultConfig_included$2, $DefaultConfig_initialize$4, $DefaultConfig_parse$5, $DefaultConfig_rewrite$6;

        
        (function($base, $parent_nesting) {
          var self = $module($base, 'ClassMethods');

          var $nesting = [self].concat($parent_nesting), $ClassMethods_default_parser$1;

          
          self.$attr_accessor("diagnostics_consumer");
          
          Opal.def(self, '$default_parser', $ClassMethods_default_parser$1 = function $$default_parser() {
            var $iter = $ClassMethods_default_parser$1.$$p, $yield = $iter || nil, self = this, parser = nil, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) $ClassMethods_default_parser$1.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            parser = $send2(self, Opal.find_super_dispatcher(self, 'default_parser', $ClassMethods_default_parser$1, false, true), 'default_parser', $zuper, $iter);
            
            $writer = [true];
            $send(parser.$diagnostics(), 'all_errors_are_fatal=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [false];
            $send(parser.$diagnostics(), 'ignore_warnings=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$diagnostics_consumer()];
            $send(parser.$diagnostics(), 'consumer=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return parser;
          }, $ClassMethods_default_parser$1.$$arity = 0);
        })($nesting[0], $nesting);
        Opal.defs(self, '$included', $DefaultConfig_included$2 = function $$included(klass) {
          var $$3, self = this, $writer = nil;

          
          klass.$extend($$($nesting, 'ClassMethods'));
          
          $writer = [$lambda(($$3 = function(diagnostic){var self = $$3.$$s == null ? this : $$3.$$s;

          
            
            if (diagnostic == null) {
              diagnostic = nil;
            };
            if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
              return nil
            } else {
              return nil
            };}, $$3.$$s = self, $$3.$$arity = 1, $$3))];
          $send(klass, 'diagnostics_consumer=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        }, $DefaultConfig_included$2.$$arity = 1);
        
        Opal.def(self, '$initialize', $DefaultConfig_initialize$4 = function $$initialize($a) {
          var $post_args, $iter = $DefaultConfig_initialize$4.$$p, $yield = $iter || nil, self = this;

          if ($iter) $DefaultConfig_initialize$4.$$p = null;
          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          ;
          return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $DefaultConfig_initialize$4, false, true), 'initialize', [$$$($$$($$($nesting, 'Opal'), 'AST'), 'Builder').$new()], null);
        }, $DefaultConfig_initialize$4.$$arity = -1);
        
        Opal.def(self, '$parse', $DefaultConfig_parse$5 = function $$parse(source_buffer) {
          var $iter = $DefaultConfig_parse$5.$$p, $yield = $iter || nil, self = this, parsed = nil, rewriten = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $DefaultConfig_parse$5.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          parsed = $send2(self, Opal.find_super_dispatcher(self, 'parse', $DefaultConfig_parse$5, false, true), 'parse', $zuper, $iter);
          rewriten = self.$rewrite(parsed);
          return rewriten;
        }, $DefaultConfig_parse$5.$$arity = 1);
        
        Opal.def(self, '$rewrite', $DefaultConfig_rewrite$6 = function $$rewrite(node) {
          var self = this;

          return $$$($$($nesting, 'Opal'), 'Rewriter').$new(node).$process()
        }, $DefaultConfig_rewrite$6.$$arity = 1);
      })($nesting[0], $nesting);
      (function(self, $parent_nesting) {
        var $nesting = [self].concat($parent_nesting), $default_parser$7;

        
        self.$attr_accessor("default_parser_class");
        return (Opal.def(self, '$default_parser', $default_parser$7 = function $$default_parser() {
          var self = this;

          return self.$default_parser_class().$default_parser()
        }, $default_parser$7.$$arity = 0), nil) && 'default_parser';
      })(Opal.get_singleton_class(self), $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
})(Opal);
