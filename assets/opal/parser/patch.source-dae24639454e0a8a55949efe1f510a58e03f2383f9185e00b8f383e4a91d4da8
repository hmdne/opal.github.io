/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$==', '$source', '$unpack', '$+', '$to_a', '$lines', '$end_with?', '$<<', '$map', '$chomp']);
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Lexer');

      var $nesting = [self].concat($parent_nesting), $Lexer_source_buffer$eq$1;

      self.$$prototype.source_buffer = nil;
      return (Opal.def(self, '$source_buffer=', $Lexer_source_buffer$eq$1 = function(source_buffer) {
        var self = this, source = nil;

        
        self.source_buffer = source_buffer;
        if ($truthy(self.source_buffer)) {
          
          source = self.source_buffer.$source();
          return (self.source_pts = source.$unpack("U*"));
        } else {
          return (self.source_pts = nil)
        };
      }, $Lexer_source_buffer$eq$1.$$arity = 1), nil) && 'source_buffer='
    })($$($nesting, 'Parser'), null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Literal');

      var $nesting = [self].concat($parent_nesting), $Literal_extend_string$2;

      self.$$prototype.buffer_s = self.$$prototype.buffer = nil;
      
      
      Opal.udef(self, '$' + "extend_string");;
      return (Opal.def(self, '$extend_string', $Literal_extend_string$2 = function $$extend_string(string, ts, te) {
        var self = this, $ret_or_1 = nil;

        
        self.buffer_s = (function() {if ($truthy(($ret_or_1 = self.buffer_s))) {
          return $ret_or_1
        } else {
          return ts
        }; return nil; })();
        self.buffer_e = te;
        return (self.buffer = $rb_plus(self.buffer, string));
      }, $Literal_extend_string$2.$$arity = 3), nil) && 'extend_string';
    })($$$($$($nesting, 'Parser'), 'Lexer'), null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Buffer');

      var $nesting = [self].concat($parent_nesting), $Buffer_source_lines$3;

      self.$$prototype.lines = self.$$prototype.source = nil;
      return (Opal.def(self, '$source_lines', $Buffer_source_lines$3 = function $$source_lines() {
        var $$4, self = this, $ret_or_2 = nil, lines = nil;

        return (self.lines = (function() {if ($truthy(($ret_or_2 = self.lines))) {
          return $ret_or_2
        } else {
          
          lines = self.source.$lines().$to_a();
          if ($truthy(self.source['$end_with?']("\n"))) {
            lines['$<<']("")};
          return $send(lines, 'map', [], ($$4 = function(line){var self = $$4.$$s == null ? this : $$4.$$s;

          
            
            if (line == null) {
              line = nil;
            };
            return line.$chomp("\n");}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        }; return nil; })())
      }, $Buffer_source_lines$3.$$arity = 0), nil) && 'source_lines'
    })($$$($$($nesting, 'Parser'), 'Source'), null, $nesting);
  } else {
    return nil
  }
})(Opal);
