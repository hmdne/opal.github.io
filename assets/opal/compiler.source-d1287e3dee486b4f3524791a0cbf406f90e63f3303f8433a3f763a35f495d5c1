/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$compile', '$new', '$freeze', '$join', '$dirname', '$first', '$split', '$basename', '$to_s', '$cleanpath', '$Pathname', '$fetch', '$define_method', '$option_value', '$key?', '$[]', '$!', '$include?', '$raise', '$inspect', '$[]=', '$-', '$compiler_option', '$attr_reader', '$attr_accessor', '$parse', '$re_raise_with_location', '$flatten', '$process', '$end_with?', '$code', '$last', '$<<', '$fragment', '$s', '$map', '$to_proc', '$file', '$source=', '$default_parser', '$tokenize', '$associate_locations', '$eof', '$magic_comments', '$to_sym', '$strip', '$location=', '$opal_location_from_error', '$path=', '$label', '$lines', '$to_i', '$line', '$label=', '$message', '$set_backtrace', '$backtrace', '$add_opal_location_to_error', '$warn', '$empty?', '$gsub', '$+', '$start_with?', '$helpers', '$new_temp', '$queue_temp', '$push_while', '$indent', '$pop_while', '$in_while?', '$nil?', '$scope', '$handlers', '$type', '$compile_to_fragments', '$error', '$returns', '$===', '$updated', '$children', '$loc', '$uses_block!', '$block_name', '$find_parent_def']);
  
  self.$require("set");
  self.$require("opal/parser");
  self.$require("opal/fragment");
  self.$require("opal/nodes");
  self.$require("opal/eof_content");
  self.$require("opal/errors");
  self.$require("opal/magic_comments");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_compile$1;

    
    Opal.defs(self, '$compile', $Opal_compile$1 = function $$compile(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return $$($nesting, 'Compiler').$new(source, options).$compile();
    }, $Opal_compile$1.$$arity = -2);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Compiler');

      var $nesting = [self].concat($parent_nesting), $Compiler_module_name$2, $Compiler_compiler_option$3, $Compiler_option_value$5, $Compiler_initialize$6, $Compiler_compile$7, $Compiler_parse$9, $Compiler_source_map$11, $Compiler_helpers$12, $Compiler_operator_helpers$14, $Compiler_method_calls$15, $Compiler_error$16, $Compiler_re_raise_with_location$17, $Compiler_warning$18, $Compiler_parser_indent$19, $Compiler_s$20, $Compiler_fragment$21, $Compiler_unique_temp$22, $Compiler_helper$23, $Compiler_indent$24, $Compiler_with_temp$25, $Compiler_in_while$26, $Compiler_in_case$28, $Compiler_in_while$ques$29, $Compiler_process$30, $Compiler_handlers$31, $Compiler_requires$32, $Compiler_required_trees$33, $Compiler_returns$34, $Compiler_handle_block_given_call$36;

      self.$$prototype.option_values = self.$$prototype.options = self.$$prototype.magic_comments = self.$$prototype.fragments = self.$$prototype.source = self.$$prototype.buffer = self.$$prototype.helpers = self.$$prototype.operator_helpers = self.$$prototype.method_calls = self.$$prototype.indent = self.$$prototype.unique = self.$$prototype.scope = self.$$prototype.case_stmt = self.$$prototype.handlers = self.$$prototype.requires = self.$$prototype.required_trees = nil;
      
      Opal.const_set($nesting[0], 'INDENT', "  ");
      Opal.const_set($nesting[0], 'COMPARE', ["<", ">", "<=", ">="].$freeze());
      Opal.defs(self, '$module_name', $Compiler_module_name$2 = function $$module_name(path) {
        var self = this;

        
        path = $$($nesting, 'File').$join($$($nesting, 'File').$dirname(path), $$($nesting, 'File').$basename(path).$split(".").$first());
        return self.$Pathname(path).$cleanpath().$to_s();
      }, $Compiler_module_name$2.$$arity = 1);
      Opal.defs(self, '$compiler_option', $Compiler_compiler_option$3 = function $$compiler_option(name, config) {
        var $$4, self = this, method_name = nil;

        
        
        if (config == null) {
          config = $hash2([], {});
        };
        method_name = config.$fetch("as", name);
        return $send(self, 'define_method', [method_name], ($$4 = function(){var self = $$4.$$s == null ? this : $$4.$$s;

        return self.$option_value(name, config)}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      }, $Compiler_compiler_option$3.$$arity = -2);
      
      Opal.def(self, '$option_value', $Compiler_option_value$5 = function $$option_value(name, config) {
        var self = this, default_value = nil, valid_values = nil, magic_comment = nil, value = nil, $ret_or_1 = nil, $ret_or_2 = nil, $writer = nil;

        
        if ($truthy(self.option_values['$key?'](name))) {
          return self.option_values['$[]'](name)};
        default_value = config['$[]']("default");
        valid_values = config['$[]']("valid_values");
        magic_comment = config['$[]']("magic_comment");
        value = self.options.$fetch(name, default_value);
        if ($truthy((function() {if ($truthy(($ret_or_1 = magic_comment))) {
          return self.magic_comments['$key?'](name)
        } else {
          return $ret_or_1
        }; return nil; })())) {
          value = self.magic_comments.$fetch(name)};
        if ($truthy((function() {if ($truthy(($ret_or_2 = valid_values))) {
          return valid_values['$include?'](value)['$!']()
        } else {
          return $ret_or_2
        }; return nil; })())) {
          self.$raise($$($nesting, 'ArgumentError'), "" + ("" + "invalid value " + (value.$inspect()) + " for option " + (name.$inspect()) + " ") + ("" + "(valid values: " + (valid_values.$inspect()) + ")"))};
        
        $writer = [name, value];
        $send(self.option_values, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $Compiler_option_value$5.$$arity = 2);
      self.$compiler_option("file", $hash2(["default"], {"default": "(file)"}));
      self.$compiler_option("method_missing", $hash2(["default", "as"], {"default": true, "as": "method_missing?"}));
      self.$compiler_option("arity_check", $hash2(["default", "as"], {"default": false, "as": "arity_check?"}));
      self.$compiler_option("freezing", $hash2(["default", "as"], {"default": true, "as": "freezing?"}));
      self.$compiler_option("irb", $hash2(["default", "as"], {"default": false, "as": "irb?"}));
      self.$compiler_option("dynamic_require_severity", $hash2(["default", "valid_values"], {"default": "ignore", "valid_values": ["error", "warning", "ignore"]}));
      self.$compiler_option("requirable", $hash2(["default", "as"], {"default": false, "as": "requirable?"}));
      self.$compiler_option("inline_operators", $hash2(["default", "as"], {"default": true, "as": "inline_operators?"}));
      self.$compiler_option("eval", $hash2(["default", "as"], {"default": false, "as": "eval?"}));
      self.$compiler_option("enable_source_location", $hash2(["default", "as"], {"default": false, "as": "enable_source_location?"}));
      self.$compiler_option("use_strict", $hash2(["default", "as", "magic_comment"], {"default": false, "as": "use_strict?", "magic_comment": true}));
      self.$compiler_option("parse_comments", $hash2(["default", "as"], {"default": false, "as": "parse_comments?"}));
      self.$attr_reader("result");
      self.$attr_reader("fragments");
      self.$attr_accessor("scope");
      self.$attr_reader("case_stmt");
      self.$attr_reader("eof_content");
      self.$attr_reader("comments");
      self.$attr_reader("magic_comments");
      
      Opal.def(self, '$initialize', $Compiler_initialize$6 = function $$initialize(source, options) {
        var self = this;

        
        
        if (options == null) {
          options = $hash2([], {});
        };
        self.source = source;
        self.indent = "";
        self.unique = 0;
        self.options = options;
        self.comments = $$($nesting, 'Hash').$new([]);
        self.case_stmt = nil;
        self.option_values = $hash2([], {});
        return (self.magic_comments = $hash2([], {}));
      }, $Compiler_initialize$6.$$arity = -2);
      
      Opal.def(self, '$compile', $Compiler_compile$7 = function $$compile() {
        var $$8, self = this;

        
        self.$parse();
        self.fragments = $send(self, 're_raise_with_location', [], ($$8 = function(){var self = $$8.$$s == null ? this : $$8.$$s;
          if (self.sexp == null) self.sexp = nil;

        return self.$process(self.sexp).$flatten()}, $$8.$$s = self, $$8.$$arity = 0, $$8));
        if ($truthy(self.fragments.$last().$code()['$end_with?']("\n"))) {
        } else {
          self.fragments['$<<'](self.$fragment("\n", nil, self.$s("newline")))
        };
        return (self.result = $send(self.fragments, 'map', [], "code".$to_proc()).$join(""));
      }, $Compiler_compile$7.$$arity = 0);
      
      Opal.def(self, '$parse', $Compiler_parse$9 = function $$parse() {
        var $a, $b, $$10, self = this, $writer = nil, sexp = nil, comments = nil, tokens = nil, $ret_or_3 = nil;

        
        self.buffer = $$$($$$($$$('::', 'Opal'), 'Parser'), 'SourceBuffer').$new(self.$file(), 1);
        
        $writer = [self.source];
        $send(self.buffer, 'source=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.parser = $$$($$($nesting, 'Opal'), 'Parser').$default_parser();
        $b = $send(self, 're_raise_with_location', [], ($$10 = function(){var self = $$10.$$s == null ? this : $$10.$$s;
          if (self.parser == null) self.parser = nil;
          if (self.buffer == null) self.buffer = nil;

        return self.parser.$tokenize(self.buffer)}, $$10.$$s = self, $$10.$$arity = 0, $$10)), $a = Opal.to_ary($b), (sexp = ($a[0] == null ? nil : $a[0])), (comments = ($a[1] == null ? nil : $a[1])), (tokens = ($a[2] == null ? nil : $a[2])), $b;
        self.sexp = self.$s("top", (function() {if ($truthy(($ret_or_3 = sexp))) {
          return $ret_or_3
        } else {
          return self.$s("nil")
        }; return nil; })());
        self.comments = $$$($$$($$$('::', 'Parser'), 'Source'), 'Comment').$associate_locations(sexp, comments);
        self.magic_comments = $$($nesting, 'MagicComments').$parse(sexp, comments);
        return (self.eof_content = $$($nesting, 'EofContent').$new(tokens, self.source).$eof());
      }, $Compiler_parse$9.$$arity = 0);
      
      Opal.def(self, '$source_map', $Compiler_source_map$11 = function $$source_map() {
        var self = this;

        return $$$($$$($$$('::', 'Opal'), 'SourceMap'), 'File').$new(self.fragments, self.$file(), self.source)
      }, $Compiler_source_map$11.$$arity = 0);
      
      Opal.def(self, '$helpers', $Compiler_helpers$12 = function $$helpers() {
        var $$13, self = this, $ret_or_4 = nil;

        return (self.helpers = (function() {if ($truthy(($ret_or_4 = self.helpers))) {
          return $ret_or_4
        } else {
          return $$($nesting, 'Set').$new($send(self.$magic_comments()['$[]']("helpers").$to_s().$split(","), 'map', [], ($$13 = function(h){var self = $$13.$$s == null ? this : $$13.$$s;

          
            
            if (h == null) {
              h = nil;
            };
            return h.$strip().$to_sym();}, $$13.$$s = self, $$13.$$arity = 1, $$13)))
        }; return nil; })())
      }, $Compiler_helpers$12.$$arity = 0);
      
      Opal.def(self, '$operator_helpers', $Compiler_operator_helpers$14 = function $$operator_helpers() {
        var self = this, $ret_or_5 = nil;

        return (self.operator_helpers = (function() {if ($truthy(($ret_or_5 = self.operator_helpers))) {
          return $ret_or_5
        } else {
          return $$($nesting, 'Set').$new()
        }; return nil; })())
      }, $Compiler_operator_helpers$14.$$arity = 0);
      
      Opal.def(self, '$method_calls', $Compiler_method_calls$15 = function $$method_calls() {
        var self = this, $ret_or_6 = nil;

        return (self.method_calls = (function() {if ($truthy(($ret_or_6 = self.method_calls))) {
          return $ret_or_6
        } else {
          return $$($nesting, 'Set').$new()
        }; return nil; })())
      }, $Compiler_method_calls$15.$$arity = 0);
      
      Opal.def(self, '$error', $Compiler_error$16 = function $$error(msg, line) {
        var self = this, error = nil, $writer = nil;

        
        
        if (line == null) {
          line = nil;
        };
        error = $$$($$$('::', 'Opal'), 'SyntaxError').$new(msg);
        
        $writer = [$$$($$($nesting, 'Opal'), 'OpalBacktraceLocation').$new(self.$file(), line)];
        $send(error, 'location=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$raise(error);
      }, $Compiler_error$16.$$arity = -2);
      
      Opal.def(self, '$re_raise_with_location', $Compiler_re_raise_with_location$17 = function $$re_raise_with_location() {
        var $iter = $Compiler_re_raise_with_location$17.$$p, $yield = $iter || nil, self = this, error = nil, opal_location = nil, $writer = nil, $ret_or_7 = nil, new_error = nil;

        if ($iter) $Compiler_re_raise_with_location$17.$$p = null;
        try {
          return Opal.yieldX($yield, []);
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError'), $$$($$$('::', 'Opal'), 'SyntaxError')])) {(error = $err)
            try {
              
              opal_location = $$$('::', 'Opal').$opal_location_from_error(error);
              
              $writer = [self.$file()];
              $send(opal_location, 'path=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(($ret_or_7 = opal_location.$label()))) {
                $ret_or_7
              } else {
                
                $writer = [self.source.$lines()['$[]']($rb_minus(opal_location.$line().$to_i(), 1)).$strip()];
                $send(opal_location, 'label=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              new_error = $$$($$$('::', 'Opal'), 'SyntaxError').$new(error.$message());
              new_error.$set_backtrace(error.$backtrace());
              $$$('::', 'Opal').$add_opal_location_to_error(opal_location, new_error);
              return self.$raise(new_error);
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, $Compiler_re_raise_with_location$17.$$arity = 0);
      
      Opal.def(self, '$warning', $Compiler_warning$18 = function $$warning(msg, line) {
        var self = this;

        
        
        if (line == null) {
          line = nil;
        };
        return self.$warn("" + "warning: " + (msg) + " -- " + (self.$file()) + ":" + (line));
      }, $Compiler_warning$18.$$arity = -2);
      
      Opal.def(self, '$parser_indent', $Compiler_parser_indent$19 = function $$parser_indent() {
        var self = this;

        return self.indent
      }, $Compiler_parser_indent$19.$$arity = 0);
      
      Opal.def(self, '$s', $Compiler_s$20 = function $$s(type, $a) {
        var $post_args, children, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        children = $post_args;;
        return $$$($$$($$$('::', 'Opal'), 'AST'), 'Node').$new(type, children);
      }, $Compiler_s$20.$$arity = -2);
      
      Opal.def(self, '$fragment', $Compiler_fragment$21 = function $$fragment(str, scope, sexp) {
        var self = this;

        
        
        if (sexp == null) {
          sexp = nil;
        };
        return $$($nesting, 'Fragment').$new(str, scope, sexp);
      }, $Compiler_fragment$21.$$arity = -3);
      
      Opal.def(self, '$unique_temp', $Compiler_unique_temp$22 = function $$unique_temp(name) {
        var self = this, $ret_or_8 = nil, unique = nil;

        
        name = name.$to_s();
        if ($truthy((function() {if ($truthy(($ret_or_8 = name))) {
          return name['$empty?']()['$!']()
        } else {
          return $ret_or_8
        }; return nil; })())) {
          name = name.$to_s().$gsub("<=>", "$lt_eq_gt").$gsub("===", "$eq_eq_eq").$gsub("==", "$eq_eq").$gsub("=~", "$eq_tilde").$gsub("!~", "$excl_tilde").$gsub("!=", "$not_eq").$gsub("<=", "$lt_eq").$gsub(">=", "$gt_eq").$gsub("=", "$eq").$gsub("?", "$ques").$gsub("!", "$excl").$gsub("/", "$slash").$gsub("%", "$percent").$gsub("+", "$plus").$gsub("-", "$minus").$gsub("<", "$lt").$gsub(">", "$gt").$gsub(/[^\w\$]/, "$")};
        unique = (self.unique = $rb_plus(self.unique, 1));
        return "" + ((function() {if ($truthy(name['$start_with?']("$"))) {
          return nil
        } else {
          return "$"
        }; return nil; })()) + (name) + "$" + (unique);
      }, $Compiler_unique_temp$22.$$arity = 1);
      
      Opal.def(self, '$helper', $Compiler_helper$23 = function $$helper(name) {
        var self = this;

        return self.$helpers()['$<<'](name)
      }, $Compiler_helper$23.$$arity = 1);
      
      Opal.def(self, '$indent', $Compiler_indent$24 = function $$indent() {
        var $iter = $Compiler_indent$24.$$p, $yield = $iter || nil, self = this, indent = nil, res = nil;

        if ($iter) $Compiler_indent$24.$$p = null;
        
        indent = self.indent;
        self.indent = $rb_plus(self.indent, $$($nesting, 'INDENT'));
        self.space = "" + "\n" + (self.indent);
        res = Opal.yieldX($yield, []);
        self.indent = indent;
        self.space = "" + "\n" + (self.indent);
        return res;
      }, $Compiler_indent$24.$$arity = 0);
      
      Opal.def(self, '$with_temp', $Compiler_with_temp$25 = function $$with_temp() {
        var $iter = $Compiler_with_temp$25.$$p, $yield = $iter || nil, self = this, tmp = nil, res = nil;

        if ($iter) $Compiler_with_temp$25.$$p = null;
        
        tmp = self.scope.$new_temp();
        res = Opal.yield1($yield, tmp);
        self.scope.$queue_temp(tmp);
        return res;
      }, $Compiler_with_temp$25.$$arity = 0);
      
      Opal.def(self, '$in_while', $Compiler_in_while$26 = function $$in_while() {
        var $$27, $iter = $Compiler_in_while$26.$$p, $yield = $iter || nil, self = this, result = nil;

        if ($iter) $Compiler_in_while$26.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return nil
        };
        self.while_loop = self.scope.$push_while();
        result = $send(self, 'indent', [], ($$27 = function(){var self = $$27.$$s == null ? this : $$27.$$s;

        return Opal.yieldX($yield, []);}, $$27.$$s = self, $$27.$$arity = 0, $$27));
        self.scope.$pop_while();
        return result;
      }, $Compiler_in_while$26.$$arity = 0);
      
      Opal.def(self, '$in_case', $Compiler_in_case$28 = function $$in_case() {
        var $iter = $Compiler_in_case$28.$$p, $yield = $iter || nil, self = this, old = nil;

        if ($iter) $Compiler_in_case$28.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return nil
        };
        old = self.case_stmt;
        self.case_stmt = $hash2([], {});
        Opal.yieldX($yield, []);
        return (self.case_stmt = old);
      }, $Compiler_in_case$28.$$arity = 0);
      
      Opal.def(self, '$in_while?', $Compiler_in_while$ques$29 = function() {
        var self = this;

        return self.scope['$in_while?']()
      }, $Compiler_in_while$ques$29.$$arity = 0);
      
      Opal.def(self, '$process', $Compiler_process$30 = function $$process(sexp, level) {
        var self = this, handler = nil;

        
        
        if (level == null) {
          level = "expr";
        };
        if ($truthy(sexp['$nil?']())) {
          return self.$fragment("", self.$scope())};
        if ($truthy((handler = self.$handlers()['$[]'](sexp.$type())))) {
          return handler.$new(sexp, level, self).$compile_to_fragments()
        } else {
          return self.$error("" + "Unsupported sexp: " + (sexp.$type()))
        };
      }, $Compiler_process$30.$$arity = -2);
      
      Opal.def(self, '$handlers', $Compiler_handlers$31 = function $$handlers() {
        var self = this, $ret_or_9 = nil;

        return (self.handlers = (function() {if ($truthy(($ret_or_9 = self.handlers))) {
          return $ret_or_9
        } else {
          return $$$($$$($$($nesting, 'Opal'), 'Nodes'), 'Base').$handlers()
        }; return nil; })())
      }, $Compiler_handlers$31.$$arity = 0);
      
      Opal.def(self, '$requires', $Compiler_requires$32 = function $$requires() {
        var self = this, $ret_or_10 = nil;

        return (self.requires = (function() {if ($truthy(($ret_or_10 = self.requires))) {
          return $ret_or_10
        } else {
          return []
        }; return nil; })())
      }, $Compiler_requires$32.$$arity = 0);
      
      Opal.def(self, '$required_trees', $Compiler_required_trees$33 = function $$required_trees() {
        var self = this, $ret_or_11 = nil;

        return (self.required_trees = (function() {if ($truthy(($ret_or_11 = self.required_trees))) {
          return $ret_or_11
        } else {
          return []
        }; return nil; })())
      }, $Compiler_required_trees$33.$$arity = 0);
      
      Opal.def(self, '$returns', $Compiler_returns$34 = function $$returns(sexp) {
        var $a, $b, $$35, self = this, $case = nil, when_sexp = nil, then_sexp = nil, body_sexp = nil, resbodies = nil, else_sexp = nil, klass = nil, lvar = nil, body = nil, rescue_sexp = nil, ensure_body = nil, rest = nil, last = nil, cond = nil, true_body = nil, false_body = nil;

        
        if ($truthy(sexp)) {
        } else {
          return self.$returns(self.$s("nil"))
        };
        return (function() {$case = sexp.$type();
        if ("undef"['$===']($case)) {return self.$returns(self.$s("begin", sexp, self.$s("nil")))}
        else if ("break"['$===']($case) || "next"['$===']($case) || "redo"['$===']($case)) {return sexp}
        else if ("yield"['$===']($case)) {return sexp.$updated("returnable_yield", nil)}
        else if ("when"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (when_sexp = $slice.call($a, 0, $b)), (then_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
        return sexp.$updated(nil, [].concat(Opal.to_a(when_sexp)).concat([self.$returns(then_sexp)]));}
        else if ("rescue"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (body_sexp = ($a[0] == null ? nil : $a[0])), $b = $a.length - 1, $b = ($b < 1) ? 1 : $b, (resbodies = $slice.call($a, 1, $b)), (else_sexp = ($a[$b] == null ? nil : $a[$b])), $a;
        resbodies = $send(resbodies, 'map', [], ($$35 = function(resbody){var self = $$35.$$s == null ? this : $$35.$$s;

        
          
          if (resbody == null) {
            resbody = nil;
          };
          return self.$returns(resbody);}, $$35.$$s = self, $$35.$$arity = 1, $$35));
        if ($truthy(else_sexp)) {
          else_sexp = self.$returns(else_sexp)};
        return sexp.$updated(nil, [self.$returns(body_sexp)].concat(Opal.to_a(resbodies)).concat([else_sexp]));}
        else if ("resbody"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (klass = ($a[0] == null ? nil : $a[0])), (lvar = ($a[1] == null ? nil : $a[1])), (body = ($a[2] == null ? nil : $a[2])), $a;
        return sexp.$updated(nil, [klass, lvar, self.$returns(body)]);}
        else if ("ensure"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (rescue_sexp = ($a[0] == null ? nil : $a[0])), (ensure_body = ($a[1] == null ? nil : $a[1])), $a;
        sexp = sexp.$updated(nil, [self.$returns(rescue_sexp), ensure_body]);
        return self.$s("js_return", sexp);}
        else if ("begin"['$===']($case) || "kwbegin"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), $b = $a.length - 1, $b = ($b < 0) ? 0 : $b, (rest = $slice.call($a, 0, $b)), (last = ($a[$b] == null ? nil : $a[$b])), $a;
        return sexp.$updated(nil, [].concat(Opal.to_a(rest)).concat([self.$returns(last)]));}
        else if ("while"['$===']($case) || "until"['$===']($case) || "while_post"['$===']($case) || "until_post"['$===']($case)) {return sexp}
        else if ("return"['$===']($case) || "js_return"['$===']($case) || "returnable_yield"['$===']($case)) {return sexp}
        else if ("xstr"['$===']($case)) {return sexp.$updated(nil, [$send(self, 's', ["js_return"].concat(Opal.to_a(sexp.$children())))])}
        else if ("if"['$===']($case)) {
        $a = [].concat(Opal.to_a(sexp)), (cond = ($a[0] == null ? nil : $a[0])), (true_body = ($a[1] == null ? nil : $a[1])), (false_body = ($a[2] == null ? nil : $a[2])), $a;
        return sexp.$updated(nil, [cond, self.$returns(true_body), self.$returns(false_body)]);}
        else {return self.$s("js_return", sexp).$updated(nil, nil, $hash2(["location"], {"location": sexp.$loc()}))}})();
      }, $Compiler_returns$34.$$arity = 1);
      return (Opal.def(self, '$handle_block_given_call', $Compiler_handle_block_given_call$36 = function $$handle_block_given_call(sexp) {
        var self = this, $ret_or_12 = nil, scope = nil;

        
        self.scope['$uses_block!']();
        if ($truthy(self.scope.$block_name())) {
          return self.$fragment("" + "(" + (self.scope.$block_name()) + " !== nil)", self.$scope(), sexp)
        } else if ($truthy((function() {if ($truthy(($ret_or_12 = (scope = self.scope.$find_parent_def())))) {
          return scope.$block_name()
        } else {
          return $ret_or_12
        }; return nil; })())) {
          return self.$fragment("" + "(" + (scope.$block_name()) + " !== nil)", scope, sexp)
        } else {
          return self.$fragment("false", scope, sexp)
        };
      }, $Compiler_handle_block_given_call$36.$$arity = 1), nil) && 'handle_block_given_call';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
})(Opal);
