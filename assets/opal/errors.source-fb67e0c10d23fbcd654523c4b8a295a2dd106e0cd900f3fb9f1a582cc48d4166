/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $module = Opal.module, $klass = Opal.klass, $send2 = Opal.send2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$new', '$respond_to?', '$location', '$location=', '$-', '$diagnostic', '$diagnostic=', '$to_a', '$backtrace', '$unshift', '$to_s', '$set_backtrace', '$path', '$lineno', '$+', '$label', '$line', '$lineno=', '$source_line', '$label=', '$expression']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_opal_location_from_error$2, $Opal_add_opal_location_to_error$3;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Error');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'GemNotFound');

      var $nesting = [self].concat($parent_nesting), $GemNotFound_initialize$1;

      
      self.$attr_reader("gem_name");
      return (Opal.def(self, '$initialize', $GemNotFound_initialize$1 = function $$initialize(gem_name) {
        var $iter = $GemNotFound_initialize$1.$$p, $yield = $iter || nil, self = this;

        if ($iter) $GemNotFound_initialize$1.$$p = null;
        
        self.gem_name = gem_name;
        return $send2(self, Opal.find_super_dispatcher(self, 'initialize', $GemNotFound_initialize$1, false, true), 'initialize', ["" + "can't find gem " + (gem_name)], null);
      }, $GemNotFound_initialize$1.$$arity = 1), nil) && 'initialize';
    })($nesting[0], $$($nesting, 'Error'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CompilationError');

      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("location")
    })($nesting[0], $$($nesting, 'Error'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParsingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'CompilationError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'RewritingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'ParsingError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SyntaxError');

      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("location")
    })($nesting[0], $$$('::', 'SyntaxError'), $nesting);
    Opal.defs(self, '$opal_location_from_error', $Opal_opal_location_from_error$2 = function $$opal_location_from_error(error) {
      var self = this, opal_location = nil, $writer = nil;

      
      opal_location = $$($nesting, 'OpalBacktraceLocation').$new();
      if ($truthy(error['$respond_to?']("location"))) {
        
        $writer = [error.$location()];
        $send(opal_location, 'location=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      if ($truthy(error['$respond_to?']("diagnostic"))) {
        
        $writer = [error.$diagnostic()];
        $send(opal_location, 'diagnostic=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];};
      return opal_location;
    }, $Opal_opal_location_from_error$2.$$arity = 1);
    Opal.defs(self, '$add_opal_location_to_error', $Opal_add_opal_location_to_error$3 = function $$add_opal_location_to_error(opal_location, error) {
      var self = this, backtrace = nil;

      
      backtrace = error.$backtrace().$to_a();
      backtrace.$unshift(opal_location.$to_s());
      error.$set_backtrace(backtrace);
      return error;
    }, $Opal_add_opal_location_to_error$3.$$arity = 2);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'OpalBacktraceLocation');

      var $nesting = [self].concat($parent_nesting), $OpalBacktraceLocation_initialize$4, $OpalBacktraceLocation_to_s$5, $OpalBacktraceLocation_diagnostic$eq$6, $OpalBacktraceLocation_location$eq$7;

      
      self.$attr_accessor("path", "lineno", "label");
      
      Opal.def(self, '$initialize', $OpalBacktraceLocation_initialize$4 = function $$initialize(path, lineno, label) {
        var $a, self = this;

        
        
        if (path == null) {
          path = nil;
        };
        
        if (lineno == null) {
          lineno = nil;
        };
        
        if (label == null) {
          label = nil;
        };
        return $a = [path, lineno, label], (self.path = $a[0]), (self.lineno = $a[1]), (self.label = $a[2]), $a;
      }, $OpalBacktraceLocation_initialize$4.$$arity = -1);
      
      Opal.def(self, '$to_s', $OpalBacktraceLocation_to_s$5 = function $$to_s() {
        var self = this, string = nil;

        
        string = self.$path();
        if ($truthy(self.$lineno())) {
          string = $rb_plus(string, "" + ":" + (self.$lineno()))};
        string = $rb_plus(string, ":in ");
        if ($truthy(self.$label())) {
          string = $rb_plus(string, "" + "`" + (self.$label()) + "'")
        } else {
          string = $rb_plus(string, "unknown")
        };
        return string;
      }, $OpalBacktraceLocation_to_s$5.$$arity = 0);
      Opal.alias(self, "line", "lineno");
      
      Opal.def(self, '$diagnostic=', $OpalBacktraceLocation_diagnostic$eq$6 = function(diagnostic) {
        var self = this, $writer = nil;

        
        if ($truthy(diagnostic)) {
        } else {
          return nil
        };
        
        $writer = [diagnostic.$location()];
        $send(self, 'location=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $OpalBacktraceLocation_diagnostic$eq$6.$$arity = 1);
      return (Opal.def(self, '$location=', $OpalBacktraceLocation_location$eq$7 = function(location) {
        var self = this, $writer = nil;

        
        if ($truthy(location)) {
        } else {
          return nil
        };
        
        $writer = [location.$line()];
        $send(self, 'lineno=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(location['$respond_to?']("source_line"))) {
          
          $writer = [location.$source_line()];
          $send(self, 'label=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else if ($truthy(location['$respond_to?']("expression"))) {
          
          $writer = [location.$expression().$source_line()];
          $send(self, 'label=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        };
      }, $OpalBacktraceLocation_location$eq$7.$$arity = 1), nil) && 'location=';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting)
})(Opal);
