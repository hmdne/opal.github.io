/* Generated by Opal 1.1.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var $$20, $$21, $$22, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $hash2 = Opal.hash2, $lambda = Opal.lambda, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $case = nil, $writer = nil;
  if ($gvars.$ == null) $gvars.$ = nil;
  if ($gvars["try"] == null) $gvars["try"] = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;
  if ($gvars.stdout == null) $gvars.stdout = nil;

  Opal.add_stubs(['$require', '$to_n', '$new', '$run_code', '$addEventListener', '$querySelector', '$[]', '$[]=', '$-', '$encodeURIComponent', '$value', '$innerText=', '$each', '$createElement', '$createTextNode', '$value=', '$compile_code', '$replaceState', '$log', '$appendChild', '$decodeURIComponent', '$start_with?', '$size', '$strip', '$setup_links', '$setup_code', '$map', '$to_proc', '$css', '$compile', '$log_error', '$eval_code', '$puts', '$<<', '$join', '$p', '$===', '$setup', '$attempt_compilation', '$proc', '$print_to_output', '$write_proc=']);
  
  self.$require("_vendor/codemirror");
  self.$require("_vendor/ruby");
  self.$require("_vendor/javascript");
  self.$require("try/examples");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TryOpal');

    var $nesting = [self].concat($parent_nesting), $TryOpal_initialize$4, $TryOpal_setup_links$6, $TryOpal_setup_code$11, $TryOpal_setup$12, $TryOpal_p$13, $TryOpal_compile_code$14, $TryOpal_run_code$15, $TryOpal_eval_code$16, $TryOpal_log_error$17, $TryOpal_print_to_output$18, $TryOpal_attempt_compilation$19;

    self.$$prototype.editor = self.$$prototype.output = self.$$prototype.viewer = self.$$prototype.flush = self.$$prototype.ready = self.$$prototype.parser = nil;
    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Editor');

      var $nesting = [self].concat($parent_nesting), $Editor_initialize$1, $Editor_value$eq$2, $Editor_value$3;

      self.$$prototype["native"] = nil;
      
      
      Opal.def(self, '$initialize', $Editor_initialize$1 = function $$initialize(dom_id, options) {
        var self = this;

        return (self["native"] = CodeMirror(document.getElementById(dom_id), options.$to_n()))
      }, $Editor_initialize$1.$$arity = 2);
      
      Opal.def(self, '$value=', $Editor_value$eq$2 = function(str) {
        var self = this;

        return self["native"].setValue(str)
      }, $Editor_value$eq$2.$$arity = 1);
      return (Opal.def(self, '$value', $Editor_value$3 = function $$value() {
        var self = this;

        return self["native"].getValue()
      }, $Editor_value$3.$$arity = 0), nil) && 'value';
    })($nesting[0], null, $nesting);
    
    Opal.def(self, '$initialize', $TryOpal_initialize$4 = function $$initialize() {
      var $$5, self = this;

      
      self.flush = [];
      self.output = $$($nesting, 'Editor').$new("output", $hash2(["lineNumbers", "mode", "readOnly"], {"lineNumbers": false, "mode": "text", "readOnly": true}));
      self.viewer = $$($nesting, 'Editor').$new("viewer", $hash2(["lineNumbers", "mode", "readOnly", "theme"], {"lineNumbers": true, "mode": "javascript", "readOnly": true, "theme": "tomorrow-night-eighties"}));
      return (self.editor = $$($nesting, 'Editor').$new("editor", $hash2(["lineNumbers", "mode", "tabMode", "theme", "extraKeys"], {"lineNumbers": true, "mode": "ruby", "tabMode": "shift", "theme": "tomorrow-night-eighties", "extraKeys": $hash2(["Cmd-Enter"], {"Cmd-Enter": $lambda(($$5 = function($a){var self = $$5.$$s == null ? this : $$5.$$s, $post_args, q;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        q = $post_args;;
        return self.$run_code();}, $$5.$$s = self, $$5.$$arity = -1, $$5))})})));
    }, $TryOpal_initialize$4.$$arity = 0);
    
    Opal.def(self, '$setup_links', $TryOpal_setup_links$6 = function $$setup_links() {
      var $$7, $$8, $$9, self = this, examples_container = nil, $writer = nil;
      if ($gvars.$ == null) $gvars.$ = nil;

      
      $send($gvars.$['$[]']("document").$querySelector("#run_code"), 'addEventListener', ["click"], ($$7 = function(event){var self = $$7.$$s == null ? this : $$7.$$s;

      
        
        if (event == null) {
          event = nil;
        };
        event.preventDefault();
        event.stopPropagation();
        return self.$run_code();}, $$7.$$s = self, $$7.$$arity = 1, $$7));
      $send($gvars.$['$[]']("document").$querySelector("#link_code"), 'addEventListener', ["click"], ($$8 = function(event){var self = $$8.$$s == null ? this : $$8.$$s, $writer = nil;
        if (self.editor == null) self.editor = nil;
        if ($gvars.$ == null) $gvars.$ = nil;

      
        
        if (event == null) {
          event = nil;
        };
        event.preventDefault();
        event.stopPropagation();
        
        $writer = ["hash", ""];
        $send($gvars.$['$[]']("location"), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["search", "" + "code=" + ($gvars.$.$encodeURIComponent(self.editor.$value()))];
        $send($gvars.$['$[]']("location"), '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;}, $$8.$$s = self, $$8.$$arity = 1, $$8));
      examples_container = $gvars.$['$[]']("document").$querySelector("#examples");
      
      $writer = [""];
      $send(examples_container, 'innerText=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return $send($$($nesting, 'TRY_EXAMPLES'), 'each', [], ($$9 = function(title, code){var self = $$9.$$s == null ? this : $$9.$$s, $$10, url = nil, link = nil, spacer = nil;
        if ($gvars.$ == null) $gvars.$ = nil;
        if ($gvars.console == null) $gvars.console = nil;

      
        
        if (title == null) {
          title = nil;
        };
        
        if (code == null) {
          code = nil;
        };
        url = "" + "?example=" + ($gvars.$.$encodeURIComponent(title));
        link = $gvars.$['$[]']("document").$createElement("a");
        
        $writer = ["href", url];
        $send(link, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["innerText", title];
        $send(link, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        spacer = $gvars.$['$[]']("document").$createTextNode(" Â  ");
        $send(link, 'addEventListener', ["click"], ($$10 = function(event){var self = $$10.$$s == null ? this : $$10.$$s;
          if (self.editor == null) self.editor = nil;
          if ($gvars.$ == null) $gvars.$ = nil;

        
          
          if (event == null) {
            event = nil;
          };
          event.preventDefault();
          event.stopPropagation();
          
          $writer = [code];
          $send(self.editor, 'value=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.$compile_code();
          return $gvars.$['$[]']("history").$replaceState($hash2(["title", "code"], {"title": title, "code": code}), nil.$to_n(), url);}, $$10.$$s = self, $$10.$$arity = 1, $$10));
        $gvars.console.$log(link);
        examples_container.$appendChild(spacer);
        return examples_container.$appendChild(link);}, $$9.$$s = self, $$9.$$arity = 2, $$9));
    }, $TryOpal_setup_links$6.$$arity = 0);
    
    Opal.def(self, '$setup_code', $TryOpal_setup_code$11 = function $$setup_code() {
      var self = this, hash = nil, search = nil, run = nil, title = nil, code = nil, $writer = nil;
      if ($gvars.$ == null) $gvars.$ = nil;

      
      hash = $gvars.$.$decodeURIComponent($gvars.$['$[]']("location")['$[]']("hash"));
      search = $gvars.$.$decodeURIComponent($gvars.$['$[]']("location")['$[]']("search"));
      run = false;
      if ($truthy(hash['$start_with?']("#code="))) {
        
        title = "Code from url (hash)";
        code = hash['$[]'](Opal.Range.$new("#code=".$size(), -1, false));
      } else if ($truthy(hash['$start_with?']("#code:"))) {
        
        title = "Code from url (hash)";
        code = hash['$[]'](Opal.Range.$new("#code:".$size(), -1, false));
      } else if ($truthy(search['$start_with?']("?code="))) {
        
        title = "Code from url (query)";
        code = search['$[]'](Opal.Range.$new("?code=".$size(), -1, false));
      } else if ($truthy(search['$start_with?']("?example="))) {
        
        title = search['$[]'](Opal.Range.$new("?example=".$size(), -1, false));
        code = $$($nesting, 'TRY_EXAMPLES')['$[]'](title).$strip();
      } else {
        
        title = "Overview";
        code = $$($nesting, 'TRY_EXAMPLES')['$[]'](title).$strip();
        run = true;
      };
      
      $writer = [code];
      $send(self.editor, 'value=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      self.$compile_code();
      if ($truthy(run)) {
        return self.$run_code()
      } else {
        return nil
      };
    }, $TryOpal_setup_code$11.$$arity = 0);
    
    Opal.def(self, '$setup', $TryOpal_setup$12 = function $$setup() {
      var self = this;

      
      self.$setup_links();
      return self.$setup_code();
    }, $TryOpal_setup$12.$$arity = 0);
    
    Opal.def(self, '$p', $TryOpal_p$13 = function $$p($a) {
      var $post_args, args, self = this;
      if ($gvars.console == null) $gvars.console = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      $send($gvars.console, 'log', Opal.to_a($send(args, 'map', [], "inspect".$to_proc())));
      return Opal.to_a(args);
    }, $TryOpal_p$13.$$arity = -1);
    
    Opal.def(self, '$compile_code', $TryOpal_compile_code$14 = function $$compile_code() {
      var self = this, $writer = nil, code = nil, err = nil;
      if ($gvars.$ == null) $gvars.$ = nil;

      try {
        
        
        $writer = ["click \"Run\" to see the output"];
        $send(self.output, 'value=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        $gvars.$['$[]']("document").$querySelector("#output").$css($hash2(["opacity"], {"opacity": "0.5"}));
        code = $$($nesting, 'Opal').$compile(self.editor.$value(), $hash2(["source_map_enabled"], {"source_map_enabled": false}));
        
        $writer = [code];
        $send(self.viewer, 'value=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError'), $$($nesting, 'SyntaxError')])) {(err = $err)
          try {
            return self.$log_error(err)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $TryOpal_compile_code$14.$$arity = 0);
    
    Opal.def(self, '$run_code', $TryOpal_run_code$15 = function $$run_code() {
      var self = this, $writer = nil, err = nil;
      if ($gvars.$ == null) $gvars.$ = nil;

      try {
        
        self.$compile_code();
        self.flush = [];
        
        $writer = [""];
        $send(self.output, 'value=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.$eval_code(self.viewer.$value());
        
        $writer = ["opacity", "1"];
        $send($gvars.$['$[]']("document").$querySelector("#output")['$[]']("style"), '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError'), $$($nesting, 'SyntaxError')])) {(err = $err)
          try {
            return self.$log_error(err)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $TryOpal_run_code$15.$$arity = 0);
    
    Opal.def(self, '$eval_code', $TryOpal_eval_code$16 = function $$eval_code(js_code) {
      var self = this;

      return eval(js_code);
    }, $TryOpal_eval_code$16.$$arity = 1);
    
    Opal.def(self, '$log_error', $TryOpal_log_error$17 = function $$log_error(err) {
      var self = this;

      return self.$puts("" + (err) + "\n" + (err.stack))
    }, $TryOpal_log_error$17.$$arity = 1);
    
    Opal.def(self, '$print_to_output', $TryOpal_print_to_output$18 = function $$print_to_output(str) {
      var self = this, $writer = nil;

      
      self.flush['$<<'](str);
      
      $writer = [self.flush.$join("")];
      $send(self.output, 'value=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $TryOpal_print_to_output$18.$$arity = 1);
    return (Opal.def(self, '$attempt_compilation', $TryOpal_attempt_compilation$19 = function $$attempt_compilation($kwargs) {
      var ready, parser, self = this, $ret_or_1 = nil, $ret_or_2 = nil, $ret_or_3 = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      ready = $kwargs.$$smap["ready"];
      if (ready == null) {
        ready = nil
      };
      
      parser = $kwargs.$$smap["parser"];
      if (parser == null) {
        parser = nil
      };
      self.ready = (function() {if ($truthy(($ret_or_1 = self.ready))) {
        return $ret_or_1
      } else {
        return ready
      }; return nil; })();
      self.parser = (function() {if ($truthy(($ret_or_2 = self.parser))) {
        return $ret_or_2
      } else {
        return parser
      }; return nil; })();
      if ($truthy((function() {if ($truthy(($ret_or_3 = self.ready))) {
        return self.parser
      } else {
        return $ret_or_3
      }; return nil; })())) {
        return self.$compile_code()
      } else {
        return nil
      };
    }, $TryOpal_attempt_compilation$19.$$arity = -1), nil) && 'attempt_compilation';
  })($nesting[0], null, $nesting);
  $gvars["try"] = $$($nesting, 'TryOpal').$new();
  self.$p($gvars.$['$[]']("document")['$[]']("readyState"));
  $case = $gvars.$['$[]']("document")['$[]']("readyState");
  if ("complete"['$===']($case) || "loaded"['$===']($case) || "interactive"['$===']($case)) {
  $gvars["try"].$setup();
  $gvars["try"].$attempt_compilation($hash2(["ready"], {"ready": true}));}
  else {$send($gvars.$['$[]']("document"), 'addEventListener', ["DOMContentLoaded"], ($$20 = function(){var self = $$20.$$s == null ? this : $$20.$$s;
    if ($gvars["try"] == null) $gvars["try"] = nil;

  
    $gvars["try"].$setup();
    return $gvars["try"].$attempt_compilation($hash2(["ready"], {"ready": true}));}, $$20.$$s = self, $$20.$$arity = 0, $$20))};
  $send($gvars.$['$[]']("document"), 'addEventListener', ["parser_loaded"], ($$21 = function(){var self = $$21.$$s == null ? this : $$21.$$s;
    if ($gvars["try"] == null) $gvars["try"] = nil;

  
    self.$p("parser_loaded");
    return $gvars["try"].$attempt_compilation($hash2(["parser"], {"parser": true}));}, $$21.$$s = self, $$21.$$arity = 0, $$21));
  
  $writer = [(($writer = [$send(self, 'proc', [], ($$22 = function(str){var self = $$22.$$s == null ? this : $$22.$$s;
    if ($gvars["try"] == null) $gvars["try"] = nil;

  
    
    if (str == null) {
      str = nil;
    };
    return $gvars["try"].$print_to_output(str);}, $$22.$$s = self, $$22.$$arity = 1, $$22))]), $send($gvars.stderr, 'write_proc=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
  $send($gvars.stdout, 'write_proc=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];;
})(Opal);
