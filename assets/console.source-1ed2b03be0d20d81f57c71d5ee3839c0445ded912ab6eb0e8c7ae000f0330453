/* Generated by Opal 1.1.1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$, $$ = Opal.$$, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$raise', '$==', '$arity', '$instance_exec', '$to_proc', '$new']);
  
  self.$require("native");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Console');

    var $nesting = [self].concat($parent_nesting), $Console_clear$1, $Console_trace$2, $Console_log$3, $Console_info$4, $Console_warn$5, $Console_error$6, $Console_time$7, $Console_group$8, $Console_group$excl$9;

    self.$$prototype["native"] = nil;
    
    self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
    
    Opal.def(self, '$clear', $Console_clear$1 = function $$clear() {
      var self = this;

      return self["native"].clear()
    }, $Console_clear$1.$$arity = 0);
    
    Opal.def(self, '$trace', $Console_trace$2 = function $$trace() {
      var self = this;

      return self["native"].trace()
    }, $Console_trace$2.$$arity = 0);
    
    Opal.def(self, '$log', $Console_log$3 = function $$log($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self["native"].log.apply(self["native"], args);
    }, $Console_log$3.$$arity = -1);
    
    Opal.def(self, '$info', $Console_info$4 = function $$info($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self["native"].info.apply(self["native"], args);
    }, $Console_info$4.$$arity = -1);
    
    Opal.def(self, '$warn', $Console_warn$5 = function $$warn($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self["native"].warn.apply(self["native"], args);
    }, $Console_warn$5.$$arity = -1);
    
    Opal.def(self, '$error', $Console_error$6 = function $$error($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self["native"].error.apply(self["native"], args);
    }, $Console_error$6.$$arity = -1);
    
    Opal.def(self, '$time', $Console_time$7 = function $$time(label) {
      var $iter = $Console_time$7.$$p, block = $iter || nil, self = this;

      if ($iter) $Console_time$7.$$p = null;
      
      
      if ($iter) $Console_time$7.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "no block given")
      };
      self["native"].time(label);
      
      return (function() { try {
      if (block.$arity()['$=='](0)) {
        return $send(self, 'instance_exec', [], block.$to_proc())
      } else {
        return Opal.yield1(block, self);
      }
      } finally {
        self["native"].timeEnd()
      }; })();;
    }, $Console_time$7.$$arity = 1);
    
    Opal.def(self, '$group', $Console_group$8 = function $$group($a) {
      var $iter = $Console_group$8.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Console_group$8.$$p = null;
      
      
      if ($iter) $Console_group$8.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "no block given")
      };
      self["native"].group.apply(self["native"], args);
      
      return (function() { try {
      if (block.$arity()['$=='](0)) {
        return $send(self, 'instance_exec', [], block.$to_proc())
      } else {
        return Opal.yield1(block, self);
      }
      } finally {
        self["native"].groupEnd()
      }; })();;
    }, $Console_group$8.$$arity = -1);
    return (Opal.def(self, '$group!', $Console_group$excl$9 = function($a) {
      var $iter = $Console_group$excl$9.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Console_group$excl$9.$$p = null;
      
      
      if ($iter) $Console_group$excl$9.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ((block !== nil)) {
      } else {
        return nil
      };
      self["native"].groupCollapsed.apply(self["native"], args);
      
      return (function() { try {
      if (block.$arity()['$=='](0)) {
        return $send(self, 'instance_exec', [], block.$to_proc())
      } else {
        return Opal.yield1(block, self);
      }
      } finally {
        self["native"].groupEnd()
      }; })();;
    }, $Console_group$excl$9.$$arity = -1), nil) && 'group!';
  })($nesting[0], null, $nesting);
  if ($truthy((typeof(Opal.global.console) !== "undefined"))) {
    return ($gvars.console = $$($nesting, 'Console').$new(Opal.global.console))
  } else {
    return nil
  };
})(Opal);
